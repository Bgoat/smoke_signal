
BaseCLI_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f0c  08007f0c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08007f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200000dc  08007ff0  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08007ff0  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001799b  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042b8  00000000  00000000  00037aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac5f  00000000  00000000  0003e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4b6  00000000  00000000  0005917f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f24  00000000  00000000  00075635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  0010a5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079f8 	.word	0x080079f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	080079f8 	.word	0x080079f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	440b      	add	r3, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d114      	bne.n	80005d4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
		i++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005b4:	e00e      	b.n	80005d4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	440b      	add	r3, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d001      	beq.n	80005ce <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d11a      	bne.n	8000610 <ConsoleCommandMatch+0x8c>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d817      	bhi.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d011      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d00b      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	d005      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1d2      	bne.n	80005b6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000610:	68bb      	ldr	r3, [r7, #8]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800061e:	b480      	push	{r7}
 8000620:	b087      	sub	sp, #28
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000636:	e00d      	b.n	8000654 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	441a      	add	r2, r3
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	440b      	add	r3, r1
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	701a      	strb	r2, [r3, #0]
		i++;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3ed      	bcc.n	8000638 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800065c:	e007      	b.n	800066e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d9f4      	bls.n	800065e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000674:	693b      	ldr	r3, [r7, #16]
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000694:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000696:	e002      	b.n	800069e <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d009      	beq.n	80006be <ConsoleCommandEndline+0x3c>
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d003      	beq.n	80006be <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3ec      	bcc.n	8000698 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d201      	bcs.n	80006ca <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80006de:	f000 fc9f 	bl	8001020 <ConsoleIoInit>
	ConsoleIoSendString("Welcome your gateway to testing code and hardware.");
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <ConsoleInit+0x48>)
 80006e4:	f000 fcd0 	bl	8001088 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <ConsoleInit+0x4c>)
 80006ea:	f000 fccd 	bl	8001088 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <ConsoleInit+0x50>)
 80006f0:	f000 fcca 	bl	8001088 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <ConsoleInit+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e007      	b.n	8000710 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <ConsoleInit+0x58>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d9f4      	bls.n	8000700 <ConsoleInit+0x28>
	}

}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08007a10 	.word	0x08007a10
 8000724:	08007a44 	.word	0x08007a44
 8000728:	08007a48 	.word	0x08007a48
 800072c:	200001f8 	.word	0x200001f8
 8000730:	200000f8 	.word	0x200000f8

08000734 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800073a:	4b54      	ldr	r3, [pc, #336]	; (800088c <ConsoleProcess+0x158>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a54      	ldr	r2, [pc, #336]	; (8000890 <ConsoleProcess+0x15c>)
 8000740:	1898      	adds	r0, r3, r2
 8000742:	4b52      	ldr	r3, [pc, #328]	; (800088c <ConsoleProcess+0x158>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800074a:	463a      	mov	r2, r7
 800074c:	4619      	mov	r1, r3
 800074e:	f000 fc6f 	bl	8001030 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ConsoleProcess+0x2e>
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <ConsoleProcess+0x160>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8091 	beq.w	8000884 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <ConsoleProcess+0x160>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <ConsoleProcess+0x158>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a46      	ldr	r2, [pc, #280]	; (800088c <ConsoleProcess+0x158>)
 8000772:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <ConsoleProcess+0x158>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4845      	ldr	r0, [pc, #276]	; (8000890 <ConsoleProcess+0x15c>)
 800077c:	f7ff ff81 	bl	8000682 <ConsoleCommandEndline>
 8000780:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db7d      	blt.n	8000884 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000788:	f000 fc40 	bl	800100c <ConsoleCommandsGetTable>
 800078c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000798:	e03d      	b.n	8000816 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4613      	mov	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	461a      	mov	r2, r3
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4938      	ldr	r1, [pc, #224]	; (8000890 <ConsoleProcess+0x15c>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee8 	bl	8000584 <ConsoleCommandMatch>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02a      	beq.n	8000810 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	4613      	mov	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	461a      	mov	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4830      	ldr	r0, [pc, #192]	; (8000890 <ConsoleProcess+0x15c>)
 80007ce:	4798      	blx	r3
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d017      	beq.n	800080a <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <ConsoleProcess+0x164>)
 80007dc:	f000 fc54 	bl	8001088 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <ConsoleProcess+0x15c>)
 80007e2:	f000 fc51 	bl	8001088 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <ConsoleProcess+0x168>)
 80007e8:	f000 fc4e 	bl	8001088 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	461a      	mov	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	3308      	adds	r3, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fc42 	bl	8001088 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <ConsoleProcess+0x16c>)
 8000806:	f000 fc3f 	bl	8001088 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e002      	b.n	8000816 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4613      	mov	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	461a      	mov	r2, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d003      	beq.n	8000834 <ConsoleProcess+0x100>
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000832:	d0b2      	beq.n	800079a <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00d      	beq.n	8000856 <ConsoleProcess+0x122>
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000840:	d109      	bne.n	8000856 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <ConsoleProcess+0x158>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d905      	bls.n	8000856 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <ConsoleProcess+0x170>)
 800084c:	f000 fc1c 	bl	8001088 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <ConsoleProcess+0x16c>)
 8000852:	f000 fc19 	bl	8001088 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <ConsoleProcess+0x158>)
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	461a      	mov	r2, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <ConsoleProcess+0x15c>)
 8000862:	f7ff fedc 	bl	800061e <ConsoleResetBuffer>
 8000866:	4603      	mov	r3, r0
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <ConsoleProcess+0x158>)
 800086a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <ConsoleProcess+0x158>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <ConsoleProcess+0x160>)
 800087c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <ConsoleProcess+0x174>)
 8000880:	f000 fc02 	bl	8001088 <ConsoleIoSendString>
		}
	}
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001f8 	.word	0x200001f8
 8000890:	200000f8 	.word	0x200000f8
 8000894:	200001fc 	.word	0x200001fc
 8000898:	08007a4c 	.word	0x08007a4c
 800089c:	08007a54 	.word	0x08007a54
 80008a0:	08007a44 	.word	0x08007a44
 80008a4:	08007a5c 	.word	0x08007a5c
 80008a8:	08007a48 	.word	0x08007a48

080008ac <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	460b      	mov	r3, r1
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008c6:	e00b      	b.n	80008e0 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d102      	bne.n	80008da <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3301      	adds	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3301      	adds	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d002      	beq.n	80008ee <ConsoleParamFindN+0x42>
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	2bff      	cmp	r3, #255	; 0xff
 80008ec:	d9ec      	bls.n	80008c8 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d102      	bne.n	80008fc <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80008f6:	2310      	movs	r3, #16
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	e002      	b.n	8000902 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3724      	adds	r7, #36	; 0x24
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	460b      	mov	r3, r1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000922:	f107 021c 	add.w	r2, r7, #28
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffbe 	bl	80008ac <ConsoleParamFindN>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	4413      	add	r3, r2
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800094a:	e011      	b.n	8000970 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000958:	701a      	strb	r2, [r3, #0]
		i++;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000970:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d00a      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
 8000978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800097c:	2b0d      	cmp	r3, #13
 800097e:	d006      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000984:	2b20      	cmp	r3, #32
 8000986:	d002      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	2b07      	cmp	r3, #7
 800098c:	d9de      	bls.n	800094c <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	2b08      	cmp	r3, #8
 8000992:	d102      	bne.n	800099a <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000994:	2310      	movs	r3, #16
 8000996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800099a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10e      	bne.n	80009c0 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 faf0 	bl	8006f98 <atoi>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	460b      	mov	r3, r1
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	4619      	mov	r1, r3
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff5e 	bl	80008ac <ConsoleParamFindN>
 80009f0:	4603      	mov	r3, r0
 80009f2:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80009f4:	7ffb      	ldrb	r3, [r7, #31]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d12c      	bne.n	8000a54 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e01e      	b.n	8000a3e <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a00:	7ffb      	ldrb	r3, [r7, #31]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10d      	bne.n	8000a22 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f107 0217 	add.w	r2, r7, #23
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f8e1 	bl	8000be0 <ConsoleUtilHexCharToInt>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a34:	4413      	add	r3, r2
 8000a36:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d9dd      	bls.n	8000a00 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	2b11      	cmp	r3, #17
 8000a48:	d101      	bne.n	8000a4e <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a52:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e01b      	b.n	8000aaa <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f1c3 0303 	rsb	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa42 f303 	asr.w	r3, r2, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	441a      	add	r2, r3
 8000a96:	7cbb      	ldrb	r3, [r7, #18]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8e1 	bl	8000c62 <ConsoleUtilsIntToHexChar>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d9e0      	bls.n	8000a72 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fae1 	bl	8001088 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da07      	bge.n	8000afa <smallItoa+0x2a>
		isNegative = true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	425b      	negs	r3, r3
 8000af2:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000afe:	e007      	b.n	8000b10 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b08:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f1      	bne.n	8000b00 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	fb01 f202 	mul.w	r2, r1, r2
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	440b      	add	r3, r1
 8000b48:	3230      	adds	r2, #48	; 0x30
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b56:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1e6      	bne.n	8000b30 <smallItoa+0x60>

	if (isNegative) {
 8000b62:	7ffb      	ldrb	r3, [r7, #31]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	222d      	movs	r2, #45	; 0x2d
 8000b6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	f107 0108 	add.w	r1, r7, #8
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff9e 	bl	8000ad0 <smallItoa>
	ConsoleIoSendString(out);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fa75 	bl	8001088 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ConsoleSendParamInt32>:

// ConsoleSendParamInt32
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt32(int32_t parameterInt)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	char out[INT32_MAX_STR_LENGTH];
	memset(out, 0, sizeof(out));
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fa1b 	bl	8006ff4 <memset>

	itoa (parameterInt, out, 10);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff82 	bl	8000ad0 <smallItoa>
	ConsoleIoSendString(out);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa59 	bl	8001088 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ConsoleUtilHexCharToInt>:
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8000bf4:	d908      	bls.n	8000c08 <ConsoleUtilHexCharToInt+0x28>
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b39      	cmp	r3, #57	; 0x39
 8000bfa:	d805      	bhi.n	8000c08 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3b30      	subs	r3, #48	; 0x30
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e025      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b40      	cmp	r3, #64	; 0x40
 8000c0c:	d908      	bls.n	8000c20 <ConsoleUtilHexCharToInt+0x40>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b46      	cmp	r3, #70	; 0x46
 8000c12:	d805      	bhi.n	8000c20 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	3b37      	subs	r3, #55	; 0x37
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e019      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b60      	cmp	r3, #96	; 0x60
 8000c24:	d908      	bls.n	8000c38 <ConsoleUtilHexCharToInt+0x58>
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b66      	cmp	r3, #102	; 0x66
 8000c2a:	d805      	bhi.n	8000c38 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	3b57      	subs	r3, #87	; 0x57
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e00d      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b0a      	cmp	r3, #10
 8000c3c:	d105      	bne.n	8000c4a <ConsoleUtilHexCharToInt+0x6a>
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b0d      	cmp	r3, #13
 8000c42:	d102      	bne.n	8000c4a <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	d102      	bne.n	8000c50 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c4a:	2311      	movs	r3, #17
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c50:	2310      	movs	r3, #16
 8000c52:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	6039      	str	r1, [r7, #0]
 8000c6c:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	d805      	bhi.n	8000c84 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3330      	adds	r3, #48	; 0x30
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e00d      	b.n	8000ca0 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d908      	bls.n	8000c9c <ConsoleUtilsIntToHexChar+0x3a>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d805      	bhi.n	8000c9c <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3337      	adds	r3, #55	; 0x37
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e001      	b.n	8000ca0 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cd0:	2309      	movs	r3, #9
 8000cd2:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e01e      	b.n	8000d18 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <ConsoleCommandHelp+0x68>)
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f9cc 	bl	8001088 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <ConsoleCommandHelp+0x6c>)
 8000cf2:	f000 f9c9 	bl	8001088 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	3308      	adds	r3, #8
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <ConsoleCommandHelp+0x68>)
 8000d04:	4413      	add	r3, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f9be 	bl	8001088 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <ConsoleCommandHelp+0x70>)
 8000d0e:	f000 f9bb 	bl	8001088 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3db      	bcc.n	8000cda <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d22:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08007b30 	.word	0x08007b30
 8000d30:	08007aa4 	.word	0x08007aa4
 8000d34:	08007aa8 	.word	0x08007aa8

08000d38 <ConsoleCommandAccel>:
static eCommandResult_T ConsoleCommandAccel(const char buffer[])
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_ACCELERO_GetXYZ(&data_xyz);
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fdbb 	bl	80028c0 <BSP_ACCELERO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11d      	bne.n	8000d90 <ConsoleCommandAccel+0x58>
	{
		ConsoleIoSendString("X is ");
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <ConsoleCommandAccel+0x64>)
 8000d56:	f000 f997 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8000d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff0b 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <ConsoleCommandAccel+0x68>)
 8000d66:	f000 f98f 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8000d6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff03 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <ConsoleCommandAccel+0x6c>)
 8000d76:	f000 f987 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8000d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fefb 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <ConsoleCommandAccel+0x70>)
 8000d86:	f000 f97f 	bl	8001088 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <ConsoleCommandAccel+0x74>)
 8000d8c:	f000 f97c 	bl	8001088 <ConsoleIoSendString>
	}
	return result;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08007aac 	.word	0x08007aac
 8000da0:	08007ab4 	.word	0x08007ab4
 8000da4:	08007abc 	.word	0x08007abc
 8000da8:	08007ac4 	.word	0x08007ac4
 8000dac:	08007aa8 	.word	0x08007aa8

08000db0 <ConsoleCommandGyro>:
static eCommandResult_T ConsoleCommandGyro(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_GYRO_GetXYZ(&data_xyz);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fdfd 	bl	80029bc <BSP_GYRO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d11d      	bne.n	8000e08 <ConsoleCommandGyro+0x58>
	{
		ConsoleIoSendString("X is ");
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <ConsoleCommandGyro+0x64>)
 8000dce:	f000 f95b 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8000dd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fecf 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <ConsoleCommandGyro+0x68>)
 8000dde:	f000 f953 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8000de2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fec7 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <ConsoleCommandGyro+0x6c>)
 8000dee:	f000 f94b 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8000df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff febf 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <ConsoleCommandGyro+0x70>)
 8000dfe:	f000 f943 	bl	8001088 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <ConsoleCommandGyro+0x74>)
 8000e04:	f000 f940 	bl	8001088 <ConsoleIoSendString>
	}
	return result;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08007aac 	.word	0x08007aac
 8000e18:	08007ab4 	.word	0x08007ab4
 8000e1c:	08007abc 	.word	0x08007abc
 8000e20:	08007ac4 	.word	0x08007ac4
 8000e24:	08007aa8 	.word	0x08007aa8

08000e28 <ConsoleCommandFlashRW>:
static eCommandResult_T ConsoleCommandFlashRW(const char buffer[])
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b090      	sub	sp, #64	; 0x40
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	#define FLASH_FREE_LOCATION 0x08020000
	//read first to make sure we are good
	uint64_t *RDAddr = (uint64_t *) FLASH_FREE_LOCATION;
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <ConsoleCommandFlashRW+0xf8>)
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t RData = *RDAddr;
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint32_t Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8000e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 8000e42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	000a      	movs	r2, r1
 8000e50:	2300      	movs	r3, #0
 8000e52:	4613      	mov	r3, r2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is ");
 8000e56:	4833      	ldr	r0, [pc, #204]	; (8000f24 <ConsoleCommandFlashRW+0xfc>)
 8000e58:	f000 f916 	bl	8001088 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea2 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe9e 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	482e      	ldr	r0, [pc, #184]	; (8000f28 <ConsoleCommandFlashRW+0x100>)
 8000e6e:	f000 f90b 	bl	8001088 <ConsoleIoSendString>

 	HAL_StatusTypeDef HAL_FLASH_Unlock();

 	// Erase
 	//Instantiate the FLASH_EraseInitTypeDef struct needed for the HAL_FLASHEx_Erase() function
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  //Erase type set to sectors
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
	FLASH_EraseInitStruct.Sector = 5;            				//sector 0x0800 C000
 8000e86:	2305      	movs	r3, #5
 8000e88:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbSectors = 1;                        //The number of sectors
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	623b      	str	r3, [r7, #32]

	uint32_t  errorStatus = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 8000e96:	f107 020c 	add.w	r2, r7, #12
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 f96d 	bl	8003180 <HAL_FLASHEx_Erase>
	HAL_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f001 fe0e 	bl	8002ac8 <HAL_Delay>

 	uint8_t FData = 0x22;
 8000eac:	2322      	movs	r3, #34	; 0x22
 8000eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	// FLASH->CR &= (FLASH_CR_PG);
	HAL_StatusTypeDef HAL_FLASH_Unlock();
 	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,0x08020000, FData);
 8000eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	461c      	mov	r4, r3
 8000eba:	4615      	mov	r5, r2
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	4917      	ldr	r1, [pc, #92]	; (8000f20 <ConsoleCommandFlashRW+0xf8>)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f001 ffc8 	bl	8002e58 <HAL_FLASH_Program>
 	HAL_Delay(10);
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f001 fdfd 	bl	8002ac8 <HAL_Delay>
 	HAL_StatusTypeDef HAL_FLASH_Lock();

 	RData = *RDAddr;
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
	Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 8000edc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	000a      	movs	r2, r1
 8000eea:	2300      	movs	r3, #0
 8000eec:	4613      	mov	r3, r2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is now ");
 8000ef0:	480e      	ldr	r0, [pc, #56]	; (8000f2c <ConsoleCommandFlashRW+0x104>)
 8000ef2:	f000 f8c9 	bl	8001088 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe55 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe51 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8000f06:	4808      	ldr	r0, [pc, #32]	; (8000f28 <ConsoleCommandFlashRW+0x100>)
 8000f08:	f000 f8be 	bl	8001088 <ConsoleIoSendString>
 	eCommandResult_T result = COMMAND_SUCCESS;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	return result;
 8000f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3740      	adds	r7, #64	; 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08020000 	.word	0x08020000
 8000f24:	08007ac8 	.word	0x08007ac8
 8000f28:	08007aa8 	.word	0x08007aa8
 8000f2c:	08007ad4 	.word	0x08007ad4

08000f30 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fce5 	bl	8000910 <ConsoleReceiveParamInt16>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d116      	bne.n	8000f7e <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <ConsoleCommandParamExampleInt16+0x58>)
 8000f52:	f000 f899 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000f56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe0d 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <ConsoleCommandParamExampleInt16+0x5c>)
 8000f62:	f000 f891 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000f66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fd76 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <ConsoleCommandParamExampleInt16+0x60>)
 8000f74:	f000 f888 	bl	8001088 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <ConsoleCommandParamExampleInt16+0x64>)
 8000f7a:	f000 f885 	bl	8001088 <ConsoleIoSendString>
	}
	return result;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08007ae4 	.word	0x08007ae4
 8000f8c:	08007af4 	.word	0x08007af4
 8000f90:	08007afc 	.word	0x08007afc
 8000f94:	08007aa8 	.word	0x08007aa8

08000f98 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fd0f 	bl	80009cc <ConsoleReceiveParamHexUint16>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d109      	bne.n	8000fcc <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000fba:	f000 f865 	bl	8001088 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd4c 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <ConsoleCommandParamExampleHexUint16+0x44>)
 8000fc8:	f000 f85e 	bl	8001088 <ConsoleIoSendString>
	}
	return result;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	08007b00 	.word	0x08007b00
 8000fdc:	08007aa8 	.word	0x08007aa8

08000fe0 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <ConsoleCommandVer+0x24>)
 8000fee:	f000 f84b 	bl	8001088 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <ConsoleCommandVer+0x28>)
 8000ff4:	f000 f848 	bl	8001088 <ConsoleIoSendString>
	return result;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08007b10 	.word	0x08007b10
 8001008:	08007aa8 	.word	0x08007aa8

0800100c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <ConsoleCommandsGetTable+0x10>)
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	08007b30 	.word	0x08007b30

08001020 <ConsoleIoInit>:

#include "consoleIo.h"
#include <stdio.h>

eConsoleError ConsoleIoInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]

	// ------- modified ----------
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	82fb      	strh	r3, [r7, #22]
 8001040:	e010      	b.n	8001064 <ConsoleIoReceive+0x34>
		if(uart_buf.buf[i] == 0) break;
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <ConsoleIoReceive+0x54>)
 8001046:	4413      	add	r3, r2
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00e      	beq.n	800106c <ConsoleIoReceive+0x3c>
		buffer[i] = (uint8_t)uart_buf.buf[i];
 800104e:	8afa      	ldrh	r2, [r7, #22]
 8001050:	8afb      	ldrh	r3, [r7, #22]
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	440b      	add	r3, r1
 8001056:	490b      	ldr	r1, [pc, #44]	; (8001084 <ConsoleIoReceive+0x54>)
 8001058:	440a      	add	r2, r1
 800105a:	7892      	ldrb	r2, [r2, #2]
 800105c:	701a      	strb	r2, [r3, #0]
	for(i=0; i<BUF_SIZE; i++) {
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	3301      	adds	r3, #1
 8001062:	82fb      	strh	r3, [r7, #22]
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	2b7f      	cmp	r3, #127	; 0x7f
 8001068:	d9eb      	bls.n	8001042 <ConsoleIoReceive+0x12>
 800106a:	e000      	b.n	800106e <ConsoleIoReceive+0x3e>
		if(uart_buf.buf[i] == 0) break;
 800106c:	bf00      	nop
	}
	// -----------------

	*readLength = i;
 800106e:	8afa      	ldrh	r2, [r7, #22]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
	//		i++;
	//	}
	//	*readLength = i;
	// ---

	return CONSOLE_SUCCESS;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200002e8 	.word	0x200002e8

08001088 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

	// --------- modified ---------

	// count the size (sizeof didn't work for me, so manually counting)
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8001090:	2300      	movs	r3, #0
 8001092:	81fb      	strh	r3, [r7, #14]
 8001094:	e008      	b.n	80010a8 <ConsoleIoSendString+0x20>
		if(buffer[i] == '\0') break;
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <ConsoleIoSendString+0x28>
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	81fb      	strh	r3, [r7, #14]
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	2b7f      	cmp	r3, #127	; 0x7f
 80010ac:	d9f3      	bls.n	8001096 <ConsoleIoSendString+0xe>
 80010ae:	e000      	b.n	80010b2 <ConsoleIoSendString+0x2a>
		if(buffer[i] == '\0') break;
 80010b0:	bf00      	nop
	}

	// send it
	uint16_t the_size = i;
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buffer, the_size, HAL_MAX_DELAY); // TODO: resolve this warning
 80010b6:	89ba      	ldrh	r2, [r7, #12]
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <ConsoleIoSendString+0x48>)
 80010c0:	f004 ff40 	bl	8005f44 <HAL_UART_Transmit>
	// ---------------------------

	return CONSOLE_SUCCESS;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003e0 	.word	0x200003e0

080010d4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <MX_GPIO_Init+0x1dc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2108      	movs	r1, #8
 8001196:	4847      	ldr	r0, [pc, #284]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 8001198:	f002 fb7c 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 80011a2:	f002 fb77 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011a6:	2200      	movs	r2, #0
 80011a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011ac:	4843      	ldr	r0, [pc, #268]	; (80012bc <MX_GPIO_Init+0x1e8>)
 80011ae:	f002 fb71 	bl	8003894 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80011b2:	2304      	movs	r3, #4
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	483b      	ldr	r0, [pc, #236]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 80011c6:	f002 f8fd 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011ca:	2308      	movs	r3, #8
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4834      	ldr	r0, [pc, #208]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 80011e2:	f002 f8ef 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80011e6:	2332      	movs	r3, #50	; 0x32
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	482e      	ldr	r0, [pc, #184]	; (80012b4 <MX_GPIO_Init+0x1e0>)
 80011fc:	f002 f8e2 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4828      	ldr	r0, [pc, #160]	; (80012b8 <MX_GPIO_Init+0x1e4>)
 8001218:	f002 f8d4 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001220:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4823      	ldr	r0, [pc, #140]	; (80012c0 <MX_GPIO_Init+0x1ec>)
 8001232:	f002 f8c7 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001236:	f24f 0310 	movw	r3, #61456	; 0xf010
 800123a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_GPIO_Init+0x1e8>)
 8001250:	f002 f8b8 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4815      	ldr	r0, [pc, #84]	; (80012c0 <MX_GPIO_Init+0x1ec>)
 800126a:	f002 f8ab 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800126e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001280:	230a      	movs	r3, #10
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_GPIO_Init+0x1ec>)
 800128c:	f002 f89a 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_GPIO_Init+0x1e8>)
 80012a4:	f002 f88e 	bl	80033c4 <HAL_GPIO_Init>

}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	; 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40020000 	.word	0x40020000

080012c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f002 fae1 	bl	80038c8 <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 fb42 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000200 	.word	0x20000200
 8001318:	40005400 	.word	0x40005400
 800131c:	000186a0 	.word	0x000186a0

08001320 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_I2C_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12c      	bne.n	800139c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800135e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <HAL_I2C_MspInit+0x8c>)
 800137c:	f002 f822 	bl	80033c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400

080013b0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_I2C_MspDeInit+0x38>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10e      	bne.n	80013e0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_I2C_MspDeInit+0x3c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_I2C_MspDeInit+0x3c>)
 80013c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	4807      	ldr	r0, [pc, #28]	; (80013f0 <HAL_I2C_MspDeInit+0x40>)
 80013d2:	f002 f97b 	bl	80036cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_I2C_MspDeInit+0x40>)
 80013dc:	f002 f976 	bl	80036cc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2S2_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2S2_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2S2_Init+0x50>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2S2_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_I2S2_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2S2_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2S2_Init+0x50>)
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <MX_I2S2_Init+0x58>)
 800141c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2S2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2S2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2S2_Init+0x50>)
 800142c:	2201      	movs	r2, #1
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2S2_Init+0x50>)
 8001432:	f003 fa47 	bl	80048c4 <HAL_I2S_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 faaa 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000254 	.word	0x20000254
 8001448:	40003800 	.word	0x40003800
 800144c:	00017700 	.word	0x00017700

08001450 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <MX_I2S3_Init+0x58>)
 8001458:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2S3_Init+0x54>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2S3_Init+0x54>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <MX_I2S3_Init+0x5c>)
 800147a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2S3_Init+0x54>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2S3_Init+0x54>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_I2S3_Init+0x54>)
 8001490:	f003 fa18 	bl	80048c4 <HAL_I2S_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800149a:	f000 fa7b 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000029c 	.word	0x2000029c
 80014a8:	40003c00 	.word	0x40003c00
 80014ac:	00017700 	.word	0x00017700

080014b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a59      	ldr	r2, [pc, #356]	; (8001634 <HAL_I2S_MspInit+0x184>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d15b      	bne.n	800158a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
 80014d6:	4b58      	ldr	r3, [pc, #352]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a57      	ldr	r2, [pc, #348]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b55      	ldr	r3, [pc, #340]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a50      	ldr	r2, [pc, #320]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <HAL_I2S_MspInit+0x188>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_I2S_MspInit+0x188>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_I2S_MspInit+0x188>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_I2S_MspInit+0x188>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001526:	2304      	movs	r3, #4
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001536:	2306      	movs	r3, #6
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	483e      	ldr	r0, [pc, #248]	; (800163c <HAL_I2S_MspInit+0x18c>)
 8001542:	f001 ff3f 	bl	80033c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001546:	2308      	movs	r3, #8
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001556:	2305      	movs	r3, #5
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4836      	ldr	r0, [pc, #216]	; (800163c <HAL_I2S_MspInit+0x18c>)
 8001562:	f001 ff2f 	bl	80033c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001578:	2305      	movs	r3, #5
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <HAL_I2S_MspInit+0x190>)
 8001584:	f001 ff1e 	bl	80033c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001588:	e04f      	b.n	800162a <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <HAL_I2S_MspInit+0x194>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d14a      	bne.n	800162a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_I2S_MspInit+0x188>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_I2S_MspInit+0x188>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_I2S_MspInit+0x188>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015e8:	2310      	movs	r3, #16
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f8:	2306      	movs	r3, #6
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <HAL_I2S_MspInit+0x198>)
 8001604:	f001 fede 	bl	80033c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001608:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161a:	2306      	movs	r3, #6
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_I2S_MspInit+0x18c>)
 8001626:	f001 fecd 	bl	80033c4 <HAL_GPIO_Init>
}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	; 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40003800 	.word	0x40003800
 8001638:	40023800 	.word	0x40023800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020400 	.word	0x40020400
 8001644:	40003c00 	.word	0x40003c00
 8001648:	40020000 	.word	0x40020000

0800164c <input_buf_reset>:
// https://github.com/dekuNukem/STM32_tutorials/tree/master/lesson3_serial_recv_interrupt

#include "input_buf.h"
#include <string.h> // memset is declared here

void input_buf_reset(input_buf *ib) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <input_buf_reset+0x24>
	ib->curr_index = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]
	memset(ib->buf, 0, BUF_SIZE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3302      	adds	r3, #2
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fcc3 	bl	8006ff4 <memset>
 800166e:	e000      	b.n	8001672 <input_buf_reset+0x26>
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001670:	bf00      	nop
}
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <input_buf_add>:

void input_buf_add(input_buf *ib, uint8_t c) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
	if(NULL == ib) return;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d01a      	beq.n	80016c0 <input_buf_add+0x48>
	ib->buf[ib->curr_index] = c;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	709a      	strb	r2, [r3, #2]
	if(ib->curr_index < BUF_SIZE-1) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	2b7e      	cmp	r3, #126	; 0x7e
 80016a2:	dc09      	bgt.n	80016b8 <input_buf_add+0x40>
		ib->curr_index = ib->curr_index+1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e004      	b.n	80016c2 <input_buf_add+0x4a>
	} else {
		input_buf_reset(ib);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffc7 	bl	800164c <input_buf_reset>
 80016be:	e000      	b.n	80016c2 <input_buf_add+0x4a>
	if(NULL == ib) return;
 80016c0:	bf00      	nop
	}
}
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <input_buf_ready>:

uint8_t input_buf_ready(input_buf *ib) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <input_buf_ready+0x12>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e014      	b.n	8001704 <input_buf_ready+0x3c>
	if(ib->buf[ib->curr_index-1] == '\n' || ib->buf[ib->curr_index-1] == '\r') {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	2b0a      	cmp	r3, #10
 80016ea:	d008      	beq.n	80016fe <input_buf_ready+0x36>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	2b0d      	cmp	r3, #13
 80016fc:	d101      	bne.n	8001702 <input_buf_ready+0x3a>
		return 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <input_buf_ready+0x3c>
	}
	return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// uart interrupt callback
// huart2 defined in usart.c, generated from cubemx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	c = uart_byte_buf[0];
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_UART_RxCpltCallback+0x34>)
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_UART_RxCpltCallback+0x38>)
 800171e:	701a      	strb	r2, [r3, #0]
	echo = true;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_UART_RxCpltCallback+0x3c>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
	input_buf_add(&uart_buf, uart_byte_buf[0]);
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_UART_RxCpltCallback+0x34>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_UART_RxCpltCallback+0x40>)
 800172e:	f7ff ffa3 	bl	8001678 <input_buf_add>
	HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <HAL_UART_RxCpltCallback+0x34>)
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <HAL_UART_RxCpltCallback+0x44>)
 8001738:	f004 fc96 	bl	8006068 <HAL_UART_Receive_IT>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002e4 	.word	0x200002e4
 8001748:	2000036a 	.word	0x2000036a
 800174c:	2000036b 	.word	0x2000036b
 8001750:	200002e8 	.word	0x200002e8
 8001754:	200003e0 	.word	0x200003e0

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175e:	f001 f941 	bl	80029e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001762:	f000 f88f 	bl	8001884 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001766:	f000 f8f5 	bl	8001954 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_ACCELERO_Init();
 800176a:	f000 ffe7 	bl	800273c <BSP_ACCELERO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f7ff fcb1 	bl	80010d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001772:	f7ff fda7 	bl	80012c4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001776:	f7ff fe3d 	bl	80013f4 <MX_I2S2_Init>
  MX_I2S3_Init();
 800177a:	f7ff fe69 	bl	8001450 <MX_I2S3_Init>
  MX_SPI1_Init();
 800177e:	f000 f90f 	bl	80019a0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001782:	f000 fa2f 	bl	8001be4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 8001786:	f7fe ffa7 	bl	80006d8 <ConsoleInit>
  input_buf_reset(&uart_buf);
 800178a:	4832      	ldr	r0, [pc, #200]	; (8001854 <main+0xfc>)
 800178c:	f7ff ff5e 	bl	800164c <input_buf_reset>
  HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	4931      	ldr	r1, [pc, #196]	; (8001858 <main+0x100>)
 8001794:	4831      	ldr	r0, [pc, #196]	; (800185c <main+0x104>)
 8001796:	f004 fc67 	bl	8006068 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (op_mode == mode_cli)
 800179a:	e044      	b.n	8001826 <main+0xce>
  {

  	if(echo) {
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x108>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d010      	beq.n	80017c6 <main+0x6e>
		sprintf((char*)buf, "%c", c);
 80017a4:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <main+0x10c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <main+0x110>)
 80017ac:	482f      	ldr	r0, [pc, #188]	; (800186c <main+0x114>)
 80017ae:	f005 fc29 	bl	8007004 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b6:	2201      	movs	r2, #1
 80017b8:	492c      	ldr	r1, [pc, #176]	; (800186c <main+0x114>)
 80017ba:	4828      	ldr	r0, [pc, #160]	; (800185c <main+0x104>)
 80017bc:	f004 fbc2 	bl	8005f44 <HAL_UART_Transmit>
  		echo = false;
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <main+0x108>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  	}

  	if(input_buf_ready(&uart_buf)) {
 80017c6:	4823      	ldr	r0, [pc, #140]	; (8001854 <main+0xfc>)
 80017c8:	f7ff ff7e 	bl	80016c8 <input_buf_ready>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d022      	beq.n	8001818 <main+0xc0>
  		// remove the c in sprintf((char*)buf, "\r\n", c);
  		sprintf((char*)buf, "\r\n", c);
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <main+0x10c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4925      	ldr	r1, [pc, #148]	; (8001870 <main+0x118>)
 80017da:	4824      	ldr	r0, [pc, #144]	; (800186c <main+0x114>)
 80017dc:	f005 fc12 	bl	8007004 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY);
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e4:	2202      	movs	r2, #2
 80017e6:	4921      	ldr	r1, [pc, #132]	; (800186c <main+0x114>)
 80017e8:	481c      	ldr	r0, [pc, #112]	; (800185c <main+0x104>)
 80017ea:	f004 fbab 	bl	8005f44 <HAL_UART_Transmit>
			ConsoleProcess();
 80017ee:	f7fe ffa1 	bl	8000734 <ConsoleProcess>
			input_buf_reset(&uart_buf);
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <main+0xfc>)
 80017f4:	f7ff ff2a 	bl	800164c <input_buf_reset>
			// unsure why console.c doesn't clear, so let's clear it here
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 80017f8:	2300      	movs	r3, #0
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	e006      	b.n	800180c <main+0xb4>
				mReceiveBuffer[i] = 0;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <main+0x11c>)
 8001802:	2100      	movs	r1, #0
 8001804:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	3301      	adds	r3, #1
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d9f5      	bls.n	80017fe <main+0xa6>
			}
			mReceivedSoFar = 0;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <main+0x120>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
		}
  	if(button_pressed != 0)
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <main+0x124>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <main+0xce>
  	{
  		op_mode = mode_local;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <main+0x128>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
  while (op_mode == mode_cli)
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <main+0x128>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0b6      	beq.n	800179c <main+0x44>
    /* USER CODE BEGIN 3 */
  }
  // infinite loop
  while(1)
  {
	  switch(op_mode)
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <main+0x128>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d8fb      	bhi.n	800182e <main+0xd6>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <main+0xe4>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800182f 	.word	0x0800182f
 8001844:	0800182f 	.word	0x0800182f
 8001848:	0800182f 	.word	0x0800182f
	  {
	  case mode_cli:
		  Error_Handler();
 800184c:	f000 f8a2 	bl	8001994 <Error_Handler>
		  break;
 8001850:	bf00      	nop
	  switch(op_mode)
 8001852:	e7ec      	b.n	800182e <main+0xd6>
 8001854:	200002e8 	.word	0x200002e8
 8001858:	200002e4 	.word	0x200002e4
 800185c:	200003e0 	.word	0x200003e0
 8001860:	2000036b 	.word	0x2000036b
 8001864:	2000036a 	.word	0x2000036a
 8001868:	08007b28 	.word	0x08007b28
 800186c:	2000036c 	.word	0x2000036c
 8001870:	08007b2c 	.word	0x08007b2c
 8001874:	200000f8 	.word	0x200000f8
 8001878:	200001f8 	.word	0x200001f8
 800187c:	20000381 	.word	0x20000381
 8001880:	20000380 	.word	0x20000380

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fbae 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <SystemClock_Config+0xc8>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a26      	ldr	r2, [pc, #152]	; (800194c <SystemClock_Config+0xc8>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SystemClock_Config+0xc8>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <SystemClock_Config+0xcc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <SystemClock_Config+0xcc>)
 80018ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <SystemClock_Config+0xcc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e0:	2301      	movs	r3, #1
 80018e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ea:	2302      	movs	r3, #2
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018fc:	2304      	movs	r3, #4
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001900:	2308      	movs	r3, #8
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fc5d 	bl	80051c8 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001914:	f000 f83e 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	2103      	movs	r1, #3
 8001934:	4618      	mov	r0, r3
 8001936:	f003 febf 	bl	80056b8 <HAL_RCC_ClockConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001940:	f000 f828 	bl	8001994 <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	3750      	adds	r7, #80	; 0x50
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800196a:	2301      	movs	r3, #1
 800196c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800196e:	23c8      	movs	r3, #200	; 0xc8
 8001970:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001972:	2305      	movs	r3, #5
 8001974:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001976:	2302      	movs	r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	4618      	mov	r0, r3
 800197e:	f004 f8bb 	bl	8005af8 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001988:	f000 f804 	bl	8001994 <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <Error_Handler+0x8>
	...

080019a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI1_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019f2:	f004 f9d1 	bl	8005d98 <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019fc:	f7ff ffca 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000384 	.word	0x20000384
 8001a08:	40013000 	.word	0x40013000

08001a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_SPI_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a66:	23e0      	movs	r3, #224	; 0xe0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x8c>)
 8001a82:	f001 fc9f 	bl	80033c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ada:	2007      	movs	r0, #7
 8001adc:	f001 f8e8 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 ffa6 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART2_IRQHandler+0x10>)
 8001b46:	f004 fabf 	bl	80060c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200003e0 	.word	0x200003e0

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f005 fa0c 	bl	8006fa0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20020000 	.word	0x20020000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	200003dc 	.word	0x200003dc
 8001bbc:	200004b8 	.word	0x200004b8

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_USART2_UART_Init+0x50>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	f004 f945 	bl	8005eaa <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c26:	f7ff feb5 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200003e0 	.word	0x200003e0
 8001c34:	40004400 	.word	0x40004400

08001c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_UART_MspInit+0x94>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d133      	bne.n	8001cc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <HAL_UART_MspInit+0x9c>)
 8001cae:	f001 fb89 	bl	80033c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2026      	movs	r0, #38	; 0x26
 8001cb8:	f001 f805 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cbc:	2026      	movs	r0, #38	; 0x26
 8001cbe:	f001 f81e 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cde:	490e      	ldr	r1, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf4:	4c0b      	ldr	r4, [pc, #44]	; (8001d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d02:	f7ff ff5d 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d06:	f005 f951 	bl	8006fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0a:	f7ff fd25 	bl	8001758 <main>
  bx  lr    
 8001d0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001d1c:	08007f14 	.word	0x08007f14
  ldr r2, =_sbss
 8001d20:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001d24:	200004b4 	.word	0x200004b4

08001d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC_IRQHandler>

08001d2a <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001d38:	f000 fc82 	bl	8002640 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	461a      	mov	r2, r3
 8001d44:	2120      	movs	r1, #32
 8001d46:	2032      	movs	r0, #50	; 0x32
 8001d48:	f000 fcd2 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	461a      	mov	r2, r3
 8001d54:	2123      	movs	r1, #35	; 0x23
 8001d56:	2032      	movs	r0, #50	; 0x32
 8001d58:	f000 fcca 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001d7c:	f000 fc60 	bl	8002640 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001d80:	210f      	movs	r1, #15
 8001d82:	2032      	movs	r0, #50	; 0x32
 8001d84:	f000 fcc7 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001d9c:	2124      	movs	r1, #36	; 0x24
 8001d9e:	2032      	movs	r0, #50	; 0x32
 8001da0:	f000 fcb9 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dae:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	461a      	mov	r2, r3
 8001db4:	2124      	movs	r1, #36	; 0x24
 8001db6:	2032      	movs	r0, #50	; 0x32
 8001db8:	f000 fc9a 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001dce:	2121      	movs	r1, #33	; 0x21
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f000 fca0 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2121      	movs	r1, #33	; 0x21
 8001df0:	2032      	movs	r0, #50	; 0x32
 8001df2:	f000 fc7d 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001e08:	2121      	movs	r1, #33	; 0x21
 8001e0a:	2032      	movs	r0, #50	; 0x32
 8001e0c:	f000 fc83 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	f023 0308 	bic.w	r3, r3, #8
 8001e1a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	461a      	mov	r2, r3
 8001e28:	2121      	movs	r1, #33	; 0x21
 8001e2a:	2032      	movs	r0, #50	; 0x32
 8001e2c:	f000 fc60 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001e40:	2300      	movs	r3, #0
 8001e42:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001e4c:	2123      	movs	r1, #35	; 0x23
 8001e4e:	2032      	movs	r0, #50	; 0x32
 8001e50:	f000 fc61 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001e58:	2124      	movs	r1, #36	; 0x24
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f000 fc5b 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001e64:	2128      	movs	r1, #40	; 0x28
 8001e66:	2032      	movs	r0, #50	; 0x32
 8001e68:	f000 fc55 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001e72:	2129      	movs	r1, #41	; 0x29
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	f000 fc4e 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001e80:	212a      	movs	r1, #42	; 0x2a
 8001e82:	2032      	movs	r0, #50	; 0x32
 8001e84:	f000 fc47 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001e8e:	212b      	movs	r1, #43	; 0x2b
 8001e90:	2032      	movs	r0, #50	; 0x32
 8001e92:	f000 fc40 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	2032      	movs	r0, #50	; 0x32
 8001ea0:	f000 fc39 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001eaa:	212d      	movs	r1, #45	; 0x2d
 8001eac:	2032      	movs	r0, #50	; 0x32
 8001eae:	f000 fc32 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001eb8:	7d3b      	ldrb	r3, [r7, #20]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d123      	bne.n	8001f0a <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
 8001ec6:	e01c      	b.n	8001f02 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	3301      	adds	r3, #1
 8001ece:	3320      	adds	r3, #32
 8001ed0:	443b      	add	r3, r7
 8001ed2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	b212      	sxth	r2, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	3320      	adds	r3, #32
 8001ef6:	443b      	add	r3, r7
 8001ef8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	3301      	adds	r3, #1
 8001f00:	77fb      	strb	r3, [r7, #31]
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d9df      	bls.n	8001ec8 <LSM303AGR_AccReadXYZ+0x90>
 8001f08:	e022      	b.n	8001f50 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	77fb      	strb	r3, [r7, #31]
 8001f0e:	e01c      	b.n	8001f4a <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	3320      	adds	r3, #32
 8001f16:	443b      	add	r3, r7
 8001f18:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3301      	adds	r3, #1
 8001f28:	3320      	adds	r3, #32
 8001f2a:	443b      	add	r3, r7
 8001f2c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	b212      	sxth	r2, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	443b      	add	r3, r7
 8001f40:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001f44:	7ffb      	ldrb	r3, [r7, #31]
 8001f46:	3301      	adds	r3, #1
 8001f48:	77fb      	strb	r3, [r7, #31]
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d9df      	bls.n	8001f10 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f56:	2b30      	cmp	r3, #48	; 0x30
 8001f58:	d013      	beq.n	8001f82 <LSM303AGR_AccReadXYZ+0x14a>
 8001f5a:	2b30      	cmp	r3, #48	; 0x30
 8001f5c:	dc14      	bgt.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d00c      	beq.n	8001f7c <LSM303AGR_AccReadXYZ+0x144>
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	dc10      	bgt.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <LSM303AGR_AccReadXYZ+0x138>
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d003      	beq.n	8001f76 <LSM303AGR_AccReadXYZ+0x13e>
 8001f6e:	e00b      	b.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001f70:	2301      	movs	r3, #1
 8001f72:	77bb      	strb	r3, [r7, #30]
    break;
 8001f74:	e008      	b.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001f76:	2302      	movs	r3, #2
 8001f78:	77bb      	strb	r3, [r7, #30]
    break;
 8001f7a:	e005      	b.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	77bb      	strb	r3, [r7, #30]
    break;
 8001f80:	e002      	b.n	8001f88 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001f82:	230c      	movs	r3, #12
 8001f84:	77bb      	strb	r3, [r7, #30]
    break;
 8001f86:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
 8001f8c:	e014      	b.n	8001fb8 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	3320      	adds	r3, #32
 8001f94:	443b      	add	r3, r7
 8001f96:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	7fbb      	ldrb	r3, [r7, #30]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	fb12 f303 	smulbb	r3, r2, r3
 8001fa4:	b299      	uxth	r1, r3
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	b20a      	sxth	r2, r1
 8001fb0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d9e7      	bls.n	8001f8e <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001fd6:	2121      	movs	r1, #33	; 0x21
 8001fd8:	2032      	movs	r0, #50	; 0x32
 8001fda:	f000 fb9c 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2121      	movs	r1, #33	; 0x21
 8001ff8:	2032      	movs	r0, #50	; 0x32
 8001ffa:	f000 fb79 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8002014:	2122      	movs	r1, #34	; 0x22
 8002016:	2032      	movs	r0, #50	; 0x32
 8002018:	f000 fb7d 	bl	8002716 <COMPASSACCELERO_IO_Read>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4313      	orrs	r3, r2
 8002026:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	461a      	mov	r2, r3
 800202c:	2122      	movs	r1, #34	; 0x22
 800202e:	2032      	movs	r0, #50	; 0x32
 8002030:	f000 fb5e 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800204a:	2138      	movs	r1, #56	; 0x38
 800204c:	2032      	movs	r0, #50	; 0x32
 800204e:	f000 fb62 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4313      	orrs	r3, r2
 800205c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	461a      	mov	r2, r3
 8002062:	2138      	movs	r1, #56	; 0x38
 8002064:	2032      	movs	r0, #50	; 0x32
 8002066:	f000 fb43 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800206a:	230a      	movs	r3, #10
 800206c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	461a      	mov	r2, r3
 8002072:	213a      	movs	r1, #58	; 0x3a
 8002074:	2032      	movs	r0, #50	; 0x32
 8002076:	f000 fb3b 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800207a:	2305      	movs	r3, #5
 800207c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	461a      	mov	r2, r3
 8002082:	213b      	movs	r1, #59	; 0x3b
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	f000 fb33 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	461a      	mov	r2, r3
 800208e:	213c      	movs	r1, #60	; 0x3c
 8002090:	2032      	movs	r0, #50	; 0x32
 8002092:	f000 fb2d 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002096:	2332      	movs	r3, #50	; 0x32
 8002098:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	461a      	mov	r2, r3
 800209e:	213d      	movs	r1, #61	; 0x3d
 80020a0:	2032      	movs	r0, #50	; 0x32
 80020a2:	f000 fb25 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80020b2:	f000 faed 	bl	8002690 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80020b6:	2080      	movs	r0, #128	; 0x80
 80020b8:	f7ff ffa5 	bl	8002006 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80020bc:	2004      	movs	r0, #4
 80020be:	f7ff ff83 	bl	8001fc8 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80020c2:	2010      	movs	r0, #16
 80020c4:	f7ff ffba 	bl	800203c <LSM303AGR_AccClickITEnable>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80020da:	f000 fab1 	bl	8002640 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	461a      	mov	r2, r3
 80020e6:	2120      	movs	r1, #32
 80020e8:	2032      	movs	r0, #50	; 0x32
 80020ea:	f000 fb01 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	461a      	mov	r2, r3
 80020f6:	2123      	movs	r1, #35	; 0x23
 80020f8:	2032      	movs	r0, #50	; 0x32
 80020fa:	f000 faf9 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800211e:	f000 fa8f 	bl	8002640 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8002122:	210f      	movs	r1, #15
 8002124:	2032      	movs	r0, #50	; 0x32
 8002126:	f000 faf6 	bl	8002716 <COMPASSACCELERO_IO_Read>
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800212e:	79fb      	ldrb	r3, [r7, #7]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800213e:	2124      	movs	r1, #36	; 0x24
 8002140:	2032      	movs	r0, #50	; 0x32
 8002142:	f000 fae8 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002150:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	461a      	mov	r2, r3
 8002156:	2124      	movs	r1, #36	; 0x24
 8002158:	2032      	movs	r0, #50	; 0x32
 800215a:	f000 fac9 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002170:	2121      	movs	r1, #33	; 0x21
 8002172:	2032      	movs	r0, #50	; 0x32
 8002174:	f000 facf 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4313      	orrs	r3, r2
 800218a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	461a      	mov	r2, r3
 8002190:	2121      	movs	r1, #33	; 0x21
 8002192:	2032      	movs	r0, #50	; 0x32
 8002194:	f000 faac 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80021aa:	2121      	movs	r1, #33	; 0x21
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f000 fab2 	bl	8002716 <COMPASSACCELERO_IO_Read>
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	f023 0308 	bic.w	r3, r3, #8
 80021bc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	461a      	mov	r2, r3
 80021ca:	2121      	movs	r1, #33	; 0x21
 80021cc:	2032      	movs	r0, #50	; 0x32
 80021ce:	f000 fa8f 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b088      	sub	sp, #32
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80021e2:	2300      	movs	r3, #0
 80021e4:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80021ea:	2301      	movs	r3, #1
 80021ec:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80021ee:	2123      	movs	r1, #35	; 0x23
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f000 fa90 	bl	8002716 <COMPASSACCELERO_IO_Read>
 80021f6:	4603      	mov	r3, r0
 80021f8:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80021fa:	2124      	movs	r1, #36	; 0x24
 80021fc:	2032      	movs	r0, #50	; 0x32
 80021fe:	f000 fa8a 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002202:	4603      	mov	r3, r0
 8002204:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8002206:	2128      	movs	r1, #40	; 0x28
 8002208:	2032      	movs	r0, #50	; 0x32
 800220a:	f000 fa84 	bl	8002716 <COMPASSACCELERO_IO_Read>
 800220e:	4603      	mov	r3, r0
 8002210:	b25b      	sxtb	r3, r3
 8002212:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8002214:	2129      	movs	r1, #41	; 0x29
 8002216:	2032      	movs	r0, #50	; 0x32
 8002218:	f000 fa7d 	bl	8002716 <COMPASSACCELERO_IO_Read>
 800221c:	4603      	mov	r3, r0
 800221e:	b25b      	sxtb	r3, r3
 8002220:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8002222:	212a      	movs	r1, #42	; 0x2a
 8002224:	2032      	movs	r0, #50	; 0x32
 8002226:	f000 fa76 	bl	8002716 <COMPASSACCELERO_IO_Read>
 800222a:	4603      	mov	r3, r0
 800222c:	b25b      	sxtb	r3, r3
 800222e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8002230:	212b      	movs	r1, #43	; 0x2b
 8002232:	2032      	movs	r0, #50	; 0x32
 8002234:	f000 fa6f 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002238:	4603      	mov	r3, r0
 800223a:	b25b      	sxtb	r3, r3
 800223c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	2032      	movs	r0, #50	; 0x32
 8002242:	f000 fa68 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002246:	4603      	mov	r3, r0
 8002248:	b25b      	sxtb	r3, r3
 800224a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800224c:	212d      	movs	r1, #45	; 0x2d
 800224e:	2032      	movs	r0, #50	; 0x32
 8002250:	f000 fa61 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	b25b      	sxtb	r3, r3
 8002258:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800225a:	7d3b      	ldrb	r3, [r7, #20]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d123      	bne.n	80022ac <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e01c      	b.n	80022a4 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	3301      	adds	r3, #1
 8002270:	3320      	adds	r3, #32
 8002272:	443b      	add	r3, r7
 8002274:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002278:	b29b      	uxth	r3, r3
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b29a      	uxth	r2, r3
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	3320      	adds	r3, #32
 8002284:	443b      	add	r3, r7
 8002286:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b29a      	uxth	r2, r3
 8002290:	7ffb      	ldrb	r3, [r7, #31]
 8002292:	b212      	sxth	r2, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	3320      	adds	r3, #32
 8002298:	443b      	add	r3, r7
 800229a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	3301      	adds	r3, #1
 80022a2:	77fb      	strb	r3, [r7, #31]
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d9df      	bls.n	800226a <LSM303DLHC_AccReadXYZ+0x90>
 80022aa:	e022      	b.n	80022f2 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
 80022b0:	e01c      	b.n	80022ec <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	3320      	adds	r3, #32
 80022b8:	443b      	add	r3, r7
 80022ba:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	3301      	adds	r3, #1
 80022ca:	3320      	adds	r3, #32
 80022cc:	443b      	add	r3, r7
 80022ce:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	b212      	sxth	r2, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	3320      	adds	r3, #32
 80022e0:	443b      	add	r3, r7
 80022e2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	3301      	adds	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
 80022ec:	7ffb      	ldrb	r3, [r7, #31]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d9df      	bls.n	80022b2 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80022f2:	7d3b      	ldrb	r3, [r7, #20]
 80022f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022f8:	2b30      	cmp	r3, #48	; 0x30
 80022fa:	d013      	beq.n	8002324 <LSM303DLHC_AccReadXYZ+0x14a>
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	dc14      	bgt.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d00c      	beq.n	800231e <LSM303DLHC_AccReadXYZ+0x144>
 8002304:	2b20      	cmp	r3, #32
 8002306:	dc10      	bgt.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <LSM303DLHC_AccReadXYZ+0x138>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d003      	beq.n	8002318 <LSM303DLHC_AccReadXYZ+0x13e>
 8002310:	e00b      	b.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8002312:	2301      	movs	r3, #1
 8002314:	77bb      	strb	r3, [r7, #30]
    break;
 8002316:	e008      	b.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8002318:	2302      	movs	r3, #2
 800231a:	77bb      	strb	r3, [r7, #30]
    break;
 800231c:	e005      	b.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800231e:	2304      	movs	r3, #4
 8002320:	77bb      	strb	r3, [r7, #30]
    break;
 8002322:	e002      	b.n	800232a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8002324:	230c      	movs	r3, #12
 8002326:	77bb      	strb	r3, [r7, #30]
    break;
 8002328:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	77fb      	strb	r3, [r7, #31]
 800232e:	e014      	b.n	800235a <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	3320      	adds	r3, #32
 8002336:	443b      	add	r3, r7
 8002338:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800233c:	b29a      	uxth	r2, r3
 800233e:	7fbb      	ldrb	r3, [r7, #30]
 8002340:	b29b      	uxth	r3, r3
 8002342:	fb12 f303 	smulbb	r3, r2, r3
 8002346:	b299      	uxth	r1, r3
 8002348:	7ffb      	ldrb	r3, [r7, #31]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	b20a      	sxth	r2, r1
 8002352:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002354:	7ffb      	ldrb	r3, [r7, #31]
 8002356:	3301      	adds	r3, #1
 8002358:	77fb      	strb	r3, [r7, #31]
 800235a:	7ffb      	ldrb	r3, [r7, #31]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d9e7      	bls.n	8002330 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002378:	2121      	movs	r1, #33	; 0x21
 800237a:	2032      	movs	r0, #50	; 0x32
 800237c:	f000 f9cb 	bl	8002716 <COMPASSACCELERO_IO_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4313      	orrs	r3, r2
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	461a      	mov	r2, r3
 8002398:	2121      	movs	r1, #33	; 0x21
 800239a:	2032      	movs	r0, #50	; 0x32
 800239c:	f000 f9a8 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80023b6:	2122      	movs	r1, #34	; 0x22
 80023b8:	2032      	movs	r0, #50	; 0x32
 80023ba:	f000 f9ac 	bl	8002716 <COMPASSACCELERO_IO_Read>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2122      	movs	r1, #34	; 0x22
 80023d0:	2032      	movs	r0, #50	; 0x32
 80023d2:	f000 f98d 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80023ec:	2138      	movs	r1, #56	; 0x38
 80023ee:	2032      	movs	r0, #50	; 0x32
 80023f0:	f000 f991 	bl	8002716 <COMPASSACCELERO_IO_Read>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	461a      	mov	r2, r3
 8002404:	2138      	movs	r1, #56	; 0x38
 8002406:	2032      	movs	r0, #50	; 0x32
 8002408:	f000 f972 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800240c:	230a      	movs	r3, #10
 800240e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	461a      	mov	r2, r3
 8002414:	213a      	movs	r1, #58	; 0x3a
 8002416:	2032      	movs	r0, #50	; 0x32
 8002418:	f000 f96a 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800241c:	2305      	movs	r3, #5
 800241e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	461a      	mov	r2, r3
 8002424:	213b      	movs	r1, #59	; 0x3b
 8002426:	2032      	movs	r0, #50	; 0x32
 8002428:	f000 f962 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	461a      	mov	r2, r3
 8002430:	213c      	movs	r1, #60	; 0x3c
 8002432:	2032      	movs	r0, #50	; 0x32
 8002434:	f000 f95c 	bl	80026f0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002438:	2332      	movs	r3, #50	; 0x32
 800243a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	461a      	mov	r2, r3
 8002440:	213d      	movs	r1, #61	; 0x3d
 8002442:	2032      	movs	r0, #50	; 0x32
 8002444:	f000 f954 	bl	80026f0 <COMPASSACCELERO_IO_Write>
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002454:	f000 f91c 	bl	8002690 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8002458:	2080      	movs	r0, #128	; 0x80
 800245a:	f7ff ffa5 	bl	80023a8 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800245e:	2004      	movs	r0, #4
 8002460:	f7ff ff83 	bl	800236a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8002464:	2010      	movs	r0, #16
 8002466:	f7ff ffba 	bl	80023de <LSM303DLHC_AccClickITEnable>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002474:	4814      	ldr	r0, [pc, #80]	; (80024c8 <I2Cx_Init+0x58>)
 8002476:	f001 febb 	bl	80041f0 <HAL_I2C_GetState>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d121      	bne.n	80024c4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <I2Cx_Init+0x58>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <I2Cx_Init+0x5c>)
 8002484:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <I2Cx_Init+0x58>)
 8002488:	2243      	movs	r2, #67	; 0x43
 800248a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <I2Cx_Init+0x58>)
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <I2Cx_Init+0x60>)
 8002490:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <I2Cx_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <I2Cx_Init+0x58>)
 800249a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <I2Cx_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <I2Cx_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <I2Cx_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <I2Cx_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <I2Cx_Init+0x58>)
 80024ba:	f000 f86b 	bl	8002594 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80024be:	4802      	ldr	r0, [pc, #8]	; (80024c8 <I2Cx_Init+0x58>)
 80024c0:	f001 fa02 	bl	80038c8 <HAL_I2C_Init>
  }
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000424 	.word	0x20000424
 80024cc:	40005400 	.word	0x40005400
 80024d0:	000186a0 	.word	0x000186a0

080024d4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af04      	add	r7, sp, #16
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	460b      	mov	r3, r1
 80024e0:	717b      	strb	r3, [r7, #5]
 80024e2:	4613      	mov	r3, r2
 80024e4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <I2Cx_WriteData+0x48>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	88f9      	ldrh	r1, [r7, #6]
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	2301      	movs	r3, #1
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <I2Cx_WriteData+0x4c>)
 8002502:	f001 fb55 	bl	8003bb0 <HAL_I2C_Mem_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002510:	f000 f834 	bl	800257c <I2Cx_Error>
  }
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000006c 	.word	0x2000006c
 8002520:	20000424 	.word	0x20000424

08002524 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af04      	add	r7, sp, #16
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	80fb      	strh	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800253c:	797b      	ldrb	r3, [r7, #5]
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <I2Cx_ReadData+0x50>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	88f9      	ldrh	r1, [r7, #6]
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	2301      	movs	r3, #1
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	f107 030e 	add.w	r3, r7, #14
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	4808      	ldr	r0, [pc, #32]	; (8002578 <I2Cx_ReadData+0x54>)
 8002556:	f001 fc25 	bl	8003da4 <HAL_I2C_Mem_Read>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002564:	f000 f80a 	bl	800257c <I2Cx_Error>
  }
  return value;
 8002568:	7bbb      	ldrb	r3, [r7, #14]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000006c 	.word	0x2000006c
 8002578:	20000424 	.word	0x20000424

0800257c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <I2Cx_Error+0x14>)
 8002582:	f001 fae5 	bl	8003b50 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8002586:	f7ff ff73 	bl	8002470 <I2Cx_Init>
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000424 	.word	0x20000424

08002594 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80025d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80025da:	2312      	movs	r3, #18
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80025e2:	2302      	movs	r3, #2
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80025e6:	2304      	movs	r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4812      	ldr	r0, [pc, #72]	; (800263c <I2Cx_MspInit+0xa8>)
 80025f2:	f000 fee7 	bl	80033c4 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <I2Cx_MspInit+0xa4>)
 80025fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002600:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <I2Cx_MspInit+0xa4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <I2Cx_MspInit+0xa4>)
 8002608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800260c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	210f      	movs	r1, #15
 8002612:	201f      	movs	r0, #31
 8002614:	f000 fb57 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002618:	201f      	movs	r0, #31
 800261a:	f000 fb70 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	210f      	movs	r1, #15
 8002622:	2020      	movs	r0, #32
 8002624:	f000 fb4f 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8002628:	2020      	movs	r0, #32
 800262a:	f000 fb68 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40020400 	.word	0x40020400

08002640 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <COMPASSACCELERO_IO_Init+0x48>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <COMPASSACCELERO_IO_Init+0x48>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <COMPASSACCELERO_IO_Init+0x48>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002662:	2304      	movs	r3, #4
 8002664:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800266e:	2302      	movs	r3, #2
 8002670:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <COMPASSACCELERO_IO_Init+0x4c>)
 8002678:	f000 fea4 	bl	80033c4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800267c:	f7ff fef8 	bl	8002470 <I2Cx_Init>
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	40021000 	.word	0x40021000

08002690 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80026b2:	2330      	movs	r3, #48	; 0x30
 80026b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80026b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026bc:	2302      	movs	r3, #2
 80026be:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4808      	ldr	r0, [pc, #32]	; (80026ec <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80026ca:	f000 fe7b 	bl	80033c4 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80026ce:	2200      	movs	r2, #0
 80026d0:	210f      	movs	r1, #15
 80026d2:	200a      	movs	r0, #10
 80026d4:	f000 faf7 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80026d8:	200a      	movs	r0, #10
 80026da:	f000 fb10 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40021000 	.word	0x40021000

080026f0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
 80026fa:	460b      	mov	r3, r1
 80026fc:	717b      	strb	r3, [r7, #5]
 80026fe:	4613      	mov	r3, r2
 8002700:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002702:	793a      	ldrb	r2, [r7, #4]
 8002704:	7979      	ldrb	r1, [r7, #5]
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fee3 	bl	80024d4 <I2Cx_WriteData>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	460a      	mov	r2, r1
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	4613      	mov	r3, r2
 8002724:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002726:	797a      	ldrb	r2, [r7, #5]
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fef9 	bl	8002524 <I2Cx_ReadData>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002746:	2300      	movs	r3, #0
 8002748:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <BSP_ACCELERO_Init+0x178>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4798      	blx	r3
 8002758:	4603      	mov	r3, r0
 800275a:	2b33      	cmp	r3, #51	; 0x33
 800275c:	d14f      	bne.n	80027fe <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800275e:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <BSP_ACCELERO_Init+0x178>)
 8002762:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002764:	2300      	movs	r3, #0
 8002766:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002768:	2340      	movs	r3, #64	; 0x40
 800276a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 800276c:	2307      	movs	r3, #7
 800276e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002770:	2300      	movs	r3, #0
 8002772:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002774:	2300      	movs	r3, #0
 8002776:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002778:	2300      	movs	r3, #0
 800277a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 800277c:	2308      	movs	r3, #8
 800277e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002780:	7b3a      	ldrb	r2, [r7, #12]
 8002782:	7b7b      	ldrb	r3, [r7, #13]
 8002784:	4313      	orrs	r3, r2
 8002786:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002788:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800278a:	4313      	orrs	r3, r2
 800278c:	b2db      	uxtb	r3, r3
 800278e:	b29a      	uxth	r2, r3
 8002790:	8abb      	ldrh	r3, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002796:	7c3a      	ldrb	r2, [r7, #16]
 8002798:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800279a:	4313      	orrs	r3, r2
 800279c:	b2da      	uxtb	r2, r3
 800279e:	7cbb      	ldrb	r3, [r7, #18]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	8aba      	ldrh	r2, [r7, #20]
 80027c0:	4610      	mov	r0, r2
 80027c2:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80027c8:	2310      	movs	r3, #16
 80027ca:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80027d4:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80027d6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80027d8:	4313      	orrs	r3, r2
 80027da:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80027dc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80027de:	4313      	orrs	r3, r2
 80027e0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	8aba      	ldrh	r2, [r7, #20]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4610      	mov	r0, r2
 80027f6:	4798      	blx	r3

    ret = ACCELERO_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
 80027fc:	e054      	b.n	80028a8 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <BSP_ACCELERO_Init+0x180>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4798      	blx	r3
 8002804:	4603      	mov	r3, r0
 8002806:	2b33      	cmp	r3, #51	; 0x33
 8002808:	d14e      	bne.n	80028a8 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <BSP_ACCELERO_Init+0x180>)
 800280e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8002810:	2300      	movs	r3, #0
 8002812:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002814:	2340      	movs	r3, #64	; 0x40
 8002816:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002818:	2307      	movs	r3, #7
 800281a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 800281c:	2300      	movs	r3, #0
 800281e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8002820:	2300      	movs	r3, #0
 8002822:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002824:	2300      	movs	r3, #0
 8002826:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002828:	2308      	movs	r3, #8
 800282a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800282c:	7b3a      	ldrb	r2, [r7, #12]
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	4313      	orrs	r3, r2
 8002832:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002834:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002836:	4313      	orrs	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	b29a      	uxth	r2, r3
 800283c:	8abb      	ldrh	r3, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002842:	7c3a      	ldrb	r2, [r7, #16]
 8002844:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002846:	4313      	orrs	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	7cbb      	ldrb	r3, [r7, #18]
 800284c:	4313      	orrs	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	4313      	orrs	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002858:	b21a      	sxth	r2, r3
 800285a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	b21b      	sxth	r3, r3
 8002862:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	8aba      	ldrh	r2, [r7, #20]
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002874:	2310      	movs	r3, #16
 8002876:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002880:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002882:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002884:	4313      	orrs	r3, r2
 8002886:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002888:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800288a:	4313      	orrs	r3, r2
 800288c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800288e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002890:	4313      	orrs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <BSP_ACCELERO_Init+0x17c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	8aba      	ldrh	r2, [r7, #20]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4610      	mov	r0, r2
 80028a2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000038 	.word	0x20000038
 80028b8:	20000478 	.word	0x20000478
 80028bc:	20000004 	.word	0x20000004

080028c0 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <BSP_ACCELERO_GetXYZ+0x50>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <BSP_ACCELERO_GetXYZ+0x50>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <BSP_ACCELERO_GetXYZ+0x50>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <BSP_ACCELERO_GetXYZ+0x54>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	425b      	negs	r3, r3
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3302      	adds	r3, #2
 8002904:	b212      	sxth	r2, r2
 8002906:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000478 	.word	0x20000478
 8002914:	20000038 	.word	0x20000038

08002918 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_I2S_TxCpltCallback+0x20>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 800292a:	f000 f807 	bl	800293c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40003c00 	.word	0x40003c00

0800293c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002960:	f000 f804 	bl	800296c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_I2S_ErrorCallback+0x2c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800299a:	f7ff ffd6 	bl	800294a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <HAL_I2S_ErrorCallback+0x30>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 80029a8:	f7ff ffe7 	bl	800297a <BSP_AUDIO_IN_Error_Callback>
  }
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40003c00 	.word	0x40003c00
 80029b8:	40003800 	.word	0x40003800

080029bc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <BSP_GYRO_GetXYZ+0x24>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <BSP_GYRO_GetXYZ+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000047c 	.word	0x2000047c

080029e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_Init+0x40>)
 80029ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_Init+0x40>)
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_Init+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_Init+0x40>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 f94f 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f808 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a18:	f7ff f840 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f967 	bl	8002d1a <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a64:	f000 f92f 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000074 	.word	0x20000074
 8002a84:	20000070 	.word	0x20000070

08002a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000074 	.word	0x20000074
 8002aac:	20000480 	.word	0x20000480

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000480 	.word	0x20000480

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_Delay+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aee:	bf00      	nop
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000074 	.word	0x20000074

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff feb6 	bl	8002ab0 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d008      	beq.n	8002d64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e052      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0216 	bic.w	r2, r2, #22
 8002d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HAL_DMA_Abort+0x62>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	e013      	b.n	8002dde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db6:	f7ff fe7b 	bl	8002ab0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d90c      	bls.n	8002dde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e015      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e4      	bne.n	8002db6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	223f      	movs	r2, #63	; 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e00c      	b.n	8002e4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2205      	movs	r2, #5
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_FLASH_Program+0xa0>)
 8002e6c:	7e1b      	ldrb	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_FLASH_Program+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e03b      	b.n	8002eee <HAL_FLASH_Program+0x96>
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_FLASH_Program+0xa0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e80:	f000 f83e 	bl	8002f00 <FLASH_WaitForLastOperation>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d12b      	bne.n	8002ee6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002e94:	783b      	ldrb	r3, [r7, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	68b8      	ldr	r0, [r7, #8]
 8002e9a:	f000 f8e9 	bl	8003070 <FLASH_Program_Byte>
 8002e9e:	e016      	b.n	8002ece <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002ea6:	883b      	ldrh	r3, [r7, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f000 f8bc 	bl	8003028 <FLASH_Program_HalfWord>
 8002eb0:	e00d      	b.n	8002ece <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d105      	bne.n	8002ec4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	68b8      	ldr	r0, [r7, #8]
 8002ebe:	f000 f891 	bl	8002fe4 <FLASH_Program_Word>
 8002ec2:	e004      	b.n	8002ece <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f000 f859 	bl	8002f80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ece:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed2:	f000 f815 	bl	8002f00 <FLASH_WaitForLastOperation>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_FLASH_Program+0xa4>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_FLASH_Program+0xa4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_FLASH_Program+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000484 	.word	0x20000484
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <FLASH_WaitForLastOperation+0x78>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f12:	f7ff fdcd 	bl	8002ab0 <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002f18:	e010      	b.n	8002f3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d00c      	beq.n	8002f3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <FLASH_WaitForLastOperation+0x38>
 8002f28:	f7ff fdc2 	bl	8002ab0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d201      	bcs.n	8002f3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e019      	b.n	8002f70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <FLASH_WaitForLastOperation+0x7c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <FLASH_WaitForLastOperation+0x7c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <FLASH_WaitForLastOperation+0x7c>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <FLASH_WaitForLastOperation+0x7c>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f66:	f000 f8a5 	bl	80030b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
  
}  
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000484 	.word	0x20000484
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002f9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002fa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <FLASH_Program_DoubleWord+0x60>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002fb6:	f3bf 8f6f 	isb	sy
}
 8002fba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	000a      	movs	r2, r1
 8002fca:	2300      	movs	r3, #0
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	3104      	adds	r1, #4
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <FLASH_Program_Word+0x40>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <FLASH_Program_Word+0x40>)
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <FLASH_Program_Word+0x40>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <FLASH_Program_Word+0x40>)
 8003000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <FLASH_Program_Word+0x40>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	4a06      	ldr	r2, [pc, #24]	; (8003024 <FLASH_Program_Word+0x40>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40023c00 	.word	0x40023c00

08003028 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <FLASH_Program_HalfWord+0x44>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <FLASH_Program_HalfWord+0x44>)
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <FLASH_Program_HalfWord+0x44>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4a09      	ldr	r2, [pc, #36]	; (800306c <FLASH_Program_HalfWord+0x44>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <FLASH_Program_HalfWord+0x44>)
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <FLASH_Program_HalfWord+0x44>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	801a      	strh	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00

08003070 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <FLASH_Program_Byte+0x40>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <FLASH_Program_Byte+0x40>)
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <FLASH_Program_Byte+0x40>)
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <FLASH_Program_Byte+0x40>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <FLASH_Program_Byte+0x40>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <FLASH_Program_Byte+0x40>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	701a      	strb	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <FLASH_SetErrorCode+0xc8>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	4a2b      	ldr	r2, [pc, #172]	; (800317c <FLASH_SetErrorCode+0xc8>)
 80030ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 80030d2:	2210      	movs	r2, #16
 80030d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <FLASH_SetErrorCode+0xc8>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	4a24      	ldr	r2, [pc, #144]	; (800317c <FLASH_SetErrorCode+0xc8>)
 80030ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 80030f0:	2220      	movs	r2, #32
 80030f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <FLASH_SetErrorCode+0xc8>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <FLASH_SetErrorCode+0xc8>)
 800310a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 800310e:	2240      	movs	r2, #64	; 0x40
 8003110:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <FLASH_SetErrorCode+0xc8>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <FLASH_SetErrorCode+0xc8>)
 8003128:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <FLASH_SetErrorCode+0xc8>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <FLASH_SetErrorCode+0xc8>)
 8003146:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 800314a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <FLASH_SetErrorCode+0xc8>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f043 0320 	orr.w	r3, r3, #32
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <FLASH_SetErrorCode+0xc8>)
 8003166:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <FLASH_SetErrorCode+0xc4>)
 800316a:	2202      	movs	r2, #2
 800316c:	60da      	str	r2, [r3, #12]
  }
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40023c00 	.word	0x40023c00
 800317c:	20000484 	.word	0x20000484

08003180 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_FLASHEx_Erase+0xd8>)
 8003194:	7e1b      	ldrb	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_FLASHEx_Erase+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e058      	b.n	8003250 <HAL_FLASHEx_Erase+0xd0>
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_FLASHEx_Erase+0xd8>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031a8:	f7ff feaa 	bl	8002f00 <FLASH_WaitForLastOperation>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d148      	bne.n	8003248 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f844 	bl	8003260 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031dc:	f7ff fe90 	bl	8002f00 <FLASH_WaitForLastOperation>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_FLASHEx_Erase+0xdc>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_FLASHEx_Erase+0xdc>)
 80031ea:	f023 0304 	bic.w	r3, r3, #4
 80031ee:	6113      	str	r3, [r2, #16]
 80031f0:	e028      	b.n	8003244 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	e01c      	b.n	8003234 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	68b8      	ldr	r0, [r7, #8]
 8003204:	f000 f850 	bl	80032a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800320c:	f7ff fe78 	bl	8002f00 <FLASH_WaitForLastOperation>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_FLASHEx_Erase+0xdc>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_FLASHEx_Erase+0xdc>)
 800321a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800321e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	601a      	str	r2, [r3, #0]
          break;
 800322c:	e00a      	b.n	8003244 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4413      	add	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3da      	bcc.n	80031fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003244:	f000 f878 	bl	8003338 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_FLASHEx_Erase+0xd8>)
 800324a:	2200      	movs	r2, #0
 800324c:	761a      	strb	r2, [r3, #24]

  return status;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000484 	.word	0x20000484
 800325c:	40023c00 	.word	0x40023c00

08003260 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <FLASH_MassErase+0x44>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <FLASH_MassErase+0x44>)
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <FLASH_MassErase+0x44>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <FLASH_MassErase+0x44>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <FLASH_MassErase+0x44>)
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	4313      	orrs	r3, r2
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <FLASH_MassErase+0x44>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6113      	str	r3, [r2, #16]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00

080032a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e010      	b.n	80032e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d103      	bne.n	80032d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80032ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e009      	b.n	80032e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d103      	bne.n	80032e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80032d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e002      	b.n	80032e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80032e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	490f      	ldr	r1, [pc, #60]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 8003304:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003308:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4313      	orrs	r3, r2
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <FLASH_Erase_Sector+0x8c>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6113      	str	r3, [r2, #16]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40023c00 	.word	0x40023c00

08003338 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800333c:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800334e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003352:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800335a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800336a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003376:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800338a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <FLASH_FlushCaches+0x88>)
 8003396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <FLASH_FlushCaches+0x88>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <FLASH_FlushCaches+0x88>)
 80033a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <FLASH_FlushCaches+0x88>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <FLASH_FlushCaches+0x88>)
 80033ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b2:	6013      	str	r3, [r2, #0]
  }
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e159      	b.n	8003694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 8148 	bne.w	800368e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d005      	beq.n	8003416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	2b02      	cmp	r3, #2
 8003414:	d130      	bne.n	8003478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0201 	and.w	r2, r3, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b03      	cmp	r3, #3
 8003482:	d017      	beq.n	80034b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d123      	bne.n	8003508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	08da      	lsrs	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3208      	adds	r2, #8
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a2 	beq.w	800368e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b57      	ldr	r3, [pc, #348]	; (80036ac <HAL_GPIO_Init+0x2e8>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_GPIO_Init+0x2e8>)
 8003554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003558:	6453      	str	r3, [r2, #68]	; 0x44
 800355a:	4b54      	ldr	r3, [pc, #336]	; (80036ac <HAL_GPIO_Init+0x2e8>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003566:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_GPIO_Init+0x2ec>)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	3302      	adds	r3, #2
 800356e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a49      	ldr	r2, [pc, #292]	; (80036b4 <HAL_GPIO_Init+0x2f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x202>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a48      	ldr	r2, [pc, #288]	; (80036b8 <HAL_GPIO_Init+0x2f4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x1fe>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a47      	ldr	r2, [pc, #284]	; (80036bc <HAL_GPIO_Init+0x2f8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x1fa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a46      	ldr	r2, [pc, #280]	; (80036c0 <HAL_GPIO_Init+0x2fc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x1f6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a45      	ldr	r2, [pc, #276]	; (80036c4 <HAL_GPIO_Init+0x300>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x1f2>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_GPIO_Init+0x2ec>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_GPIO_Init+0x304>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <HAL_GPIO_Init+0x304>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_GPIO_Init+0x304>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_GPIO_Init+0x304>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_GPIO_Init+0x304>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_GPIO_Init+0x304>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_GPIO_Init+0x304>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_GPIO_Init+0x304>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f aea2 	bls.w	80033e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e0bb      	b.n	8003860 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e8:	2201      	movs	r2, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	f040 80ab 	bne.w	800385a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003704:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_GPIO_DeInit+0x1ac>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003710:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	220f      	movs	r2, #15
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a54      	ldr	r2, [pc, #336]	; (800387c <HAL_GPIO_DeInit+0x1b0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d019      	beq.n	8003762 <HAL_GPIO_DeInit+0x96>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a53      	ldr	r2, [pc, #332]	; (8003880 <HAL_GPIO_DeInit+0x1b4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_GPIO_DeInit+0x92>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a52      	ldr	r2, [pc, #328]	; (8003884 <HAL_GPIO_DeInit+0x1b8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00d      	beq.n	800375a <HAL_GPIO_DeInit+0x8e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a51      	ldr	r2, [pc, #324]	; (8003888 <HAL_GPIO_DeInit+0x1bc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_DeInit+0x8a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_GPIO_DeInit+0x1c0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_GPIO_DeInit+0x86>
 800374e:	2304      	movs	r3, #4
 8003750:	e008      	b.n	8003764 <HAL_GPIO_DeInit+0x98>
 8003752:	2307      	movs	r3, #7
 8003754:	e006      	b.n	8003764 <HAL_GPIO_DeInit+0x98>
 8003756:	2303      	movs	r3, #3
 8003758:	e004      	b.n	8003764 <HAL_GPIO_DeInit+0x98>
 800375a:	2302      	movs	r3, #2
 800375c:	e002      	b.n	8003764 <HAL_GPIO_DeInit+0x98>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_GPIO_DeInit+0x98>
 8003762:	2300      	movs	r3, #0
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	f002 0203 	and.w	r2, r2, #3
 800376a:	0092      	lsls	r2, r2, #2
 800376c:	4093      	lsls	r3, r2
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d132      	bne.n	80037da <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43db      	mvns	r3, r3
 800377c:	4944      	ldr	r1, [pc, #272]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 800377e:	4013      	ands	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43db      	mvns	r3, r3
 800378a:	4941      	ldr	r1, [pc, #260]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 800378c:	4013      	ands	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	493d      	ldr	r1, [pc, #244]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 800379a:	4013      	ands	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800379e:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	493a      	ldr	r1, [pc, #232]	; (8003890 <HAL_GPIO_DeInit+0x1c4>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037bc:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <HAL_GPIO_DeInit+0x1ac>)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3302      	adds	r3, #2
 80037c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	482a      	ldr	r0, [pc, #168]	; (8003878 <HAL_GPIO_DeInit+0x1ac>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	400a      	ands	r2, r1
 80037d4:	3302      	adds	r3, #2
 80037d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2103      	movs	r1, #3
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	08d2      	lsrs	r2, r2, #3
 8003810:	4019      	ands	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2103      	movs	r1, #3
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	401a      	ands	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	2101      	movs	r1, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2103      	movs	r1, #3
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	401a      	ands	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	f67f af40 	bls.w	80036e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40013800 	.word	0x40013800
 800387c:	40020000 	.word	0x40020000
 8003880:	40020400 	.word	0x40020400
 8003884:	40020800 	.word	0x40020800
 8003888:	40020c00 	.word	0x40020c00
 800388c:	40021000 	.word	0x40021000
 8003890:	40013c00 	.word	0x40013c00

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b0:	e003      	b.n	80038ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e12b      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fd16 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800392c:	f002 f8bc 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a81      	ldr	r2, [pc, #516]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d807      	bhi.n	800394c <HAL_I2C_Init+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a80      	ldr	r2, [pc, #512]	; (8003b40 <HAL_I2C_Init+0x278>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e006      	b.n	800395a <HAL_I2C_Init+0x92>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_I2C_Init+0x27c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0e7      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a78      	ldr	r2, [pc, #480]	; (8003b48 <HAL_I2C_Init+0x280>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d802      	bhi.n	800399c <HAL_I2C_Init+0xd4>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3301      	adds	r3, #1
 800399a:	e009      	b.n	80039b0 <HAL_I2C_Init+0xe8>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <HAL_I2C_Init+0x284>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	3301      	adds	r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	495c      	ldr	r1, [pc, #368]	; (8003b3c <HAL_I2C_Init+0x274>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d819      	bhi.n	8003a04 <HAL_I2C_Init+0x13c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e59      	subs	r1, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fbb1 f3f3 	udiv	r3, r1, r3
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e4:	400b      	ands	r3, r1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_I2C_Init+0x138>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e59      	subs	r1, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	e051      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e04f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_I2C_Init+0x168>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_I2C_Init+0x18e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e58      	subs	r0, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Init+0x196>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e022      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_I2C_Init+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e58      	subs	r0, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6809      	ldr	r1, [r1, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6911      	ldr	r1, [r2, #16]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	000186a0 	.word	0x000186a0
 8003b40:	001e847f 	.word	0x001e847f
 8003b44:	003d08ff 	.word	0x003d08ff
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e021      	b.n	8003ba6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fc18 	bl	80013b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	813b      	strh	r3, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7fe ff71 	bl	8002ab0 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 80d9 	bne.w	8003d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	496d      	ldr	r1, [pc, #436]	; (8003d9c <HAL_I2C_Mem_Write+0x1ec>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fc8d 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0cc      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Mem_Write+0x56>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0c5      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d007      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2221      	movs	r2, #33	; 0x21
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a4d      	ldr	r2, [pc, #308]	; (8003da0 <HAL_I2C_Mem_Write+0x1f0>)
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6e:	88f8      	ldrh	r0, [r7, #6]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	8979      	ldrh	r1, [r7, #10]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fac4 	bl	800420c <I2C_RequestMemoryWrite>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d052      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e081      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fd0e 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06b      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d11b      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x180>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1aa      	bne.n	8003c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fcfa 	bl	8004736 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e016      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	00100002 	.word	0x00100002
 8003da0:	ffff0000 	.word	0xffff0000

08003da4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dbe:	f7fe fe77 	bl	8002ab0 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	f040 8208 	bne.w	80041e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2319      	movs	r3, #25
 8003dd8:	2201      	movs	r2, #1
 8003dda:	497b      	ldr	r1, [pc, #492]	; (8003fc8 <HAL_I2C_Mem_Read+0x224>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fb93 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	e1fb      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x56>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e1f4      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d007      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2222      	movs	r2, #34	; 0x22
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_I2C_Mem_Read+0x228>)
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e62:	88f8      	ldrh	r0, [r7, #6]
 8003e64:	893a      	ldrh	r2, [r7, #8]
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4603      	mov	r3, r0
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa60 	bl	8004338 <I2C_RequestMemoryRead>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1b0      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e184      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e164      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d11b      	bne.n	8003f32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	e144      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f48:	e138      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	f200 80f1 	bhi.w	8004136 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d123      	bne.n	8003fa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fc29 	bl	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e139      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa2:	e10b      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d14e      	bne.n	800404a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4906      	ldr	r1, [pc, #24]	; (8003fd0 <HAL_I2C_Mem_Read+0x22c>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 faa6 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e10e      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
 8003fc6:	bf00      	nop
 8003fc8:	00100002 	.word	0x00100002
 8003fcc:	ffff0000 	.word	0xffff0000
 8003fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004048:	e0b8      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2200      	movs	r2, #0
 8004052:	4966      	ldr	r1, [pc, #408]	; (80041ec <HAL_I2C_Mem_Read+0x448>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa57 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0bf      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2200      	movs	r2, #0
 80040ae:	494f      	ldr	r1, [pc, #316]	; (80041ec <HAL_I2C_Mem_Read+0x448>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fa29 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e091      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004134:	e042      	b.n	80041bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fb3c 	bl	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e04c      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b04      	cmp	r3, #4
 8004188:	d118      	bne.n	80041bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f aec2 	bne.w	8003f4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010004 	.word	0x00010004

080041f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	817b      	strh	r3, [r7, #10]
 800421e:	460b      	mov	r3, r1
 8004220:	813b      	strh	r3, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2200      	movs	r2, #0
 800423e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f960 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425c:	d103      	bne.n	8004266 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e05f      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	492d      	ldr	r1, [pc, #180]	; (8004334 <I2C_RequestMemoryWrite+0x128>)
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f998 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04c      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	6a39      	ldr	r1, [r7, #32]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fa02 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d107      	bne.n	80042ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02b      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	e021      	b.n	8004328 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	6a39      	ldr	r1, [r7, #32]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f9dc 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e005      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2200      	movs	r2, #0
 800437a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8c2 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d103      	bne.n	80043a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0aa      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	4952      	ldr	r1, [pc, #328]	; (8004504 <I2C_RequestMemoryRead+0x1cc>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f8fa 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e097      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f964 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e076      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e021      	b.n	8004464 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f93e 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e050      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	893b      	ldrh	r3, [r7, #8]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	6a39      	ldr	r1, [r7, #32]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f923 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	2b04      	cmp	r3, #4
 800447a:	d107      	bne.n	800448c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e035      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f82b 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c6:	d103      	bne.n	80044d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e013      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	6a3a      	ldr	r2, [r7, #32]
 80044e8:	4906      	ldr	r1, [pc, #24]	; (8004504 <I2C_RequestMemoryRead+0x1cc>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f863 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00010002 	.word	0x00010002

08004508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004518:	e025      	b.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004520:	d021      	beq.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fe fac5 	bl	8002ab0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d116      	bne.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e023      	b.n	80045ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10d      	bne.n	800458c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	e00c      	b.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d0b6      	beq.n	800451a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c4:	e051      	b.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d123      	bne.n	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e046      	b.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004624:	d021      	beq.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe fa43 	bl	8002ab0 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d116      	bne.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e020      	b.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10c      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e00b      	b.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d18d      	bne.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c0:	e02d      	b.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f8ce 	bl	8004864 <I2C_IsAcknowledgeFailed>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e02d      	b.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d8:	d021      	beq.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fe f9e9 	bl	8002ab0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e007      	b.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d1ca      	bne.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004742:	e02d      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f88d 	bl	8004864 <I2C_IsAcknowledgeFailed>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e02d      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475a:	d021      	beq.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475c:	f7fe f9a8 	bl	8002ab0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	429a      	cmp	r2, r3
 800476a:	d302      	bcc.n	8004772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d116      	bne.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d1ca      	bne.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c4:	e042      	b.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d119      	bne.n	8004808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0210 	mvn.w	r2, #16
 80047dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e029      	b.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004808:	f7fe f952 	bl	8002ab0 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d116      	bne.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d1b5      	bne.n	80047c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d11b      	bne.n	80048b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f043 0204 	orr.w	r2, r3, #4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e128      	b.n	8004b28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a90      	ldr	r2, [pc, #576]	; (8004b30 <HAL_I2S_Init+0x26c>)
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fc fddd 	bl	80014b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d060      	beq.n	80049e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800492a:	2310      	movs	r3, #16
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e001      	b.n	8004934 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b20      	cmp	r3, #32
 800493a:	d802      	bhi.n	8004942 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004942:	2001      	movs	r0, #1
 8004944:	f001 f9c8 	bl	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004948:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004952:	d125      	bne.n	80049a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d010      	beq.n	800497e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	fbb2 f2f3 	udiv	r2, r2, r3
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	461a      	mov	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	3305      	adds	r3, #5
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e01f      	b.n	80049be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	fbb2 f2f3 	udiv	r2, r2, r3
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	3305      	adds	r3, #5
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e00e      	b.n	80049be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	3305      	adds	r3, #5
 80049bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4a5c      	ldr	r2, [pc, #368]	; (8004b34 <HAL_I2S_Init+0x270>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e003      	b.n	80049ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80049e4:	2302      	movs	r3, #2
 80049e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d902      	bls.n	80049f8 <HAL_I2S_Init+0x134>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	2bff      	cmp	r3, #255	; 0xff
 80049f6:	d907      	bls.n	8004a08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f043 0210 	orr.w	r2, r3, #16
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e08f      	b.n	8004b28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	ea42 0103 	orr.w	r1, r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6851      	ldr	r1, [r2, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68d2      	ldr	r2, [r2, #12]
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6992      	ldr	r2, [r2, #24]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d161      	bne.n	8004b18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a38      	ldr	r2, [pc, #224]	; (8004b38 <HAL_I2S_Init+0x274>)
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <HAL_I2S_Init+0x278>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_I2S_Init+0x1a4>
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_I2S_Init+0x27c>)
 8004a66:	e001      	b.n	8004a6c <HAL_I2S_Init+0x1a8>
 8004a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	4932      	ldr	r1, [pc, #200]	; (8004b3c <HAL_I2S_Init+0x278>)
 8004a74:	428a      	cmp	r2, r1
 8004a76:	d101      	bne.n	8004a7c <HAL_I2S_Init+0x1b8>
 8004a78:	4a31      	ldr	r2, [pc, #196]	; (8004b40 <HAL_I2S_Init+0x27c>)
 8004a7a:	e001      	b.n	8004a80 <HAL_I2S_Init+0x1bc>
 8004a7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a84:	f023 030f 	bic.w	r3, r3, #15
 8004a88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <HAL_I2S_Init+0x278>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_I2S_Init+0x1d4>
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_I2S_Init+0x27c>)
 8004a96:	e001      	b.n	8004a9c <HAL_I2S_Init+0x1d8>
 8004a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_I2S_Init+0x278>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_I2S_Init+0x1ea>
 8004aaa:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_I2S_Init+0x27c>)
 8004aac:	e001      	b.n	8004ab2 <HAL_I2S_Init+0x1ee>
 8004aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abe:	d003      	beq.n	8004ac8 <HAL_I2S_Init+0x204>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e001      	b.n	8004ad4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <HAL_I2S_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_I2S_Init+0x24c>
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <HAL_I2S_Init+0x27c>)
 8004b0e:	e001      	b.n	8004b14 <HAL_I2S_Init+0x250>
 8004b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b14:	897a      	ldrh	r2, [r7, #10]
 8004b16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	08004bff 	.word	0x08004bff
 8004b34:	cccccccd 	.word	0xcccccccd
 8004b38:	08004d15 	.word	0x08004d15
 8004b3c:	40003800 	.word	0x40003800
 8004b40:	40003400 	.word	0x40003400

08004b44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10e      	bne.n	8004b98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd fec0 	bl	8002918 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004be6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fd feb1 	bl	8002958 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d13a      	bne.n	8004c90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d109      	bne.n	8004c38 <I2S_IRQHandler+0x3a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d102      	bne.n	8004c38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ffb4 	bl	8004ba0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d126      	bne.n	8004c90 <I2S_IRQHandler+0x92>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d11f      	bne.n	8004c90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd fe7c 	bl	8002988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d136      	bne.n	8004d0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d109      	bne.n	8004cba <I2S_IRQHandler+0xbc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d102      	bne.n	8004cba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff45 	bl	8004b44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d122      	bne.n	8004d0a <I2S_IRQHandler+0x10c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d11b      	bne.n	8004d0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fd fe3f 	bl	8002988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a92      	ldr	r2, [pc, #584]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d2e:	4b92      	ldr	r3, [pc, #584]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d30:	e001      	b.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a8b      	ldr	r2, [pc, #556]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d4e:	e001      	b.n	8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d60:	d004      	beq.n	8004d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f040 8099 	bne.w	8004e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f925 	bl	8004fd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9c8 	bl	8005130 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d13a      	bne.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d035      	beq.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dc0:	e001      	b.n	8004dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4969      	ldr	r1, [pc, #420]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004dd2:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dd4:	e001      	b.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f043 0202 	orr.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd fdb4 	bl	8002988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	f040 80c3 	bne.w	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80bd 	beq.w	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a49      	ldr	r2, [pc, #292]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d101      	bne.n	8004e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e52:	4b49      	ldr	r3, [pc, #292]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e54:	e001      	b.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4944      	ldr	r1, [pc, #272]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e62:	428b      	cmp	r3, r1
 8004e64:	d101      	bne.n	8004e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e66:	4b44      	ldr	r3, [pc, #272]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e68:	e001      	b.n	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	f043 0204 	orr.w	r2, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fd fd76 	bl	8002988 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e9c:	e089      	b.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d107      	bne.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8be 	bl	8005034 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f8fd 	bl	80050cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d12f      	bne.n	8004f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02a      	beq.n	8004f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ef4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f02:	e001      	b.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4919      	ldr	r1, [pc, #100]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d101      	bne.n	8004f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f16:	e001      	b.n	8004f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fd fd26 	bl	8002988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d136      	bne.n	8004fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d031      	beq.n	8004fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f5c:	e001      	b.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4902      	ldr	r1, [pc, #8]	; (8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	d106      	bne.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004f6e:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f70:	e006      	b.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004f72:	bf00      	nop
 8004f74:	40003800 	.word	0x40003800
 8004f78:	40003400 	.word	0x40003400
 8004f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd fcec 	bl	8002988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	e000      	b.n	8004fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fb2:	bf00      	nop
}
 8004fb4:	bf00      	nop
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	1c99      	adds	r1, r3, #2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d113      	bne.n	800502a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffc9 	bl	8004fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c99      	adds	r1, r3, #2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6251      	str	r1, [r2, #36]	; 0x24
 8005046:	8819      	ldrh	r1, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <I2SEx_TxISR_I2SExt+0x90>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <I2SEx_TxISR_I2SExt+0x22>
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005054:	e001      	b.n	800505a <I2SEx_TxISR_I2SExt+0x26>
 8005056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505a:	460a      	mov	r2, r1
 800505c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <I2SEx_TxISR_I2SExt+0x90>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <I2SEx_TxISR_I2SExt+0x50>
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005082:	e001      	b.n	8005088 <I2SEx_TxISR_I2SExt+0x54>
 8005084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	490d      	ldr	r1, [pc, #52]	; (80050c4 <I2SEx_TxISR_I2SExt+0x90>)
 8005090:	428b      	cmp	r3, r1
 8005092:	d101      	bne.n	8005098 <I2SEx_TxISR_I2SExt+0x64>
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005096:	e001      	b.n	800509c <I2SEx_TxISR_I2SExt+0x68>
 8005098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800509c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff81 	bl	8004fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40003800 	.word	0x40003800
 80050c8:	40003400 	.word	0x40003400

080050cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68d8      	ldr	r0, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	1c99      	adds	r1, r3, #2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050e4:	b282      	uxth	r2, r0
 80050e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d113      	bne.n	8005128 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800510e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff ff4a 	bl	8004fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <I2SEx_RxISR_I2SExt+0x90>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <I2SEx_RxISR_I2SExt+0x16>
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <I2SEx_RxISR_I2SExt+0x94>)
 8005144:	e001      	b.n	800514a <I2SEx_RxISR_I2SExt+0x1a>
 8005146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514a:	68d8      	ldr	r0, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	1c99      	adds	r1, r3, #2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005156:	b282      	uxth	r2, r0
 8005158:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d121      	bne.n	80051b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <I2SEx_RxISR_I2SExt+0x90>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <I2SEx_RxISR_I2SExt+0x50>
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <I2SEx_RxISR_I2SExt+0x94>)
 800517e:	e001      	b.n	8005184 <I2SEx_RxISR_I2SExt+0x54>
 8005180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	490d      	ldr	r1, [pc, #52]	; (80051c0 <I2SEx_RxISR_I2SExt+0x90>)
 800518c:	428b      	cmp	r3, r1
 800518e:	d101      	bne.n	8005194 <I2SEx_RxISR_I2SExt+0x64>
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <I2SEx_RxISR_I2SExt+0x94>)
 8005192:	e001      	b.n	8005198 <I2SEx_RxISR_I2SExt+0x68>
 8005194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800519c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff03 	bl	8004fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40003800 	.word	0x40003800
 80051c4:	40003400 	.word	0x40003400

080051c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e267      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d075      	beq.n	80052d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051e6:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d00c      	beq.n	800520c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f2:	4b85      	ldr	r3, [pc, #532]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d112      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fe:	4b82      	ldr	r3, [pc, #520]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800520a:	d10b      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520c:	4b7e      	ldr	r3, [pc, #504]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05b      	beq.n	80052d0 <HAL_RCC_OscConfig+0x108>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d157      	bne.n	80052d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e242      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x74>
 800522e:	4b76      	ldr	r3, [pc, #472]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a75      	ldr	r2, [pc, #468]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x98>
 8005246:	4b70      	ldr	r3, [pc, #448]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6f      	ldr	r2, [pc, #444]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b6d      	ldr	r3, [pc, #436]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a6c      	ldr	r2, [pc, #432]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 8005260:	4b69      	ldr	r3, [pc, #420]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a68      	ldr	r2, [pc, #416]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b66      	ldr	r3, [pc, #408]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a65      	ldr	r2, [pc, #404]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fd fc16 	bl	8002ab0 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005288:	f7fd fc12 	bl	8002ab0 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e207      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0xc0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fd fc02 	bl	8002ab0 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fd fbfe 	bl	8002ab0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e1f3      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c2:	4b51      	ldr	r3, [pc, #324]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0xe8>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d063      	beq.n	80053a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052de:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d11c      	bne.n	8005330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f6:	4b44      	ldr	r3, [pc, #272]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d116      	bne.n	8005330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_RCC_OscConfig+0x152>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e1c7      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4937      	ldr	r1, [pc, #220]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532e:	e03a      	b.n	80053a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d020      	beq.n	800537a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <HAL_RCC_OscConfig+0x244>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fd fbb7 	bl	8002ab0 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7fd fbb3 	bl	8002ab0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e1a8      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005358:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005364:	4b28      	ldr	r3, [pc, #160]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4925      	ldr	r1, [pc, #148]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <HAL_RCC_OscConfig+0x244>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd fb96 	bl	8002ab0 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005388:	f7fd fb92 	bl	8002ab0 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e187      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d036      	beq.n	8005420 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <HAL_RCC_OscConfig+0x248>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fd fb76 	bl	8002ab0 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c8:	f7fd fb72 	bl	8002ab0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e167      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_OscConfig+0x240>)
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x200>
 80053e6:	e01b      	b.n	8005420 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <HAL_RCC_OscConfig+0x248>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ee:	f7fd fb5f 	bl	8002ab0 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	e00e      	b.n	8005414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fd fb5b 	bl	8002ab0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d907      	bls.n	8005414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e150      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
 8005408:	40023800 	.word	0x40023800
 800540c:	42470000 	.word	0x42470000
 8005410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005414:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ea      	bne.n	80053f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8097 	beq.w	800555c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	4b7d      	ldr	r3, [pc, #500]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4a7c      	ldr	r2, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	6413      	str	r3, [r2, #64]	; 0x40
 800544e:	4b7a      	ldr	r3, [pc, #488]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4b77      	ldr	r3, [pc, #476]	; (800563c <HAL_RCC_OscConfig+0x474>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d118      	bne.n	800549c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800546a:	4b74      	ldr	r3, [pc, #464]	; (800563c <HAL_RCC_OscConfig+0x474>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a73      	ldr	r2, [pc, #460]	; (800563c <HAL_RCC_OscConfig+0x474>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7fd fb1b 	bl	8002ab0 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547e:	f7fd fb17 	bl	8002ab0 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e10c      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005490:	4b6a      	ldr	r3, [pc, #424]	; (800563c <HAL_RCC_OscConfig+0x474>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x2ea>
 80054a4:	4b64      	ldr	r3, [pc, #400]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a63      	ldr	r2, [pc, #396]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
 80054b0:	e01c      	b.n	80054ec <HAL_RCC_OscConfig+0x324>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x30c>
 80054ba:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	4a5e      	ldr	r2, [pc, #376]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054c0:	f043 0304 	orr.w	r3, r3, #4
 80054c4:	6713      	str	r3, [r2, #112]	; 0x70
 80054c6:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a5b      	ldr	r2, [pc, #364]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0x324>
 80054d4:	4b58      	ldr	r3, [pc, #352]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	4a57      	ldr	r2, [pc, #348]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	6713      	str	r3, [r2, #112]	; 0x70
 80054e0:	4b55      	ldr	r3, [pc, #340]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a54      	ldr	r2, [pc, #336]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f4:	f7fd fadc 	bl	8002ab0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fd fad8 	bl	8002ab0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0cb      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005512:	4b49      	ldr	r3, [pc, #292]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ee      	beq.n	80054fc <HAL_RCC_OscConfig+0x334>
 800551e:	e014      	b.n	800554a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005520:	f7fd fac6 	bl	8002ab0 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005526:	e00a      	b.n	800553e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fd fac2 	bl	8002ab0 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0b5      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553e:	4b3e      	ldr	r3, [pc, #248]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1ee      	bne.n	8005528 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d105      	bne.n	800555c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005550:	4b39      	ldr	r3, [pc, #228]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	4a38      	ldr	r2, [pc, #224]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800555a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a1 	beq.w	80056a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005566:	4b34      	ldr	r3, [pc, #208]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b08      	cmp	r3, #8
 8005570:	d05c      	beq.n	800562c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d141      	bne.n	80055fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557a:	4b31      	ldr	r3, [pc, #196]	; (8005640 <HAL_RCC_OscConfig+0x478>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fd fa96 	bl	8002ab0 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005588:	f7fd fa92 	bl	8002ab0 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e087      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	3b01      	subs	r3, #1
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	491b      	ldr	r1, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x478>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d6:	f7fd fa6b 	bl	8002ab0 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055de:	f7fd fa67 	bl	8002ab0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e05c      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x416>
 80055fc:	e054      	b.n	80056a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_OscConfig+0x478>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005604:	f7fd fa54 	bl	8002ab0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560c:	f7fd fa50 	bl	8002ab0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e045      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x470>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x444>
 800562a:	e03d      	b.n	80056a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e038      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
 8005638:	40023800 	.word	0x40023800
 800563c:	40007000 	.word	0x40007000
 8005640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x4ec>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d028      	beq.n	80056a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d121      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d11a      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	4293      	cmp	r3, r2
 800567e:	d111      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	3b01      	subs	r3, #1
 800568e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d107      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800

080056b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0cc      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056cc:	4b68      	ldr	r3, [pc, #416]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d90c      	bls.n	80056f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b65      	ldr	r3, [pc, #404]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b63      	ldr	r3, [pc, #396]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0b8      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800570c:	4b59      	ldr	r3, [pc, #356]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4a58      	ldr	r2, [pc, #352]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4a52      	ldr	r2, [pc, #328]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800572e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005730:	4b50      	ldr	r3, [pc, #320]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	494d      	ldr	r1, [pc, #308]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d044      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b47      	ldr	r3, [pc, #284]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d119      	bne.n	8005796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e07f      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d003      	beq.n	8005776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005772:	2b03      	cmp	r3, #3
 8005774:	d107      	bne.n	8005786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005776:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e06f      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005786:	4b3b      	ldr	r3, [pc, #236]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e067      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005796:	4b37      	ldr	r3, [pc, #220]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4934      	ldr	r1, [pc, #208]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a8:	f7fd f982 	bl	8002ab0 <HAL_GetTick>
 80057ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b0:	f7fd f97e 	bl	8002ab0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e04f      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 020c 	and.w	r2, r3, #12
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1eb      	bne.n	80057b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d20c      	bcs.n	8005800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b22      	ldr	r3, [pc, #136]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b20      	ldr	r3, [pc, #128]	; (8005870 <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e032      	b.n	8005866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800580c:	4b19      	ldr	r3, [pc, #100]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4916      	ldr	r1, [pc, #88]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	490e      	ldr	r1, [pc, #56]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800583e:	f000 f821 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8005842:	4602      	mov	r2, r0
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	490a      	ldr	r1, [pc, #40]	; (8005878 <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	5ccb      	ldrb	r3, [r1, r3]
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <HAL_RCC_ClockConfig+0x1c4>)
 8005858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCC_ClockConfig+0x1c8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd f8e2 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40023c00 	.word	0x40023c00
 8005874:	40023800 	.word	0x40023800
 8005878:	08007db8 	.word	0x08007db8
 800587c:	20000000 	.word	0x20000000
 8005880:	20000070 	.word	0x20000070

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b094      	sub	sp, #80	; 0x50
 800588a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
 8005890:	2300      	movs	r3, #0
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005894:	2300      	movs	r3, #0
 8005896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800589c:	4b79      	ldr	r3, [pc, #484]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d00d      	beq.n	80058c4 <HAL_RCC_GetSysClockFreq+0x40>
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	f200 80e1 	bhi.w	8005a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x34>
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d003      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x3a>
 80058b6:	e0db      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058b8:	4b73      	ldr	r3, [pc, #460]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058bc:	e0db      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058be:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c2:	e0d8      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058c4:	4b6f      	ldr	r3, [pc, #444]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ce:	4b6d      	ldr	r3, [pc, #436]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d063      	beq.n	80059a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058da:	4b6a      	ldr	r3, [pc, #424]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	2200      	movs	r2, #0
 80058e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
 80058f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058f6:	4622      	mov	r2, r4
 80058f8:	462b      	mov	r3, r5
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	0159      	lsls	r1, r3, #5
 8005904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005908:	0150      	lsls	r0, r2, #5
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4621      	mov	r1, r4
 8005910:	1a51      	subs	r1, r2, r1
 8005912:	6139      	str	r1, [r7, #16]
 8005914:	4629      	mov	r1, r5
 8005916:	eb63 0301 	sbc.w	r3, r3, r1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005928:	4659      	mov	r1, fp
 800592a:	018b      	lsls	r3, r1, #6
 800592c:	4651      	mov	r1, sl
 800592e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005932:	4651      	mov	r1, sl
 8005934:	018a      	lsls	r2, r1, #6
 8005936:	4651      	mov	r1, sl
 8005938:	ebb2 0801 	subs.w	r8, r2, r1
 800593c:	4659      	mov	r1, fp
 800593e:	eb63 0901 	sbc.w	r9, r3, r1
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005956:	4690      	mov	r8, r2
 8005958:	4699      	mov	r9, r3
 800595a:	4623      	mov	r3, r4
 800595c:	eb18 0303 	adds.w	r3, r8, r3
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	462b      	mov	r3, r5
 8005964:	eb49 0303 	adc.w	r3, r9, r3
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005976:	4629      	mov	r1, r5
 8005978:	024b      	lsls	r3, r1, #9
 800597a:	4621      	mov	r1, r4
 800597c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005980:	4621      	mov	r1, r4
 8005982:	024a      	lsls	r2, r1, #9
 8005984:	4610      	mov	r0, r2
 8005986:	4619      	mov	r1, r3
 8005988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598a:	2200      	movs	r2, #0
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
 800598e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005994:	f7fa fc74 	bl	8000280 <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4613      	mov	r3, r2
 800599e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a0:	e058      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a2:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	2200      	movs	r2, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	4611      	mov	r1, r2
 80059ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	2300      	movs	r3, #0
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	f04f 0000 	mov.w	r0, #0
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	0159      	lsls	r1, r3, #5
 80059ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ce:	0150      	lsls	r0, r2, #5
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4641      	mov	r1, r8
 80059d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80059da:	4649      	mov	r1, r9
 80059dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059f4:	ebb2 040a 	subs.w	r4, r2, sl
 80059f8:	eb63 050b 	sbc.w	r5, r3, fp
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	00eb      	lsls	r3, r5, #3
 8005a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a0a:	00e2      	lsls	r2, r4, #3
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	461d      	mov	r5, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	18e3      	adds	r3, r4, r3
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	464b      	mov	r3, r9
 8005a18:	eb45 0303 	adc.w	r3, r5, r3
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	028b      	lsls	r3, r1, #10
 8005a2e:	4621      	mov	r1, r4
 8005a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a34:	4621      	mov	r1, r4
 8005a36:	028a      	lsls	r2, r1, #10
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	2200      	movs	r2, #0
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	61fa      	str	r2, [r7, #28]
 8005a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a48:	f7fa fc1a 	bl	8000280 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4613      	mov	r3, r2
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3750      	adds	r7, #80	; 0x50
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	00f42400 	.word	0x00f42400
 8005a8c:	007a1200 	.word	0x007a1200

08005a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a96:	681b      	ldr	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000000 	.word	0x20000000

08005aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aac:	f7ff fff0 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	0a9b      	lsrs	r3, r3, #10
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4903      	ldr	r1, [pc, #12]	; (8005acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	08007dc8 	.word	0x08007dc8

08005ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ad4:	f7ff ffdc 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0b5b      	lsrs	r3, r3, #13
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	; (8005af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	08007dc8 	.word	0x08007dc8

08005af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d038      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b20:	4b68      	ldr	r3, [pc, #416]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b26:	f7fc ffc3 	bl	8002ab0 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b2e:	f7fc ffbf 	bl	8002ab0 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0bd      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f0      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	071b      	lsls	r3, r3, #28
 8005b5e:	495a      	ldr	r1, [pc, #360]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b66:	4b57      	ldr	r3, [pc, #348]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6c:	f7fc ffa0 	bl	8002ab0 <HAL_GetTick>
 8005b70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b74:	f7fc ff9c 	bl	8002ab0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e09a      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b86:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8083 	beq.w	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	4a47      	ldr	r2, [pc, #284]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb0:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bbc:	4b43      	ldr	r3, [pc, #268]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a42      	ldr	r2, [pc, #264]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc8:	f7fc ff72 	bl	8002ab0 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bd0:	f7fc ff6e 	bl	8002ab0 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e06c      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005be2:	4b3a      	ldr	r3, [pc, #232]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bee:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d02f      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d028      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c1c:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c22:	4a29      	ldr	r2, [pc, #164]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d114      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fc ff3c 	bl	8002ab0 <HAL_GetTick>
 8005c38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fc ff38 	bl	8002ab0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e034      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ee      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d10d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005c6c:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c80:	4911      	ldr	r1, [pc, #68]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
 8005c86:	e005      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c92:	6093      	str	r3, [r2, #8]
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca0:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7d1a      	ldrb	r2, [r3, #20]
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005cb8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	42470068 	.word	0x42470068
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	42470e40 	.word	0x42470e40
 8005cd4:	424711e0 	.word	0x424711e0

08005cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d140      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005cf6:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d131      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d0e:	617b      	str	r3, [r7, #20]
          break;
 8005d10:	e031      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d12:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1e:	d109      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d20:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d2a:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	e008      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4c:	099b      	lsrs	r3, r3, #6
 8005d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	0f1b      	lsrs	r3, r3, #28
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]
          break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
          break;
 8005d74:	bf00      	nop
        }
      }
      break;
 8005d76:	bf00      	nop
    }
  }
  return frequency;
 8005d78:	697b      	ldr	r3, [r7, #20]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	00bb8000 	.word	0x00bb8000
 8005d90:	007a1200 	.word	0x007a1200
 8005d94:	00f42400 	.word	0x00f42400

08005d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e07b      	b.n	8005ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d009      	beq.n	8005dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61da      	str	r2, [r3, #28]
 8005dc2:	e005      	b.n	8005dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fe0e 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	ea42 0103 	orr.w	r1, r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	f003 0104 	and.w	r1, r3, #4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f003 0210 	and.w	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e03f      	b.n	8005f3c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fb feb1 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2224      	movs	r2, #36	; 0x24
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fdde 	bl	8006ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d17c      	bne.n	800605e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_UART_Transmit+0x2c>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e075      	b.n	8006060 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Transmit+0x3e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e06e      	b.n	8006060 <HAL_UART_Transmit+0x11c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2221      	movs	r2, #33	; 0x21
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f98:	f7fc fd8a 	bl	8002ab0 <HAL_GetTick>
 8005f9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb2:	d108      	bne.n	8005fc6 <HAL_UART_Transmit+0x82>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e003      	b.n	8005fce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fd6:	e02a      	b.n	800602e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2180      	movs	r1, #128	; 0x80
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fb1e 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e036      	b.n	8006060 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006006:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	3302      	adds	r3, #2
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e007      	b.n	8006020 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3301      	adds	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1cf      	bne.n	8005fd8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2200      	movs	r2, #0
 8006040:	2140      	movs	r1, #64	; 0x40
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 faee 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e006      	b.n	8006060 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	d11d      	bne.n	80060be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_UART_Receive_IT+0x26>
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e016      	b.n	80060c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Receive_IT+0x38>
 800609c:	2302      	movs	r3, #2
 800609e:	e00f      	b.n	80060c0 <HAL_UART_Receive_IT+0x58>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	461a      	mov	r2, r3
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fb23 	bl	8006700 <UART_Start_Receive_IT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e000      	b.n	80060c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b0ba      	sub	sp, #232	; 0xe8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_UART_IRQHandler+0x66>
 800611a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fc07 	bl	800693a <UART_Receive_IT>
      return;
 800612c:	e256      	b.n	80065dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800612e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80de 	beq.w	80062f4 <HAL_UART_IRQHandler+0x22c>
 8006138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80d1 	beq.w	80062f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <HAL_UART_IRQHandler+0xae>
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f043 0201 	orr.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
 8006182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0202 	orr.w	r2, r3, #2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_UART_IRQHandler+0xf6>
 80061a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d011      	beq.n	80061ee <HAL_UART_IRQHandler+0x126>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f043 0208 	orr.w	r2, r3, #8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 81ed 	beq.w	80065d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_UART_IRQHandler+0x14e>
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fb92 	bl	800693a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_UART_IRQHandler+0x17a>
 800623a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d04f      	beq.n	80062e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa9a 	bl	800677c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d141      	bne.n	80062da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3314      	adds	r3, #20
 800625c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800626c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800628e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800629a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1d9      	bne.n	8006256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	4a7d      	ldr	r2, [pc, #500]	; (80064a4 <HAL_UART_IRQHandler+0x3dc>)
 80062b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc fdab 	bl	8002e12 <HAL_DMA_Abort_IT>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e00e      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f990 	bl	80065f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	e00a      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f98c 	bl	80065f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	e006      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f988 	bl	80065f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062ee:	e170      	b.n	80065d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	bf00      	nop
    return;
 80062f2:	e16e      	b.n	80065d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f040 814a 	bne.w	8006592 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8143 	beq.w	8006592 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 813c 	beq.w	8006592 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	f040 80b4 	bne.w	80064a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800634c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8140 	beq.w	80065d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800635a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635e:	429a      	cmp	r2, r3
 8006360:	f080 8139 	bcs.w	80065d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800636a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006376:	f000 8088 	beq.w	800648a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1d9      	bne.n	800637a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e1      	bne.n	80063c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3314      	adds	r3, #20
 8006408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3314      	adds	r3, #20
 8006422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800642c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e3      	bne.n	8006402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645a:	f023 0310 	bic.w	r3, r3, #16
 800645e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800646c:	65ba      	str	r2, [r7, #88]	; 0x58
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800647a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e3      	bne.n	8006448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	4618      	mov	r0, r3
 8006486:	f7fc fc54 	bl	8002d32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006492:	b29b      	uxth	r3, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	b29b      	uxth	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f8b6 	bl	800660c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064a0:	e099      	b.n	80065d6 <HAL_UART_IRQHandler+0x50e>
 80064a2:	bf00      	nop
 80064a4:	08006843 	.word	0x08006843
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 808b 	beq.w	80065da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8086 	beq.w	80065da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064f2:	647a      	str	r2, [r7, #68]	; 0x44
 80064f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e3      	bne.n	80064ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	623b      	str	r3, [r7, #32]
   return(result);
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3314      	adds	r3, #20
 8006526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800652a:	633a      	str	r2, [r7, #48]	; 0x30
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e3      	bne.n	8006506 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60fb      	str	r3, [r7, #12]
   return(result);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006570:	61fa      	str	r2, [r7, #28]
 8006572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	617b      	str	r3, [r7, #20]
   return(result);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e3      	bne.n	800654c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f83e 	bl	800660c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006590:	e023      	b.n	80065da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <HAL_UART_IRQHandler+0x4ea>
 800659e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f95d 	bl	800686a <UART_Transmit_IT>
    return;
 80065b0:	e014      	b.n	80065dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <HAL_UART_IRQHandler+0x514>
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f99d 	bl	800690a <UART_EndTransmit_IT>
    return;
 80065d0:	e004      	b.n	80065dc <HAL_UART_IRQHandler+0x514>
    return;
 80065d2:	bf00      	nop
 80065d4:	e002      	b.n	80065dc <HAL_UART_IRQHandler+0x514>
      return;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <HAL_UART_IRQHandler+0x514>
      return;
 80065da:	bf00      	nop
  }
}
 80065dc:	37e8      	adds	r7, #232	; 0xe8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop

080065e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b090      	sub	sp, #64	; 0x40
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006634:	e050      	b.n	80066d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800663c:	d04c      	beq.n	80066d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <UART_WaitOnFlagUntilTimeout+0x30>
 8006644:	f7fc fa34 	bl	8002ab0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006650:	429a      	cmp	r2, r3
 8006652:	d241      	bcs.n	80066d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006674:	637a      	str	r2, [r7, #52]	; 0x34
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3314      	adds	r3, #20
 80066a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a8:	623a      	str	r2, [r7, #32]
 80066aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e00f      	b.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d09f      	beq.n	8006636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3740      	adds	r7, #64	; 0x40
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2222      	movs	r2, #34	; 0x22
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0220 	orr.w	r2, r2, #32
 800676c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b095      	sub	sp, #84	; 0x54
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a4:	643a      	str	r2, [r7, #64]	; 0x40
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f023 0301 	bic.w	r3, r3, #1
 80067ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3314      	adds	r3, #20
 80067d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d119      	bne.n	8006828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	60bb      	str	r3, [r7, #8]
   return(result);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006814:	61ba      	str	r2, [r7, #24]
 8006816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6979      	ldr	r1, [r7, #20]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	613b      	str	r3, [r7, #16]
   return(result);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006836:	bf00      	nop
 8006838:	3754      	adds	r7, #84	; 0x54
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fecb 	bl	80065f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b21      	cmp	r3, #33	; 0x21
 800687c:	d13e      	bne.n	80068fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006886:	d114      	bne.n	80068b2 <UART_Transmit_IT+0x48>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d110      	bne.n	80068b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	1c9a      	adds	r2, r3, #2
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	621a      	str	r2, [r3, #32]
 80068b0:	e008      	b.n	80068c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	1c59      	adds	r1, r3, #1
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6211      	str	r1, [r2, #32]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4619      	mov	r1, r3
 80068d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e000      	b.n	80068fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff fe5a 	bl	80065e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b08c      	sub	sp, #48	; 0x30
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b22      	cmp	r3, #34	; 0x22
 800694c:	f040 80ab 	bne.w	8006aa6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d117      	bne.n	800698a <UART_Receive_IT+0x50>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d113      	bne.n	800698a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006978:	b29a      	uxth	r2, r3
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	1c9a      	adds	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28
 8006988:	e026      	b.n	80069d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d007      	beq.n	80069ae <UART_Receive_IT+0x74>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <UART_Receive_IT+0x82>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e008      	b.n	80069ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d15a      	bne.n	8006aa2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0220 	bic.w	r2, r2, #32
 80069fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d135      	bne.n	8006a98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	613b      	str	r3, [r7, #16]
   return(result);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f023 0310 	bic.w	r3, r3, #16
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	623a      	str	r2, [r7, #32]
 8006a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	69f9      	ldr	r1, [r7, #28]
 8006a58:	6a3a      	ldr	r2, [r7, #32]
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d10a      	bne.n	8006a8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fdbb 	bl	800660c <HAL_UARTEx_RxEventCallback>
 8006a96:	e002      	b.n	8006a9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fa fe39 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e002      	b.n	8006aa8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e000      	b.n	8006aa8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
  }
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3730      	adds	r7, #48	; 0x30
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab4:	b0c0      	sub	sp, #256	; 0x100
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	68d9      	ldr	r1, [r3, #12]
 8006ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	ea40 0301 	orr.w	r3, r0, r1
 8006ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b08:	f021 010c 	bic.w	r1, r1, #12
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b16:	430b      	orrs	r3, r1
 8006b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	6999      	ldr	r1, [r3, #24]
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	ea40 0301 	orr.w	r3, r0, r1
 8006b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b8f      	ldr	r3, [pc, #572]	; (8006d7c <UART_SetConfig+0x2cc>)
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d005      	beq.n	8006b50 <UART_SetConfig+0xa0>
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b8d      	ldr	r3, [pc, #564]	; (8006d80 <UART_SetConfig+0x2d0>)
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d104      	bne.n	8006b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b50:	f7fe ffbe 	bl	8005ad0 <HAL_RCC_GetPCLK2Freq>
 8006b54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b58:	e003      	b.n	8006b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b5a:	f7fe ffa5 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8006b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6c:	f040 810c 	bne.w	8006d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	1891      	adds	r1, r2, r2
 8006b88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b8a:	415b      	adcs	r3, r3
 8006b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b92:	4621      	mov	r1, r4
 8006b94:	eb12 0801 	adds.w	r8, r2, r1
 8006b98:	4629      	mov	r1, r5
 8006b9a:	eb43 0901 	adc.w	r9, r3, r1
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bb2:	4690      	mov	r8, r2
 8006bb4:	4699      	mov	r9, r3
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	eb18 0303 	adds.w	r3, r8, r3
 8006bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	eb49 0303 	adc.w	r3, r9, r3
 8006bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bde:	460b      	mov	r3, r1
 8006be0:	18db      	adds	r3, r3, r3
 8006be2:	653b      	str	r3, [r7, #80]	; 0x50
 8006be4:	4613      	mov	r3, r2
 8006be6:	eb42 0303 	adc.w	r3, r2, r3
 8006bea:	657b      	str	r3, [r7, #84]	; 0x54
 8006bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bf4:	f7f9 fb44 	bl	8000280 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <UART_SetConfig+0x2d4>)
 8006bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	011c      	lsls	r4, r3, #4
 8006c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	1891      	adds	r1, r2, r2
 8006c1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c20:	415b      	adcs	r3, r3
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c28:	4641      	mov	r1, r8
 8006c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c2e:	4649      	mov	r1, r9
 8006c30:	eb43 0b01 	adc.w	fp, r3, r1
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c48:	4692      	mov	sl, r2
 8006c4a:	469b      	mov	fp, r3
 8006c4c:	4643      	mov	r3, r8
 8006c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c56:	464b      	mov	r3, r9
 8006c58:	eb4b 0303 	adc.w	r3, fp, r3
 8006c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c74:	460b      	mov	r3, r1
 8006c76:	18db      	adds	r3, r3, r3
 8006c78:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	eb42 0303 	adc.w	r3, r2, r3
 8006c80:	647b      	str	r3, [r7, #68]	; 0x44
 8006c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c8a:	f7f9 faf9 	bl	8000280 <__aeabi_uldivmod>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <UART_SetConfig+0x2d4>)
 8006c96:	fba3 2301 	umull	r2, r3, r3, r1
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	2264      	movs	r2, #100	; 0x64
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ca2:	1acb      	subs	r3, r1, r3
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006caa:	4b36      	ldr	r3, [pc, #216]	; (8006d84 <UART_SetConfig+0x2d4>)
 8006cac:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cb8:	441c      	add	r4, r3
 8006cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cdc:	4641      	mov	r1, r8
 8006cde:	1851      	adds	r1, r2, r1
 8006ce0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	414b      	adcs	r3, r1
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	00cb      	lsls	r3, r1, #3
 8006cf8:	4651      	mov	r1, sl
 8006cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cfe:	4651      	mov	r1, sl
 8006d00:	00ca      	lsls	r2, r1, #3
 8006d02:	4610      	mov	r0, r2
 8006d04:	4619      	mov	r1, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	4642      	mov	r2, r8
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d10:	464b      	mov	r3, r9
 8006d12:	460a      	mov	r2, r1
 8006d14:	eb42 0303 	adc.w	r3, r2, r3
 8006d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d30:	460b      	mov	r3, r1
 8006d32:	18db      	adds	r3, r3, r3
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d36:	4613      	mov	r3, r2
 8006d38:	eb42 0303 	adc.w	r3, r2, r3
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d46:	f7f9 fa9b 	bl	8000280 <__aeabi_uldivmod>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <UART_SetConfig+0x2d4>)
 8006d50:	fba3 1302 	umull	r1, r3, r3, r2
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	2164      	movs	r1, #100	; 0x64
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	3332      	adds	r3, #50	; 0x32
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <UART_SetConfig+0x2d4>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f003 0207 	and.w	r2, r3, #7
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4422      	add	r2, r4
 8006d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d78:	e105      	b.n	8006f86 <UART_SetConfig+0x4d6>
 8006d7a:	bf00      	nop
 8006d7c:	40011000 	.word	0x40011000
 8006d80:	40011400 	.word	0x40011400
 8006d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d9a:	4642      	mov	r2, r8
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	1891      	adds	r1, r2, r2
 8006da0:	6239      	str	r1, [r7, #32]
 8006da2:	415b      	adcs	r3, r3
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
 8006da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006daa:	4641      	mov	r1, r8
 8006dac:	1854      	adds	r4, r2, r1
 8006dae:	4649      	mov	r1, r9
 8006db0:	eb43 0501 	adc.w	r5, r3, r1
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	00eb      	lsls	r3, r5, #3
 8006dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc2:	00e2      	lsls	r2, r4, #3
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	4643      	mov	r3, r8
 8006dca:	18e3      	adds	r3, r4, r3
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	eb45 0303 	adc.w	r3, r5, r3
 8006dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006df6:	4629      	mov	r1, r5
 8006df8:	008b      	lsls	r3, r1, #2
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e00:	4621      	mov	r1, r4
 8006e02:	008a      	lsls	r2, r1, #2
 8006e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e08:	f7f9 fa3a 	bl	8000280 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4b60      	ldr	r3, [pc, #384]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006e12:	fba3 2302 	umull	r2, r3, r3, r2
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	011c      	lsls	r4, r3, #4
 8006e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	1891      	adds	r1, r2, r2
 8006e32:	61b9      	str	r1, [r7, #24]
 8006e34:	415b      	adcs	r3, r3
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	1851      	adds	r1, r2, r1
 8006e40:	6139      	str	r1, [r7, #16]
 8006e42:	4649      	mov	r1, r9
 8006e44:	414b      	adcs	r3, r1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e54:	4659      	mov	r1, fp
 8006e56:	00cb      	lsls	r3, r1, #3
 8006e58:	4651      	mov	r1, sl
 8006e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5e:	4651      	mov	r1, sl
 8006e60:	00ca      	lsls	r2, r1, #3
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	4642      	mov	r2, r8
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e70:	464b      	mov	r3, r9
 8006e72:	460a      	mov	r2, r1
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e94:	4649      	mov	r1, r9
 8006e96:	008b      	lsls	r3, r1, #2
 8006e98:	4641      	mov	r1, r8
 8006e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	008a      	lsls	r2, r1, #2
 8006ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ea6:	f7f9 f9eb 	bl	8000280 <__aeabi_uldivmod>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4b39      	ldr	r3, [pc, #228]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	2164      	movs	r1, #100	; 0x64
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	3332      	adds	r3, #50	; 0x32
 8006ec2:	4a34      	ldr	r2, [pc, #208]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ece:	441c      	add	r4, r3
 8006ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed8:	677a      	str	r2, [r7, #116]	; 0x74
 8006eda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	1891      	adds	r1, r2, r2
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eee:	4641      	mov	r1, r8
 8006ef0:	1851      	adds	r1, r2, r1
 8006ef2:	6039      	str	r1, [r7, #0]
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	414b      	adcs	r3, r1
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f06:	4659      	mov	r1, fp
 8006f08:	00cb      	lsls	r3, r1, #3
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f10:	4651      	mov	r1, sl
 8006f12:	00ca      	lsls	r2, r1, #3
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	189b      	adds	r3, r3, r2
 8006f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f20:	464b      	mov	r3, r9
 8006f22:	460a      	mov	r2, r1
 8006f24:	eb42 0303 	adc.w	r3, r2, r3
 8006f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	663b      	str	r3, [r7, #96]	; 0x60
 8006f34:	667a      	str	r2, [r7, #100]	; 0x64
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f42:	4649      	mov	r1, r9
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	4641      	mov	r1, r8
 8006f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	008a      	lsls	r2, r1, #2
 8006f50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f54:	f7f9 f994 	bl	8000280 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2164      	movs	r1, #100	; 0x64
 8006f66:	fb01 f303 	mul.w	r3, r1, r3
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	3332      	adds	r3, #50	; 0x32
 8006f70:	4a08      	ldr	r2, [pc, #32]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4422      	add	r2, r4
 8006f84:	609a      	str	r2, [r3, #8]
}
 8006f86:	bf00      	nop
 8006f88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f92:	bf00      	nop
 8006f94:	51eb851f 	.word	0x51eb851f

08006f98 <atoi>:
 8006f98:	220a      	movs	r2, #10
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f000 b8d4 	b.w	8007148 <strtol>

08006fa0 <__errno>:
 8006fa0:	4b01      	ldr	r3, [pc, #4]	; (8006fa8 <__errno+0x8>)
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000078 	.word	0x20000078

08006fac <__libc_init_array>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4d0d      	ldr	r5, [pc, #52]	; (8006fe4 <__libc_init_array+0x38>)
 8006fb0:	4c0d      	ldr	r4, [pc, #52]	; (8006fe8 <__libc_init_array+0x3c>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	d109      	bne.n	8006fd0 <__libc_init_array+0x24>
 8006fbc:	4d0b      	ldr	r5, [pc, #44]	; (8006fec <__libc_init_array+0x40>)
 8006fbe:	4c0c      	ldr	r4, [pc, #48]	; (8006ff0 <__libc_init_array+0x44>)
 8006fc0:	f000 fd1a 	bl	80079f8 <_init>
 8006fc4:	1b64      	subs	r4, r4, r5
 8006fc6:	10a4      	asrs	r4, r4, #2
 8006fc8:	2600      	movs	r6, #0
 8006fca:	42a6      	cmp	r6, r4
 8006fcc:	d105      	bne.n	8006fda <__libc_init_array+0x2e>
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd4:	4798      	blx	r3
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7ee      	b.n	8006fb8 <__libc_init_array+0xc>
 8006fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fde:	4798      	blx	r3
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	e7f2      	b.n	8006fca <__libc_init_array+0x1e>
 8006fe4:	08007f0c 	.word	0x08007f0c
 8006fe8:	08007f0c 	.word	0x08007f0c
 8006fec:	08007f0c 	.word	0x08007f0c
 8006ff0:	08007f10 	.word	0x08007f10

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <siprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b500      	push	{lr}
 8007008:	b09c      	sub	sp, #112	; 0x70
 800700a:	ab1d      	add	r3, sp, #116	; 0x74
 800700c:	9002      	str	r0, [sp, #8]
 800700e:	9006      	str	r0, [sp, #24]
 8007010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007014:	4809      	ldr	r0, [pc, #36]	; (800703c <siprintf+0x38>)
 8007016:	9107      	str	r1, [sp, #28]
 8007018:	9104      	str	r1, [sp, #16]
 800701a:	4909      	ldr	r1, [pc, #36]	; (8007040 <siprintf+0x3c>)
 800701c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	6800      	ldr	r0, [r0, #0]
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	a902      	add	r1, sp, #8
 8007028:	f000 f8f4 	bl	8007214 <_svfiprintf_r>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	b01c      	add	sp, #112	; 0x70
 8007034:	f85d eb04 	ldr.w	lr, [sp], #4
 8007038:	b003      	add	sp, #12
 800703a:	4770      	bx	lr
 800703c:	20000078 	.word	0x20000078
 8007040:	ffff0208 	.word	0xffff0208

08007044 <_strtol_l.constprop.0>:
 8007044:	2b01      	cmp	r3, #1
 8007046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704a:	d001      	beq.n	8007050 <_strtol_l.constprop.0+0xc>
 800704c:	2b24      	cmp	r3, #36	; 0x24
 800704e:	d906      	bls.n	800705e <_strtol_l.constprop.0+0x1a>
 8007050:	f7ff ffa6 	bl	8006fa0 <__errno>
 8007054:	2316      	movs	r3, #22
 8007056:	6003      	str	r3, [r0, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007144 <_strtol_l.constprop.0+0x100>
 8007062:	460d      	mov	r5, r1
 8007064:	462e      	mov	r6, r5
 8007066:	f815 4b01 	ldrb.w	r4, [r5], #1
 800706a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800706e:	f017 0708 	ands.w	r7, r7, #8
 8007072:	d1f7      	bne.n	8007064 <_strtol_l.constprop.0+0x20>
 8007074:	2c2d      	cmp	r4, #45	; 0x2d
 8007076:	d132      	bne.n	80070de <_strtol_l.constprop.0+0x9a>
 8007078:	782c      	ldrb	r4, [r5, #0]
 800707a:	2701      	movs	r7, #1
 800707c:	1cb5      	adds	r5, r6, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d05b      	beq.n	800713a <_strtol_l.constprop.0+0xf6>
 8007082:	2b10      	cmp	r3, #16
 8007084:	d109      	bne.n	800709a <_strtol_l.constprop.0+0x56>
 8007086:	2c30      	cmp	r4, #48	; 0x30
 8007088:	d107      	bne.n	800709a <_strtol_l.constprop.0+0x56>
 800708a:	782c      	ldrb	r4, [r5, #0]
 800708c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007090:	2c58      	cmp	r4, #88	; 0x58
 8007092:	d14d      	bne.n	8007130 <_strtol_l.constprop.0+0xec>
 8007094:	786c      	ldrb	r4, [r5, #1]
 8007096:	2310      	movs	r3, #16
 8007098:	3502      	adds	r5, #2
 800709a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800709e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80070a2:	f04f 0c00 	mov.w	ip, #0
 80070a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80070aa:	4666      	mov	r6, ip
 80070ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80070b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070b4:	f1be 0f09 	cmp.w	lr, #9
 80070b8:	d816      	bhi.n	80070e8 <_strtol_l.constprop.0+0xa4>
 80070ba:	4674      	mov	r4, lr
 80070bc:	42a3      	cmp	r3, r4
 80070be:	dd24      	ble.n	800710a <_strtol_l.constprop.0+0xc6>
 80070c0:	f1bc 0f00 	cmp.w	ip, #0
 80070c4:	db1e      	blt.n	8007104 <_strtol_l.constprop.0+0xc0>
 80070c6:	45b1      	cmp	r9, r6
 80070c8:	d31c      	bcc.n	8007104 <_strtol_l.constprop.0+0xc0>
 80070ca:	d101      	bne.n	80070d0 <_strtol_l.constprop.0+0x8c>
 80070cc:	45a2      	cmp	sl, r4
 80070ce:	db19      	blt.n	8007104 <_strtol_l.constprop.0+0xc0>
 80070d0:	fb06 4603 	mla	r6, r6, r3, r4
 80070d4:	f04f 0c01 	mov.w	ip, #1
 80070d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070dc:	e7e8      	b.n	80070b0 <_strtol_l.constprop.0+0x6c>
 80070de:	2c2b      	cmp	r4, #43	; 0x2b
 80070e0:	bf04      	itt	eq
 80070e2:	782c      	ldrbeq	r4, [r5, #0]
 80070e4:	1cb5      	addeq	r5, r6, #2
 80070e6:	e7ca      	b.n	800707e <_strtol_l.constprop.0+0x3a>
 80070e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80070ec:	f1be 0f19 	cmp.w	lr, #25
 80070f0:	d801      	bhi.n	80070f6 <_strtol_l.constprop.0+0xb2>
 80070f2:	3c37      	subs	r4, #55	; 0x37
 80070f4:	e7e2      	b.n	80070bc <_strtol_l.constprop.0+0x78>
 80070f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80070fa:	f1be 0f19 	cmp.w	lr, #25
 80070fe:	d804      	bhi.n	800710a <_strtol_l.constprop.0+0xc6>
 8007100:	3c57      	subs	r4, #87	; 0x57
 8007102:	e7db      	b.n	80070bc <_strtol_l.constprop.0+0x78>
 8007104:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007108:	e7e6      	b.n	80070d8 <_strtol_l.constprop.0+0x94>
 800710a:	f1bc 0f00 	cmp.w	ip, #0
 800710e:	da05      	bge.n	800711c <_strtol_l.constprop.0+0xd8>
 8007110:	2322      	movs	r3, #34	; 0x22
 8007112:	6003      	str	r3, [r0, #0]
 8007114:	4646      	mov	r6, r8
 8007116:	b942      	cbnz	r2, 800712a <_strtol_l.constprop.0+0xe6>
 8007118:	4630      	mov	r0, r6
 800711a:	e79e      	b.n	800705a <_strtol_l.constprop.0+0x16>
 800711c:	b107      	cbz	r7, 8007120 <_strtol_l.constprop.0+0xdc>
 800711e:	4276      	negs	r6, r6
 8007120:	2a00      	cmp	r2, #0
 8007122:	d0f9      	beq.n	8007118 <_strtol_l.constprop.0+0xd4>
 8007124:	f1bc 0f00 	cmp.w	ip, #0
 8007128:	d000      	beq.n	800712c <_strtol_l.constprop.0+0xe8>
 800712a:	1e69      	subs	r1, r5, #1
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	e7f3      	b.n	8007118 <_strtol_l.constprop.0+0xd4>
 8007130:	2430      	movs	r4, #48	; 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1b1      	bne.n	800709a <_strtol_l.constprop.0+0x56>
 8007136:	2308      	movs	r3, #8
 8007138:	e7af      	b.n	800709a <_strtol_l.constprop.0+0x56>
 800713a:	2c30      	cmp	r4, #48	; 0x30
 800713c:	d0a5      	beq.n	800708a <_strtol_l.constprop.0+0x46>
 800713e:	230a      	movs	r3, #10
 8007140:	e7ab      	b.n	800709a <_strtol_l.constprop.0+0x56>
 8007142:	bf00      	nop
 8007144:	08007dd1 	.word	0x08007dd1

08007148 <strtol>:
 8007148:	4613      	mov	r3, r2
 800714a:	460a      	mov	r2, r1
 800714c:	4601      	mov	r1, r0
 800714e:	4802      	ldr	r0, [pc, #8]	; (8007158 <strtol+0x10>)
 8007150:	6800      	ldr	r0, [r0, #0]
 8007152:	f7ff bf77 	b.w	8007044 <_strtol_l.constprop.0>
 8007156:	bf00      	nop
 8007158:	20000078 	.word	0x20000078

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	688e      	ldr	r6, [r1, #8]
 8007162:	429e      	cmp	r6, r3
 8007164:	4682      	mov	sl, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4690      	mov	r8, r2
 800716a:	461f      	mov	r7, r3
 800716c:	d838      	bhi.n	80071e0 <__ssputs_r+0x84>
 800716e:	898a      	ldrh	r2, [r1, #12]
 8007170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007174:	d032      	beq.n	80071dc <__ssputs_r+0x80>
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	6909      	ldr	r1, [r1, #16]
 800717a:	eba5 0901 	sub.w	r9, r5, r1
 800717e:	6965      	ldr	r5, [r4, #20]
 8007180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007188:	3301      	adds	r3, #1
 800718a:	444b      	add	r3, r9
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	429d      	cmp	r5, r3
 8007190:	bf38      	it	cc
 8007192:	461d      	movcc	r5, r3
 8007194:	0553      	lsls	r3, r2, #21
 8007196:	d531      	bpl.n	80071fc <__ssputs_r+0xa0>
 8007198:	4629      	mov	r1, r5
 800719a:	f000 fb63 	bl	8007864 <_malloc_r>
 800719e:	4606      	mov	r6, r0
 80071a0:	b950      	cbnz	r0, 80071b8 <__ssputs_r+0x5c>
 80071a2:	230c      	movs	r3, #12
 80071a4:	f8ca 3000 	str.w	r3, [sl]
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	464a      	mov	r2, r9
 80071bc:	f000 fabe 	bl	800773c <memcpy>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	6126      	str	r6, [r4, #16]
 80071ce:	6165      	str	r5, [r4, #20]
 80071d0:	444e      	add	r6, r9
 80071d2:	eba5 0509 	sub.w	r5, r5, r9
 80071d6:	6026      	str	r6, [r4, #0]
 80071d8:	60a5      	str	r5, [r4, #8]
 80071da:	463e      	mov	r6, r7
 80071dc:	42be      	cmp	r6, r7
 80071de:	d900      	bls.n	80071e2 <__ssputs_r+0x86>
 80071e0:	463e      	mov	r6, r7
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	4632      	mov	r2, r6
 80071e6:	4641      	mov	r1, r8
 80071e8:	f000 fab6 	bl	8007758 <memmove>
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	1b9b      	subs	r3, r3, r6
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4433      	add	r3, r6
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	2000      	movs	r0, #0
 80071fa:	e7db      	b.n	80071b4 <__ssputs_r+0x58>
 80071fc:	462a      	mov	r2, r5
 80071fe:	f000 fba5 	bl	800794c <_realloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d1e1      	bne.n	80071cc <__ssputs_r+0x70>
 8007208:	6921      	ldr	r1, [r4, #16]
 800720a:	4650      	mov	r0, sl
 800720c:	f000 fabe 	bl	800778c <_free_r>
 8007210:	e7c7      	b.n	80071a2 <__ssputs_r+0x46>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	b09d      	sub	sp, #116	; 0x74
 8007220:	4607      	mov	r7, r0
 8007222:	460d      	mov	r5, r1
 8007224:	4614      	mov	r4, r2
 8007226:	d50e      	bpl.n	8007246 <_svfiprintf_r+0x32>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b963      	cbnz	r3, 8007246 <_svfiprintf_r+0x32>
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f000 fb19 	bl	8007864 <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b920      	cbnz	r0, 8007242 <_svfiprintf_r+0x2e>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007240:	e0d1      	b.n	80073e6 <_svfiprintf_r+0x1d2>
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	616b      	str	r3, [r5, #20]
 8007246:	2300      	movs	r3, #0
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	2320      	movs	r3, #32
 800724c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007250:	f8cd 800c 	str.w	r8, [sp, #12]
 8007254:	2330      	movs	r3, #48	; 0x30
 8007256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007400 <_svfiprintf_r+0x1ec>
 800725a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725e:	f04f 0901 	mov.w	r9, #1
 8007262:	4623      	mov	r3, r4
 8007264:	469a      	mov	sl, r3
 8007266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726a:	b10a      	cbz	r2, 8007270 <_svfiprintf_r+0x5c>
 800726c:	2a25      	cmp	r2, #37	; 0x25
 800726e:	d1f9      	bne.n	8007264 <_svfiprintf_r+0x50>
 8007270:	ebba 0b04 	subs.w	fp, sl, r4
 8007274:	d00b      	beq.n	800728e <_svfiprintf_r+0x7a>
 8007276:	465b      	mov	r3, fp
 8007278:	4622      	mov	r2, r4
 800727a:	4629      	mov	r1, r5
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ff6d 	bl	800715c <__ssputs_r>
 8007282:	3001      	adds	r0, #1
 8007284:	f000 80aa 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728a:	445a      	add	r2, fp
 800728c:	9209      	str	r2, [sp, #36]	; 0x24
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a2 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007298:	2300      	movs	r3, #0
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a2:	f10a 0a01 	add.w	sl, sl, #1
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ae:	931a      	str	r3, [sp, #104]	; 0x68
 80072b0:	4654      	mov	r4, sl
 80072b2:	2205      	movs	r2, #5
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	4851      	ldr	r0, [pc, #324]	; (8007400 <_svfiprintf_r+0x1ec>)
 80072ba:	f7f8 ff91 	bl	80001e0 <memchr>
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	b9d8      	cbnz	r0, 80072fa <_svfiprintf_r+0xe6>
 80072c2:	06d0      	lsls	r0, r2, #27
 80072c4:	bf44      	itt	mi
 80072c6:	2320      	movmi	r3, #32
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	0711      	lsls	r1, r2, #28
 80072ce:	bf44      	itt	mi
 80072d0:	232b      	movmi	r3, #43	; 0x2b
 80072d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d015      	beq.n	800730a <_svfiprintf_r+0xf6>
 80072de:	9a07      	ldr	r2, [sp, #28]
 80072e0:	4654      	mov	r4, sl
 80072e2:	2000      	movs	r0, #0
 80072e4:	f04f 0c0a 	mov.w	ip, #10
 80072e8:	4621      	mov	r1, r4
 80072ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ee:	3b30      	subs	r3, #48	; 0x30
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d94e      	bls.n	8007392 <_svfiprintf_r+0x17e>
 80072f4:	b1b0      	cbz	r0, 8007324 <_svfiprintf_r+0x110>
 80072f6:	9207      	str	r2, [sp, #28]
 80072f8:	e014      	b.n	8007324 <_svfiprintf_r+0x110>
 80072fa:	eba0 0308 	sub.w	r3, r0, r8
 80072fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	46a2      	mov	sl, r4
 8007308:	e7d2      	b.n	80072b0 <_svfiprintf_r+0x9c>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9103      	str	r1, [sp, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbb      	ittet	lt
 8007316:	425b      	neglt	r3, r3
 8007318:	f042 0202 	orrlt.w	r2, r2, #2
 800731c:	9307      	strge	r3, [sp, #28]
 800731e:	9307      	strlt	r3, [sp, #28]
 8007320:	bfb8      	it	lt
 8007322:	9204      	strlt	r2, [sp, #16]
 8007324:	7823      	ldrb	r3, [r4, #0]
 8007326:	2b2e      	cmp	r3, #46	; 0x2e
 8007328:	d10c      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d135      	bne.n	800739c <_svfiprintf_r+0x188>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	1d1a      	adds	r2, r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	9203      	str	r2, [sp, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfb8      	it	lt
 800733c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007340:	3402      	adds	r4, #2
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007410 <_svfiprintf_r+0x1fc>
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	f7f8 ff47 	bl	80001e0 <memchr>
 8007352:	b140      	cbz	r0, 8007366 <_svfiprintf_r+0x152>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	eba0 000a 	sub.w	r0, r0, sl
 800735a:	fa03 f000 	lsl.w	r0, r3, r0
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	4303      	orrs	r3, r0
 8007362:	3401      	adds	r4, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736a:	4826      	ldr	r0, [pc, #152]	; (8007404 <_svfiprintf_r+0x1f0>)
 800736c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007370:	2206      	movs	r2, #6
 8007372:	f7f8 ff35 	bl	80001e0 <memchr>
 8007376:	2800      	cmp	r0, #0
 8007378:	d038      	beq.n	80073ec <_svfiprintf_r+0x1d8>
 800737a:	4b23      	ldr	r3, [pc, #140]	; (8007408 <_svfiprintf_r+0x1f4>)
 800737c:	bb1b      	cbnz	r3, 80073c6 <_svfiprintf_r+0x1b2>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	3307      	adds	r3, #7
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	3308      	adds	r3, #8
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738c:	4433      	add	r3, r6
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	e767      	b.n	8007262 <_svfiprintf_r+0x4e>
 8007392:	fb0c 3202 	mla	r2, ip, r2, r3
 8007396:	460c      	mov	r4, r1
 8007398:	2001      	movs	r0, #1
 800739a:	e7a5      	b.n	80072e8 <_svfiprintf_r+0xd4>
 800739c:	2300      	movs	r3, #0
 800739e:	3401      	adds	r4, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	4619      	mov	r1, r3
 80073a4:	f04f 0c0a 	mov.w	ip, #10
 80073a8:	4620      	mov	r0, r4
 80073aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ae:	3a30      	subs	r2, #48	; 0x30
 80073b0:	2a09      	cmp	r2, #9
 80073b2:	d903      	bls.n	80073bc <_svfiprintf_r+0x1a8>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0c5      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b8:	9105      	str	r1, [sp, #20]
 80073ba:	e7c3      	b.n	8007344 <_svfiprintf_r+0x130>
 80073bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c0:	4604      	mov	r4, r0
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7f0      	b.n	80073a8 <_svfiprintf_r+0x194>
 80073c6:	ab03      	add	r3, sp, #12
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <_svfiprintf_r+0x1f8>)
 80073ce:	a904      	add	r1, sp, #16
 80073d0:	4638      	mov	r0, r7
 80073d2:	f3af 8000 	nop.w
 80073d6:	1c42      	adds	r2, r0, #1
 80073d8:	4606      	mov	r6, r0
 80073da:	d1d6      	bne.n	800738a <_svfiprintf_r+0x176>
 80073dc:	89ab      	ldrh	r3, [r5, #12]
 80073de:	065b      	lsls	r3, r3, #25
 80073e0:	f53f af2c 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e6:	b01d      	add	sp, #116	; 0x74
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <_svfiprintf_r+0x1f8>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4638      	mov	r0, r7
 80073f8:	f000 f87a 	bl	80074f0 <_printf_i>
 80073fc:	e7eb      	b.n	80073d6 <_svfiprintf_r+0x1c2>
 80073fe:	bf00      	nop
 8007400:	08007ed1 	.word	0x08007ed1
 8007404:	08007edb 	.word	0x08007edb
 8007408:	00000000 	.word	0x00000000
 800740c:	0800715d 	.word	0x0800715d
 8007410:	08007ed7 	.word	0x08007ed7

08007414 <_printf_common>:
 8007414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	4616      	mov	r6, r2
 800741a:	4699      	mov	r9, r3
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007424:	4293      	cmp	r3, r2
 8007426:	bfb8      	it	lt
 8007428:	4613      	movlt	r3, r2
 800742a:	6033      	str	r3, [r6, #0]
 800742c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007430:	4607      	mov	r7, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b10a      	cbz	r2, 800743a <_printf_common+0x26>
 8007436:	3301      	adds	r3, #1
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	0699      	lsls	r1, r3, #26
 800743e:	bf42      	ittt	mi
 8007440:	6833      	ldrmi	r3, [r6, #0]
 8007442:	3302      	addmi	r3, #2
 8007444:	6033      	strmi	r3, [r6, #0]
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	f015 0506 	ands.w	r5, r5, #6
 800744c:	d106      	bne.n	800745c <_printf_common+0x48>
 800744e:	f104 0a19 	add.w	sl, r4, #25
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	6832      	ldr	r2, [r6, #0]
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc26      	bgt.n	80074aa <_printf_common+0x96>
 800745c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007460:	1e13      	subs	r3, r2, #0
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	bf18      	it	ne
 8007466:	2301      	movne	r3, #1
 8007468:	0692      	lsls	r2, r2, #26
 800746a:	d42b      	bmi.n	80074c4 <_printf_common+0xb0>
 800746c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007470:	4649      	mov	r1, r9
 8007472:	4638      	mov	r0, r7
 8007474:	47c0      	blx	r8
 8007476:	3001      	adds	r0, #1
 8007478:	d01e      	beq.n	80074b8 <_printf_common+0xa4>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	68e5      	ldr	r5, [r4, #12]
 800747e:	6832      	ldr	r2, [r6, #0]
 8007480:	f003 0306 	and.w	r3, r3, #6
 8007484:	2b04      	cmp	r3, #4
 8007486:	bf08      	it	eq
 8007488:	1aad      	subeq	r5, r5, r2
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	bf0c      	ite	eq
 8007490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007494:	2500      	movne	r5, #0
 8007496:	4293      	cmp	r3, r2
 8007498:	bfc4      	itt	gt
 800749a:	1a9b      	subgt	r3, r3, r2
 800749c:	18ed      	addgt	r5, r5, r3
 800749e:	2600      	movs	r6, #0
 80074a0:	341a      	adds	r4, #26
 80074a2:	42b5      	cmp	r5, r6
 80074a4:	d11a      	bne.n	80074dc <_printf_common+0xc8>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e008      	b.n	80074bc <_printf_common+0xa8>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4649      	mov	r1, r9
 80074b0:	4638      	mov	r0, r7
 80074b2:	47c0      	blx	r8
 80074b4:	3001      	adds	r0, #1
 80074b6:	d103      	bne.n	80074c0 <_printf_common+0xac>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	3501      	adds	r5, #1
 80074c2:	e7c6      	b.n	8007452 <_printf_common+0x3e>
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	2030      	movs	r0, #48	; 0x30
 80074ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ce:	4422      	add	r2, r4
 80074d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d8:	3302      	adds	r3, #2
 80074da:	e7c7      	b.n	800746c <_printf_common+0x58>
 80074dc:	2301      	movs	r3, #1
 80074de:	4622      	mov	r2, r4
 80074e0:	4649      	mov	r1, r9
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c0      	blx	r8
 80074e6:	3001      	adds	r0, #1
 80074e8:	d0e6      	beq.n	80074b8 <_printf_common+0xa4>
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7d9      	b.n	80074a2 <_printf_common+0x8e>
	...

080074f0 <_printf_i>:
 80074f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	7e0f      	ldrb	r7, [r1, #24]
 80074f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074f8:	2f78      	cmp	r7, #120	; 0x78
 80074fa:	4691      	mov	r9, r2
 80074fc:	4680      	mov	r8, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	469a      	mov	sl, r3
 8007502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007506:	d807      	bhi.n	8007518 <_printf_i+0x28>
 8007508:	2f62      	cmp	r7, #98	; 0x62
 800750a:	d80a      	bhi.n	8007522 <_printf_i+0x32>
 800750c:	2f00      	cmp	r7, #0
 800750e:	f000 80d8 	beq.w	80076c2 <_printf_i+0x1d2>
 8007512:	2f58      	cmp	r7, #88	; 0x58
 8007514:	f000 80a3 	beq.w	800765e <_printf_i+0x16e>
 8007518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800751c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007520:	e03a      	b.n	8007598 <_printf_i+0xa8>
 8007522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007526:	2b15      	cmp	r3, #21
 8007528:	d8f6      	bhi.n	8007518 <_printf_i+0x28>
 800752a:	a101      	add	r1, pc, #4	; (adr r1, 8007530 <_printf_i+0x40>)
 800752c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007530:	08007589 	.word	0x08007589
 8007534:	0800759d 	.word	0x0800759d
 8007538:	08007519 	.word	0x08007519
 800753c:	08007519 	.word	0x08007519
 8007540:	08007519 	.word	0x08007519
 8007544:	08007519 	.word	0x08007519
 8007548:	0800759d 	.word	0x0800759d
 800754c:	08007519 	.word	0x08007519
 8007550:	08007519 	.word	0x08007519
 8007554:	08007519 	.word	0x08007519
 8007558:	08007519 	.word	0x08007519
 800755c:	080076a9 	.word	0x080076a9
 8007560:	080075cd 	.word	0x080075cd
 8007564:	0800768b 	.word	0x0800768b
 8007568:	08007519 	.word	0x08007519
 800756c:	08007519 	.word	0x08007519
 8007570:	080076cb 	.word	0x080076cb
 8007574:	08007519 	.word	0x08007519
 8007578:	080075cd 	.word	0x080075cd
 800757c:	08007519 	.word	0x08007519
 8007580:	08007519 	.word	0x08007519
 8007584:	08007693 	.word	0x08007693
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	602a      	str	r2, [r5, #0]
 8007590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007598:	2301      	movs	r3, #1
 800759a:	e0a3      	b.n	80076e4 <_printf_i+0x1f4>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	6829      	ldr	r1, [r5, #0]
 80075a0:	0606      	lsls	r6, r0, #24
 80075a2:	f101 0304 	add.w	r3, r1, #4
 80075a6:	d50a      	bpl.n	80075be <_printf_i+0xce>
 80075a8:	680e      	ldr	r6, [r1, #0]
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	da03      	bge.n	80075b8 <_printf_i+0xc8>
 80075b0:	232d      	movs	r3, #45	; 0x2d
 80075b2:	4276      	negs	r6, r6
 80075b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b8:	485e      	ldr	r0, [pc, #376]	; (8007734 <_printf_i+0x244>)
 80075ba:	230a      	movs	r3, #10
 80075bc:	e019      	b.n	80075f2 <_printf_i+0x102>
 80075be:	680e      	ldr	r6, [r1, #0]
 80075c0:	602b      	str	r3, [r5, #0]
 80075c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075c6:	bf18      	it	ne
 80075c8:	b236      	sxthne	r6, r6
 80075ca:	e7ef      	b.n	80075ac <_printf_i+0xbc>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	6029      	str	r1, [r5, #0]
 80075d4:	0601      	lsls	r1, r0, #24
 80075d6:	d501      	bpl.n	80075dc <_printf_i+0xec>
 80075d8:	681e      	ldr	r6, [r3, #0]
 80075da:	e002      	b.n	80075e2 <_printf_i+0xf2>
 80075dc:	0646      	lsls	r6, r0, #25
 80075de:	d5fb      	bpl.n	80075d8 <_printf_i+0xe8>
 80075e0:	881e      	ldrh	r6, [r3, #0]
 80075e2:	4854      	ldr	r0, [pc, #336]	; (8007734 <_printf_i+0x244>)
 80075e4:	2f6f      	cmp	r7, #111	; 0x6f
 80075e6:	bf0c      	ite	eq
 80075e8:	2308      	moveq	r3, #8
 80075ea:	230a      	movne	r3, #10
 80075ec:	2100      	movs	r1, #0
 80075ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075f2:	6865      	ldr	r5, [r4, #4]
 80075f4:	60a5      	str	r5, [r4, #8]
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	bfa2      	ittt	ge
 80075fa:	6821      	ldrge	r1, [r4, #0]
 80075fc:	f021 0104 	bicge.w	r1, r1, #4
 8007600:	6021      	strge	r1, [r4, #0]
 8007602:	b90e      	cbnz	r6, 8007608 <_printf_i+0x118>
 8007604:	2d00      	cmp	r5, #0
 8007606:	d04d      	beq.n	80076a4 <_printf_i+0x1b4>
 8007608:	4615      	mov	r5, r2
 800760a:	fbb6 f1f3 	udiv	r1, r6, r3
 800760e:	fb03 6711 	mls	r7, r3, r1, r6
 8007612:	5dc7      	ldrb	r7, [r0, r7]
 8007614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007618:	4637      	mov	r7, r6
 800761a:	42bb      	cmp	r3, r7
 800761c:	460e      	mov	r6, r1
 800761e:	d9f4      	bls.n	800760a <_printf_i+0x11a>
 8007620:	2b08      	cmp	r3, #8
 8007622:	d10b      	bne.n	800763c <_printf_i+0x14c>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07de      	lsls	r6, r3, #31
 8007628:	d508      	bpl.n	800763c <_printf_i+0x14c>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	4299      	cmp	r1, r3
 8007630:	bfde      	ittt	le
 8007632:	2330      	movle	r3, #48	; 0x30
 8007634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007638:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800763c:	1b52      	subs	r2, r2, r5
 800763e:	6122      	str	r2, [r4, #16]
 8007640:	f8cd a000 	str.w	sl, [sp]
 8007644:	464b      	mov	r3, r9
 8007646:	aa03      	add	r2, sp, #12
 8007648:	4621      	mov	r1, r4
 800764a:	4640      	mov	r0, r8
 800764c:	f7ff fee2 	bl	8007414 <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	d14c      	bne.n	80076ee <_printf_i+0x1fe>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007658:	b004      	add	sp, #16
 800765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765e:	4835      	ldr	r0, [pc, #212]	; (8007734 <_printf_i+0x244>)
 8007660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007664:	6829      	ldr	r1, [r5, #0]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f851 6b04 	ldr.w	r6, [r1], #4
 800766c:	6029      	str	r1, [r5, #0]
 800766e:	061d      	lsls	r5, r3, #24
 8007670:	d514      	bpl.n	800769c <_printf_i+0x1ac>
 8007672:	07df      	lsls	r7, r3, #31
 8007674:	bf44      	itt	mi
 8007676:	f043 0320 	orrmi.w	r3, r3, #32
 800767a:	6023      	strmi	r3, [r4, #0]
 800767c:	b91e      	cbnz	r6, 8007686 <_printf_i+0x196>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	f023 0320 	bic.w	r3, r3, #32
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	2310      	movs	r3, #16
 8007688:	e7b0      	b.n	80075ec <_printf_i+0xfc>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f043 0320 	orr.w	r3, r3, #32
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	2378      	movs	r3, #120	; 0x78
 8007694:	4828      	ldr	r0, [pc, #160]	; (8007738 <_printf_i+0x248>)
 8007696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800769a:	e7e3      	b.n	8007664 <_printf_i+0x174>
 800769c:	0659      	lsls	r1, r3, #25
 800769e:	bf48      	it	mi
 80076a0:	b2b6      	uxthmi	r6, r6
 80076a2:	e7e6      	b.n	8007672 <_printf_i+0x182>
 80076a4:	4615      	mov	r5, r2
 80076a6:	e7bb      	b.n	8007620 <_printf_i+0x130>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	6826      	ldr	r6, [r4, #0]
 80076ac:	6961      	ldr	r1, [r4, #20]
 80076ae:	1d18      	adds	r0, r3, #4
 80076b0:	6028      	str	r0, [r5, #0]
 80076b2:	0635      	lsls	r5, r6, #24
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0x1cc>
 80076b8:	6019      	str	r1, [r3, #0]
 80076ba:	e002      	b.n	80076c2 <_printf_i+0x1d2>
 80076bc:	0670      	lsls	r0, r6, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0x1c8>
 80076c0:	8019      	strh	r1, [r3, #0]
 80076c2:	2300      	movs	r3, #0
 80076c4:	6123      	str	r3, [r4, #16]
 80076c6:	4615      	mov	r5, r2
 80076c8:	e7ba      	b.n	8007640 <_printf_i+0x150>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	1d1a      	adds	r2, r3, #4
 80076ce:	602a      	str	r2, [r5, #0]
 80076d0:	681d      	ldr	r5, [r3, #0]
 80076d2:	6862      	ldr	r2, [r4, #4]
 80076d4:	2100      	movs	r1, #0
 80076d6:	4628      	mov	r0, r5
 80076d8:	f7f8 fd82 	bl	80001e0 <memchr>
 80076dc:	b108      	cbz	r0, 80076e2 <_printf_i+0x1f2>
 80076de:	1b40      	subs	r0, r0, r5
 80076e0:	6060      	str	r0, [r4, #4]
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	6123      	str	r3, [r4, #16]
 80076e6:	2300      	movs	r3, #0
 80076e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ec:	e7a8      	b.n	8007640 <_printf_i+0x150>
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	462a      	mov	r2, r5
 80076f2:	4649      	mov	r1, r9
 80076f4:	4640      	mov	r0, r8
 80076f6:	47d0      	blx	sl
 80076f8:	3001      	adds	r0, #1
 80076fa:	d0ab      	beq.n	8007654 <_printf_i+0x164>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	079b      	lsls	r3, r3, #30
 8007700:	d413      	bmi.n	800772a <_printf_i+0x23a>
 8007702:	68e0      	ldr	r0, [r4, #12]
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	4298      	cmp	r0, r3
 8007708:	bfb8      	it	lt
 800770a:	4618      	movlt	r0, r3
 800770c:	e7a4      	b.n	8007658 <_printf_i+0x168>
 800770e:	2301      	movs	r3, #1
 8007710:	4632      	mov	r2, r6
 8007712:	4649      	mov	r1, r9
 8007714:	4640      	mov	r0, r8
 8007716:	47d0      	blx	sl
 8007718:	3001      	adds	r0, #1
 800771a:	d09b      	beq.n	8007654 <_printf_i+0x164>
 800771c:	3501      	adds	r5, #1
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	9903      	ldr	r1, [sp, #12]
 8007722:	1a5b      	subs	r3, r3, r1
 8007724:	42ab      	cmp	r3, r5
 8007726:	dcf2      	bgt.n	800770e <_printf_i+0x21e>
 8007728:	e7eb      	b.n	8007702 <_printf_i+0x212>
 800772a:	2500      	movs	r5, #0
 800772c:	f104 0619 	add.w	r6, r4, #25
 8007730:	e7f5      	b.n	800771e <_printf_i+0x22e>
 8007732:	bf00      	nop
 8007734:	08007ee2 	.word	0x08007ee2
 8007738:	08007ef3 	.word	0x08007ef3

0800773c <memcpy>:
 800773c:	440a      	add	r2, r1
 800773e:	4291      	cmp	r1, r2
 8007740:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007744:	d100      	bne.n	8007748 <memcpy+0xc>
 8007746:	4770      	bx	lr
 8007748:	b510      	push	{r4, lr}
 800774a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007752:	4291      	cmp	r1, r2
 8007754:	d1f9      	bne.n	800774a <memcpy+0xe>
 8007756:	bd10      	pop	{r4, pc}

08007758 <memmove>:
 8007758:	4288      	cmp	r0, r1
 800775a:	b510      	push	{r4, lr}
 800775c:	eb01 0402 	add.w	r4, r1, r2
 8007760:	d902      	bls.n	8007768 <memmove+0x10>
 8007762:	4284      	cmp	r4, r0
 8007764:	4623      	mov	r3, r4
 8007766:	d807      	bhi.n	8007778 <memmove+0x20>
 8007768:	1e43      	subs	r3, r0, #1
 800776a:	42a1      	cmp	r1, r4
 800776c:	d008      	beq.n	8007780 <memmove+0x28>
 800776e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007776:	e7f8      	b.n	800776a <memmove+0x12>
 8007778:	4402      	add	r2, r0
 800777a:	4601      	mov	r1, r0
 800777c:	428a      	cmp	r2, r1
 800777e:	d100      	bne.n	8007782 <memmove+0x2a>
 8007780:	bd10      	pop	{r4, pc}
 8007782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800778a:	e7f7      	b.n	800777c <memmove+0x24>

0800778c <_free_r>:
 800778c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800778e:	2900      	cmp	r1, #0
 8007790:	d044      	beq.n	800781c <_free_r+0x90>
 8007792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007796:	9001      	str	r0, [sp, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f1a1 0404 	sub.w	r4, r1, #4
 800779e:	bfb8      	it	lt
 80077a0:	18e4      	addlt	r4, r4, r3
 80077a2:	f000 f913 	bl	80079cc <__malloc_lock>
 80077a6:	4a1e      	ldr	r2, [pc, #120]	; (8007820 <_free_r+0x94>)
 80077a8:	9801      	ldr	r0, [sp, #4]
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	b933      	cbnz	r3, 80077bc <_free_r+0x30>
 80077ae:	6063      	str	r3, [r4, #4]
 80077b0:	6014      	str	r4, [r2, #0]
 80077b2:	b003      	add	sp, #12
 80077b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077b8:	f000 b90e 	b.w	80079d8 <__malloc_unlock>
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d908      	bls.n	80077d2 <_free_r+0x46>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf01      	itttt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	1949      	addeq	r1, r1, r5
 80077ce:	6021      	streq	r1, [r4, #0]
 80077d0:	e7ed      	b.n	80077ae <_free_r+0x22>
 80077d2:	461a      	mov	r2, r3
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	b10b      	cbz	r3, 80077dc <_free_r+0x50>
 80077d8:	42a3      	cmp	r3, r4
 80077da:	d9fa      	bls.n	80077d2 <_free_r+0x46>
 80077dc:	6811      	ldr	r1, [r2, #0]
 80077de:	1855      	adds	r5, r2, r1
 80077e0:	42a5      	cmp	r5, r4
 80077e2:	d10b      	bne.n	80077fc <_free_r+0x70>
 80077e4:	6824      	ldr	r4, [r4, #0]
 80077e6:	4421      	add	r1, r4
 80077e8:	1854      	adds	r4, r2, r1
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	6011      	str	r1, [r2, #0]
 80077ee:	d1e0      	bne.n	80077b2 <_free_r+0x26>
 80077f0:	681c      	ldr	r4, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	6053      	str	r3, [r2, #4]
 80077f6:	4421      	add	r1, r4
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	e7da      	b.n	80077b2 <_free_r+0x26>
 80077fc:	d902      	bls.n	8007804 <_free_r+0x78>
 80077fe:	230c      	movs	r3, #12
 8007800:	6003      	str	r3, [r0, #0]
 8007802:	e7d6      	b.n	80077b2 <_free_r+0x26>
 8007804:	6825      	ldr	r5, [r4, #0]
 8007806:	1961      	adds	r1, r4, r5
 8007808:	428b      	cmp	r3, r1
 800780a:	bf04      	itt	eq
 800780c:	6819      	ldreq	r1, [r3, #0]
 800780e:	685b      	ldreq	r3, [r3, #4]
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	bf04      	itt	eq
 8007814:	1949      	addeq	r1, r1, r5
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	6054      	str	r4, [r2, #4]
 800781a:	e7ca      	b.n	80077b2 <_free_r+0x26>
 800781c:	b003      	add	sp, #12
 800781e:	bd30      	pop	{r4, r5, pc}
 8007820:	200004a4 	.word	0x200004a4

08007824 <sbrk_aligned>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4e0e      	ldr	r6, [pc, #56]	; (8007860 <sbrk_aligned+0x3c>)
 8007828:	460c      	mov	r4, r1
 800782a:	6831      	ldr	r1, [r6, #0]
 800782c:	4605      	mov	r5, r0
 800782e:	b911      	cbnz	r1, 8007836 <sbrk_aligned+0x12>
 8007830:	f000 f8bc 	bl	80079ac <_sbrk_r>
 8007834:	6030      	str	r0, [r6, #0]
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 f8b7 	bl	80079ac <_sbrk_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d00a      	beq.n	8007858 <sbrk_aligned+0x34>
 8007842:	1cc4      	adds	r4, r0, #3
 8007844:	f024 0403 	bic.w	r4, r4, #3
 8007848:	42a0      	cmp	r0, r4
 800784a:	d007      	beq.n	800785c <sbrk_aligned+0x38>
 800784c:	1a21      	subs	r1, r4, r0
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f8ac 	bl	80079ac <_sbrk_r>
 8007854:	3001      	adds	r0, #1
 8007856:	d101      	bne.n	800785c <sbrk_aligned+0x38>
 8007858:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800785c:	4620      	mov	r0, r4
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	200004a8 	.word	0x200004a8

08007864 <_malloc_r>:
 8007864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007868:	1ccd      	adds	r5, r1, #3
 800786a:	f025 0503 	bic.w	r5, r5, #3
 800786e:	3508      	adds	r5, #8
 8007870:	2d0c      	cmp	r5, #12
 8007872:	bf38      	it	cc
 8007874:	250c      	movcc	r5, #12
 8007876:	2d00      	cmp	r5, #0
 8007878:	4607      	mov	r7, r0
 800787a:	db01      	blt.n	8007880 <_malloc_r+0x1c>
 800787c:	42a9      	cmp	r1, r5
 800787e:	d905      	bls.n	800788c <_malloc_r+0x28>
 8007880:	230c      	movs	r3, #12
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	2600      	movs	r6, #0
 8007886:	4630      	mov	r0, r6
 8007888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800788c:	4e2e      	ldr	r6, [pc, #184]	; (8007948 <_malloc_r+0xe4>)
 800788e:	f000 f89d 	bl	80079cc <__malloc_lock>
 8007892:	6833      	ldr	r3, [r6, #0]
 8007894:	461c      	mov	r4, r3
 8007896:	bb34      	cbnz	r4, 80078e6 <_malloc_r+0x82>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ffc2 	bl	8007824 <sbrk_aligned>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	4604      	mov	r4, r0
 80078a4:	d14d      	bne.n	8007942 <_malloc_r+0xde>
 80078a6:	6834      	ldr	r4, [r6, #0]
 80078a8:	4626      	mov	r6, r4
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	d140      	bne.n	8007930 <_malloc_r+0xcc>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	4631      	mov	r1, r6
 80078b2:	4638      	mov	r0, r7
 80078b4:	eb04 0803 	add.w	r8, r4, r3
 80078b8:	f000 f878 	bl	80079ac <_sbrk_r>
 80078bc:	4580      	cmp	r8, r0
 80078be:	d13a      	bne.n	8007936 <_malloc_r+0xd2>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	3503      	adds	r5, #3
 80078c4:	1a6d      	subs	r5, r5, r1
 80078c6:	f025 0503 	bic.w	r5, r5, #3
 80078ca:	3508      	adds	r5, #8
 80078cc:	2d0c      	cmp	r5, #12
 80078ce:	bf38      	it	cc
 80078d0:	250c      	movcc	r5, #12
 80078d2:	4629      	mov	r1, r5
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ffa5 	bl	8007824 <sbrk_aligned>
 80078da:	3001      	adds	r0, #1
 80078dc:	d02b      	beq.n	8007936 <_malloc_r+0xd2>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	442b      	add	r3, r5
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	e00e      	b.n	8007904 <_malloc_r+0xa0>
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	1b52      	subs	r2, r2, r5
 80078ea:	d41e      	bmi.n	800792a <_malloc_r+0xc6>
 80078ec:	2a0b      	cmp	r2, #11
 80078ee:	d916      	bls.n	800791e <_malloc_r+0xba>
 80078f0:	1961      	adds	r1, r4, r5
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	6025      	str	r5, [r4, #0]
 80078f6:	bf18      	it	ne
 80078f8:	6059      	strne	r1, [r3, #4]
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	bf08      	it	eq
 80078fe:	6031      	streq	r1, [r6, #0]
 8007900:	5162      	str	r2, [r4, r5]
 8007902:	604b      	str	r3, [r1, #4]
 8007904:	4638      	mov	r0, r7
 8007906:	f104 060b 	add.w	r6, r4, #11
 800790a:	f000 f865 	bl	80079d8 <__malloc_unlock>
 800790e:	f026 0607 	bic.w	r6, r6, #7
 8007912:	1d23      	adds	r3, r4, #4
 8007914:	1af2      	subs	r2, r6, r3
 8007916:	d0b6      	beq.n	8007886 <_malloc_r+0x22>
 8007918:	1b9b      	subs	r3, r3, r6
 800791a:	50a3      	str	r3, [r4, r2]
 800791c:	e7b3      	b.n	8007886 <_malloc_r+0x22>
 800791e:	6862      	ldr	r2, [r4, #4]
 8007920:	42a3      	cmp	r3, r4
 8007922:	bf0c      	ite	eq
 8007924:	6032      	streq	r2, [r6, #0]
 8007926:	605a      	strne	r2, [r3, #4]
 8007928:	e7ec      	b.n	8007904 <_malloc_r+0xa0>
 800792a:	4623      	mov	r3, r4
 800792c:	6864      	ldr	r4, [r4, #4]
 800792e:	e7b2      	b.n	8007896 <_malloc_r+0x32>
 8007930:	4634      	mov	r4, r6
 8007932:	6876      	ldr	r6, [r6, #4]
 8007934:	e7b9      	b.n	80078aa <_malloc_r+0x46>
 8007936:	230c      	movs	r3, #12
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	4638      	mov	r0, r7
 800793c:	f000 f84c 	bl	80079d8 <__malloc_unlock>
 8007940:	e7a1      	b.n	8007886 <_malloc_r+0x22>
 8007942:	6025      	str	r5, [r4, #0]
 8007944:	e7de      	b.n	8007904 <_malloc_r+0xa0>
 8007946:	bf00      	nop
 8007948:	200004a4 	.word	0x200004a4

0800794c <_realloc_r>:
 800794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	4680      	mov	r8, r0
 8007952:	4614      	mov	r4, r2
 8007954:	460e      	mov	r6, r1
 8007956:	b921      	cbnz	r1, 8007962 <_realloc_r+0x16>
 8007958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	4611      	mov	r1, r2
 800795e:	f7ff bf81 	b.w	8007864 <_malloc_r>
 8007962:	b92a      	cbnz	r2, 8007970 <_realloc_r+0x24>
 8007964:	f7ff ff12 	bl	800778c <_free_r>
 8007968:	4625      	mov	r5, r4
 800796a:	4628      	mov	r0, r5
 800796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007970:	f000 f838 	bl	80079e4 <_malloc_usable_size_r>
 8007974:	4284      	cmp	r4, r0
 8007976:	4607      	mov	r7, r0
 8007978:	d802      	bhi.n	8007980 <_realloc_r+0x34>
 800797a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800797e:	d812      	bhi.n	80079a6 <_realloc_r+0x5a>
 8007980:	4621      	mov	r1, r4
 8007982:	4640      	mov	r0, r8
 8007984:	f7ff ff6e 	bl	8007864 <_malloc_r>
 8007988:	4605      	mov	r5, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d0ed      	beq.n	800796a <_realloc_r+0x1e>
 800798e:	42bc      	cmp	r4, r7
 8007990:	4622      	mov	r2, r4
 8007992:	4631      	mov	r1, r6
 8007994:	bf28      	it	cs
 8007996:	463a      	movcs	r2, r7
 8007998:	f7ff fed0 	bl	800773c <memcpy>
 800799c:	4631      	mov	r1, r6
 800799e:	4640      	mov	r0, r8
 80079a0:	f7ff fef4 	bl	800778c <_free_r>
 80079a4:	e7e1      	b.n	800796a <_realloc_r+0x1e>
 80079a6:	4635      	mov	r5, r6
 80079a8:	e7df      	b.n	800796a <_realloc_r+0x1e>
	...

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	; (80079c8 <_sbrk_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fa f8cc 	bl	8001b54 <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	200004ac 	.word	0x200004ac

080079cc <__malloc_lock>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__malloc_lock+0x8>)
 80079ce:	f000 b811 	b.w	80079f4 <__retarget_lock_acquire_recursive>
 80079d2:	bf00      	nop
 80079d4:	200004b0 	.word	0x200004b0

080079d8 <__malloc_unlock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__malloc_unlock+0x8>)
 80079da:	f000 b80c 	b.w	80079f6 <__retarget_lock_release_recursive>
 80079de:	bf00      	nop
 80079e0:	200004b0 	.word	0x200004b0

080079e4 <_malloc_usable_size_r>:
 80079e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e8:	1f18      	subs	r0, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfbc      	itt	lt
 80079ee:	580b      	ldrlt	r3, [r1, r0]
 80079f0:	18c0      	addlt	r0, r0, r3
 80079f2:	4770      	bx	lr

080079f4 <__retarget_lock_acquire_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_release_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
