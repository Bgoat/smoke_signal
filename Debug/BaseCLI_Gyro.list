
BaseCLI_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa0  0800baa0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa8  0800baa8  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800bab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  200000e4  0800bb94  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d00  0800bb94  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff2d  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fcc  00000000  00000000  00040041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00045010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a28  00000000  00000000  00046c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d95e  00000000  00000000  00048680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d9a  00000000  00000000  00065fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9518  00000000  00000000  0008ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079ac  00000000  00000000  001342e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e4 	.word	0x200000e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4e8 	.word	0x0800b4e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	0800b4e8 	.word	0x0800b4e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <MX_ADC1_Init+0x9c>)
 8000d76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <MX_ADC1_Init+0xa0>)
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dc2:	f003 fcd9 	bl	8004778 <HAL_ADC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f002 f9de 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000de2:	f003 fe59 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dec:	f002 f9ce 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000100 	.word	0x20000100
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	0f000001 	.word	0x0f000001

08000e04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d127      	bne.n	8000e76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_ADC_MspInit+0x84>)
 8000e72:	f004 fccb 	bl	800580c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012000 	.word	0x40012000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	440b      	add	r3, r1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d114      	bne.n	8000edc <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
		i++;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 8000ebc:	e00e      	b.n	8000edc <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	440b      	add	r3, r1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d001      	beq.n	8000ed6 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d11a      	bne.n	8000f18 <ConsoleCommandMatch+0x8c>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d817      	bhi.n	8000f18 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d011      	beq.n	8000f18 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000efc:	2b0a      	cmp	r3, #10
 8000efe:	d00b      	beq.n	8000f18 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b0d      	cmp	r3, #13
 8000f0a:	d005      	beq.n	8000f18 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1d2      	bne.n	8000ebe <ConsoleCommandMatch+0x32>
	}

	return result;
 8000f18:	68bb      	ldr	r3, [r7, #8]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000f3e:	e00d      	b.n	8000f5c <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	441a      	add	r2, r3
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	440b      	add	r3, r1
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	701a      	strb	r2, [r3, #0]
		i++;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d3ed      	bcc.n	8000f40 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000f64:	e007      	b.n	8000f76 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2bff      	cmp	r3, #255	; 0xff
 8000f7a:	d9f4      	bls.n	8000f66 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000f7c:	693b      	ldr	r3, [r7, #16]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000f9e:	e002      	b.n	8000fa6 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d009      	beq.n	8000fc6 <ConsoleCommandEndline+0x3c>
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d003      	beq.n	8000fc6 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3ec      	bcc.n	8000fa0 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d201      	bcs.n	8000fd2 <ConsoleCommandEndline+0x48>
	{
		result = i;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000fe6:	f000 fd0f 	bl	8001a08 <ConsoleIoInit>
	ConsoleIoSendString("Welcome your gateway to testing code and hardware.");
 8000fea:	480f      	ldr	r0, [pc, #60]	; (8001028 <ConsoleInit+0x48>)
 8000fec:	f000 fd40 	bl	8001a70 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ff0:	480e      	ldr	r0, [pc, #56]	; (800102c <ConsoleInit+0x4c>)
 8000ff2:	f000 fd3d 	bl	8001a70 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <ConsoleInit+0x50>)
 8000ff8:	f000 fd3a 	bl	8001a70 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <ConsoleInit+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e007      	b.n	8001018 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <ConsoleInit+0x58>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2bff      	cmp	r3, #255	; 0xff
 800101c:	d9f4      	bls.n	8001008 <ConsoleInit+0x28>
	}

}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	0800b500 	.word	0x0800b500
 800102c:	0800b534 	.word	0x0800b534
 8001030:	0800b538 	.word	0x0800b538
 8001034:	20000248 	.word	0x20000248
 8001038:	20000148 	.word	0x20000148

0800103c <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <ConsoleProcess+0x158>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a54      	ldr	r2, [pc, #336]	; (8001198 <ConsoleProcess+0x15c>)
 8001048:	1898      	adds	r0, r3, r2
 800104a:	4b52      	ldr	r3, [pc, #328]	; (8001194 <ConsoleProcess+0x158>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001052:	463a      	mov	r2, r7
 8001054:	4619      	mov	r1, r3
 8001056:	f000 fcdf 	bl	8001a18 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d104      	bne.n	800106a <ConsoleProcess+0x2e>
 8001060:	4b4e      	ldr	r3, [pc, #312]	; (800119c <ConsoleProcess+0x160>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8091 	beq.w	800118c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <ConsoleProcess+0x160>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <ConsoleProcess+0x158>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <ConsoleProcess+0x158>)
 800107a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <ConsoleProcess+0x158>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <ConsoleProcess+0x15c>)
 8001084:	f7ff ff81 	bl	8000f8a <ConsoleCommandEndline>
 8001088:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db7d      	blt.n	800118c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8001090:	f000 fcb0 	bl	80019f4 <ConsoleCommandsGetTable>
 8001094:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80010a0:	e03d      	b.n	800111e <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	461a      	mov	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4938      	ldr	r1, [pc, #224]	; (8001198 <ConsoleProcess+0x15c>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fee8 	bl	8000e8c <ConsoleCommandMatch>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d02a      	beq.n	8001118 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4830      	ldr	r0, [pc, #192]	; (8001198 <ConsoleProcess+0x15c>)
 80010d6:	4798      	blx	r3
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d017      	beq.n	8001112 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80010e2:	482f      	ldr	r0, [pc, #188]	; (80011a0 <ConsoleProcess+0x164>)
 80010e4:	f000 fcc4 	bl	8001a70 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80010e8:	482b      	ldr	r0, [pc, #172]	; (8001198 <ConsoleProcess+0x15c>)
 80010ea:	f000 fcc1 	bl	8001a70 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80010ee:	482d      	ldr	r0, [pc, #180]	; (80011a4 <ConsoleProcess+0x168>)
 80010f0:	f000 fcbe 	bl	8001a70 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	461a      	mov	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4413      	add	r3, r2
 8001104:	3308      	adds	r3, #8
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fcb2 	bl	8001a70 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <ConsoleProcess+0x16c>)
 800110e:	f000 fcaf 	bl	8001a70 <ConsoleIoSendString>

					}
					found = cmdIndex;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e002      	b.n	800111e <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <ConsoleProcess+0x100>
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113a:	d0b2      	beq.n	80010a2 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00d      	beq.n	800115e <ConsoleProcess+0x122>
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001148:	d109      	bne.n	800115e <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <ConsoleProcess+0x158>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d905      	bls.n	800115e <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 8001152:	4816      	ldr	r0, [pc, #88]	; (80011ac <ConsoleProcess+0x170>)
 8001154:	f000 fc8c 	bl	8001a70 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <ConsoleProcess+0x16c>)
 800115a:	f000 fc89 	bl	8001a70 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <ConsoleProcess+0x158>)
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	461a      	mov	r2, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <ConsoleProcess+0x15c>)
 800116a:	f7ff fedc 	bl	8000f26 <ConsoleResetBuffer>
 800116e:	4603      	mov	r3, r0
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <ConsoleProcess+0x158>)
 8001172:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <ConsoleProcess+0x158>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf14      	ite	ne
 800117c:	2301      	movne	r3, #1
 800117e:	2300      	moveq	r3, #0
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <ConsoleProcess+0x160>)
 8001184:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <ConsoleProcess+0x174>)
 8001188:	f000 fc72 	bl	8001a70 <ConsoleIoSendString>
		}
	}
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000248 	.word	0x20000248
 8001198:	20000148 	.word	0x20000148
 800119c:	2000024c 	.word	0x2000024c
 80011a0:	0800b53c 	.word	0x0800b53c
 80011a4:	0800b544 	.word	0x0800b544
 80011a8:	0800b534 	.word	0x0800b534
 80011ac:	0800b54c 	.word	0x0800b54c
 80011b0:	0800b538 	.word	0x0800b538

080011b4 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	460b      	mov	r3, r1
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80011ce:	e00b      	b.n	80011e8 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d102      	bne.n	80011e2 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	3301      	adds	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d002      	beq.n	80011f6 <ConsoleParamFindN+0x42>
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d9ec      	bls.n	80011d0 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d102      	bne.n	8001204 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80011fe:	2310      	movs	r3, #16
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e002      	b.n	800120a <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	601a      	str	r2, [r3, #0]
	}
	return result;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	460b      	mov	r3, r1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800122a:	f107 021c 	add.w	r2, r7, #28
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	4619      	mov	r1, r3
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff ffbe 	bl	80011b4 <ConsoleParamFindN>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	4413      	add	r3, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8001252:	e011      	b.n	8001278 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001254:	f107 0214 	add.w	r2, r7, #20
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	4413      	add	r3, r2
 800125c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001260:	701a      	strb	r2, [r3, #0]
		i++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	4413      	add	r3, r2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8001278:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800127c:	2b0a      	cmp	r3, #10
 800127e:	d00a      	beq.n	8001296 <ConsoleReceiveParamInt16+0x7e>
 8001280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001284:	2b0d      	cmp	r3, #13
 8001286:	d006      	beq.n	8001296 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8001288:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800128c:	2b20      	cmp	r3, #32
 800128e:	d002      	beq.n	8001296 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	2b07      	cmp	r3, #7
 8001294:	d9de      	bls.n	8001254 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	2b08      	cmp	r3, #8
 800129a:	d102      	bne.n	80012a2 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 800129c:	2310      	movs	r3, #16
 800129e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80012a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80012aa:	f107 0214 	add.w	r2, r7, #20
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	4413      	add	r3, r2
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f009 fbe4 	bl	800aa88 <atoi>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80012c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	460b      	mov	r3, r1
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80012ea:	f107 0218 	add.w	r2, r7, #24
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff5e 	bl	80011b4 <ConsoleParamFindN>
 80012f8:	4603      	mov	r3, r0
 80012fa:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d12c      	bne.n	800135c <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	e01e      	b.n	8001346 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10d      	bne.n	800132a <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	4413      	add	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f107 0217 	add.w	r2, r7, #23
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f8e1 	bl	80014e8 <ConsoleUtilHexCharToInt>
 8001326:	4603      	mov	r3, r0
 8001328:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8001330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	b29a      	uxth	r2, r3
 800133a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800133c:	4413      	add	r3, r2
 800133e:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	3301      	adds	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9dd      	bls.n	8001308 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	2b11      	cmp	r3, #17
 8001350:	d101      	bne.n	8001356 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001352:	2300      	movs	r3, #0
 8001354:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800135a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800135c:	7ffb      	ldrb	r3, [r7, #31]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8001370:	2300      	movs	r3, #0
 8001372:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e01b      	b.n	80013b2 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d115      	bne.n	80013ac <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f1c3 0303 	rsb	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	fa42 f303 	asr.w	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8001396:	f107 020c 	add.w	r2, r7, #12
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	441a      	add	r2, r3
 800139e:	7cbb      	ldrb	r3, [r7, #18]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f8e1 	bl	800156a <ConsoleUtilsIntToHexChar>
 80013a8:	4603      	mov	r3, r0
 80013aa:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d9e0      	bls.n	800137a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 80013b8:	f107 020c 	add.w	r2, r7, #12
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fb51 	bl	8001a70 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da07      	bge.n	8001402 <smallItoa+0x2a>
		isNegative = true;
 80013f2:	2301      	movs	r3, #1
 80013f4:	77fb      	strb	r3, [r7, #31]
		in = -in;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	425b      	negs	r3, r3
 80013fa:	60fb      	str	r3, [r7, #12]
		stringLen++;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8001406:	e007      	b.n	8001418 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f1      	bne.n	8001408 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
    stringLen--;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3b01      	subs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	440b      	add	r3, r1
 8001450:	3230      	adds	r2, #48	; 0x30
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	fb92 f3f3 	sdiv	r3, r2, r3
 800145e:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	617a      	str	r2, [r7, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1e6      	bne.n	8001438 <smallItoa+0x60>

	if (isNegative) {
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	222d      	movs	r2, #45	; 0x2d
 8001474:	701a      	strb	r2, [r3, #0]
	}
}
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 800148c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001490:	f107 0108 	add.w	r1, r7, #8
 8001494:	220a      	movs	r2, #10
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff9e 	bl	80013d8 <smallItoa>
	ConsoleIoSendString(out);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fae5 	bl	8001a70 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ConsoleSendParamInt32>:

// ConsoleSendParamInt32
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt32(int32_t parameterInt)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	char out[INT32_MAX_STR_LENGTH];
	memset(out, 0, sizeof(out));
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	2210      	movs	r2, #16
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 fb0f 	bl	800aae4 <memset>

	itoa (parameterInt, out, 10);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	220a      	movs	r2, #10
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff82 	bl	80013d8 <smallItoa>
	ConsoleIoSendString(out);
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fac9 	bl	8001a70 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ConsoleUtilHexCharToInt>:
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b2f      	cmp	r3, #47	; 0x2f
 80014fc:	d908      	bls.n	8001510 <ConsoleUtilHexCharToInt+0x28>
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b39      	cmp	r3, #57	; 0x39
 8001502:	d805      	bhi.n	8001510 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	3b30      	subs	r3, #48	; 0x30
 8001508:	b2da      	uxtb	r2, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e025      	b.n	800155c <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b40      	cmp	r3, #64	; 0x40
 8001514:	d908      	bls.n	8001528 <ConsoleUtilHexCharToInt+0x40>
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b46      	cmp	r3, #70	; 0x46
 800151a:	d805      	bhi.n	8001528 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	3b37      	subs	r3, #55	; 0x37
 8001520:	b2da      	uxtb	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e019      	b.n	800155c <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b60      	cmp	r3, #96	; 0x60
 800152c:	d908      	bls.n	8001540 <ConsoleUtilHexCharToInt+0x58>
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b66      	cmp	r3, #102	; 0x66
 8001532:	d805      	bhi.n	8001540 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	3b57      	subs	r3, #87	; 0x57
 8001538:	b2da      	uxtb	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e00d      	b.n	800155c <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d105      	bne.n	8001552 <ConsoleUtilHexCharToInt+0x6a>
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b0d      	cmp	r3, #13
 800154a:	d102      	bne.n	8001552 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b20      	cmp	r3, #32
 8001550:	d102      	bne.n	8001558 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8001552:	2311      	movs	r3, #17
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001558:	2310      	movs	r3, #16
 800155a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	6039      	str	r1, [r7, #0]
 8001574:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d805      	bhi.n	800158c <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	3330      	adds	r3, #48	; 0x30
 8001584:	b2da      	uxtb	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e00d      	b.n	80015a8 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b09      	cmp	r3, #9
 8001590:	d908      	bls.n	80015a4 <ConsoleUtilsIntToHexChar+0x3a>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d805      	bhi.n	80015a4 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	3337      	adds	r3, #55	; 0x37
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e001      	b.n	80015a8 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 80015a4:	2310      	movs	r3, #16
 80015a6:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80015d4:	2300      	movs	r3, #0
 80015d6:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80015d8:	230b      	movs	r3, #11
 80015da:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e01e      	b.n	8001620 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80015e2:	4914      	ldr	r1, [pc, #80]	; (8001634 <ConsoleCommandHelp+0x68>)
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fa3c 	bl	8001a70 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <ConsoleCommandHelp+0x6c>)
 80015fa:	f000 fa39 	bl	8001a70 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	3308      	adds	r3, #8
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <ConsoleCommandHelp+0x68>)
 800160c:	4413      	add	r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fa2e 	bl	8001a70 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <ConsoleCommandHelp+0x70>)
 8001616:	f000 fa2b 	bl	8001a70 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3b01      	subs	r3, #1
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3db      	bcc.n	80015e2 <ConsoleCommandHelp+0x16>
	}
	return result;
 800162a:	7cfb      	ldrb	r3, [r7, #19]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800b63c 	.word	0x0800b63c
 8001638:	0800b5a0 	.word	0x0800b5a0
 800163c:	0800b5a4 	.word	0x0800b5a4

08001640 <ConsoleCommandAccel>:
static eCommandResult_T ConsoleCommandAccel(const char buffer[])
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_ACCELERO_GetXYZ(&data_xyz);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4618      	mov	r0, r3
 800164e:	f002 ff6b 	bl	8004528 <BSP_ACCELERO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11d      	bne.n	8001698 <ConsoleCommandAccel+0x58>
	{
		ConsoleIoSendString("X is ");
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <ConsoleCommandAccel+0x64>)
 800165e:	f000 fa07 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8001662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff0b 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <ConsoleCommandAccel+0x68>)
 800166e:	f000 f9ff 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8001672:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff03 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <ConsoleCommandAccel+0x6c>)
 800167e:	f000 f9f7 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8001682:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fefb 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <ConsoleCommandAccel+0x70>)
 800168e:	f000 f9ef 	bl	8001a70 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <ConsoleCommandAccel+0x74>)
 8001694:	f000 f9ec 	bl	8001a70 <ConsoleIoSendString>
	}
	return result;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800b5a8 	.word	0x0800b5a8
 80016a8:	0800b5b0 	.word	0x0800b5b0
 80016ac:	0800b5b8 	.word	0x0800b5b8
 80016b0:	0800b5c0 	.word	0x0800b5c0
 80016b4:	0800b5a4 	.word	0x0800b5a4

080016b8 <ConsoleCommandGyro>:
static eCommandResult_T ConsoleCommandGyro(const char buffer[])
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_GYRO_GetXYZ(&data_xyz);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 ffad 	bl	8004624 <BSP_GYRO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11d      	bne.n	8001710 <ConsoleCommandGyro+0x58>
	{
		ConsoleIoSendString("X is ");
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <ConsoleCommandGyro+0x64>)
 80016d6:	f000 f9cb 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 80016da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fecf 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <ConsoleCommandGyro+0x68>)
 80016e6:	f000 f9c3 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 80016ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fec7 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <ConsoleCommandGyro+0x6c>)
 80016f6:	f000 f9bb 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 80016fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff febf 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <ConsoleCommandGyro+0x70>)
 8001706:	f000 f9b3 	bl	8001a70 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <ConsoleCommandGyro+0x74>)
 800170c:	f000 f9b0 	bl	8001a70 <ConsoleIoSendString>
	}
	return result;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800b5a8 	.word	0x0800b5a8
 8001720:	0800b5b0 	.word	0x0800b5b0
 8001724:	0800b5b8 	.word	0x0800b5b8
 8001728:	0800b5c0 	.word	0x0800b5c0
 800172c:	0800b5a4 	.word	0x0800b5a4

08001730 <ConsoleCommandFlashRW>:
static eCommandResult_T ConsoleCommandFlashRW(const char buffer[])
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	#define FLASH_FREE_LOCATION 0x08020000
	//read first to make sure we are good
	uint64_t *RDAddr = (uint64_t *) FLASH_FREE_LOCATION;
 8001738:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <ConsoleCommandFlashRW+0x100>)
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t RData = *RDAddr;
 800173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint32_t Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 800174a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	000a      	movs	r2, r1
 8001758:	2300      	movs	r3, #0
 800175a:	4613      	mov	r3, r2
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is ");
 800175e:	4835      	ldr	r0, [pc, #212]	; (8001834 <ConsoleCommandFlashRW+0x104>)
 8001760:	f000 f986 	bl	8001a70 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fea2 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe9e 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <ConsoleCommandFlashRW+0x108>)
 8001776:	f000 f97b 	bl	8001a70 <ConsoleIoSendString>


 	HAL_FLASH_Unlock();
 800177a:	f003 fdb3 	bl	80052e4 <HAL_FLASH_Unlock>
 	//HAL_FLASH_OB_Unlock();
 	// Erase
 	//Instantiate the FLASH_EraseInitTypeDef struct needed for the HAL_FLASHEx_Erase() function
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  //Erase type set to sectors
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
	FLASH_EraseInitStruct.Sector = 5;            				//sector 0x0800 C000
 8001792:	2305      	movs	r3, #5
 8001794:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbSectors = 1;                        //The number of sectors
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]

	uint32_t  errorStatus = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 80017a2:	f107 020c 	add.w	r2, r7, #12
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 ff0b 	bl	80055c8 <HAL_FLASHEx_Erase>
	HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f002 ffbc 	bl	8004730 <HAL_Delay>

 	uint8_t FData = 0xAA;
 80017b8:	23aa      	movs	r3, #170	; 0xaa
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	// FLASH->CR &= (FLASH_CR_PG);

 	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,0x08020000, FData);
 80017be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017c2:	2200      	movs	r2, #0
 80017c4:	461c      	mov	r4, r3
 80017c6:	4615      	mov	r5, r2
 80017c8:	4622      	mov	r2, r4
 80017ca:	462b      	mov	r3, r5
 80017cc:	4918      	ldr	r1, [pc, #96]	; (8001830 <ConsoleCommandFlashRW+0x100>)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f003 fd34 	bl	800523c <HAL_FLASH_Program>
 	HAL_Delay(10);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f002 ffab 	bl	8004730 <HAL_Delay>
 	HAL_FLASH_Lock();
 80017da:	f003 fda5 	bl	8005328 <HAL_FLASH_Lock>

 	RData = *RDAddr;
 80017de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 80017ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	000a      	movs	r2, r1
 80017fa:	2300      	movs	r3, #0
 80017fc:	4613      	mov	r3, r2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is now ");
 8001800:	480e      	ldr	r0, [pc, #56]	; (800183c <ConsoleCommandFlashRW+0x10c>)
 8001802:	f000 f935 	bl	8001a70 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe51 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe4d 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <ConsoleCommandFlashRW+0x108>)
 8001818:	f000 f92a 	bl	8001a70 <ConsoleIoSendString>
 	eCommandResult_T result = COMMAND_SUCCESS;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	return result;
 8001822:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8001826:	4618      	mov	r0, r3
 8001828:	3740      	adds	r7, #64	; 0x40
 800182a:	46bd      	mov	sp, r7
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	08020000 	.word	0x08020000
 8001834:	0800b5c4 	.word	0x0800b5c4
 8001838:	0800b5a4 	.word	0x0800b5a4
 800183c:	0800b5d0 	.word	0x0800b5d0

08001840 <ConsoleCommandReadVector>:
static eCommandResult_T ConsoleCommandReadVector(const char buffer[])
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	#define FLASH_FREE_LOCATION 0x08020000
	//read the line vector placed at location
	uint64_t *RDAddr = (uint64_t *) FLASH_FREE_LOCATION;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <ConsoleCommandReadVector+0x58>)
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t RData = *RDAddr;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	617b      	str	r3, [r7, #20]
	uint32_t Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 800185a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	000a      	movs	r2, r1
 8001868:	2300      	movs	r3, #0
 800186a:	4613      	mov	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
	ConsoleIoSendString("Data is ");
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <ConsoleCommandReadVector+0x5c>)
 8001870:	f000 f8fe 	bl	8001a70 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe1a 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe16 	bl	80014b0 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <ConsoleCommandReadVector+0x60>)
 8001886:	f000 f8f3 	bl	8001a70 <ConsoleIoSendString>

 	eCommandResult_T result = COMMAND_SUCCESS;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

	return result;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	08020000 	.word	0x08020000
 800189c:	0800b5c4 	.word	0x0800b5c4
 80018a0:	0800b5a4 	.word	0x0800b5a4

080018a4 <ConsoleCommandSonar>:
static eCommandResult_T ConsoleCommandSonar(const char buffer[])
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint8_t Distance = 200;
 80018ac:	23c8      	movs	r3, #200	; 0xc8
 80018ae:	73fb      	strb	r3, [r7, #15]
	ConsoleIoSendString("Distance is ");
 80018b0:	4815      	ldr	r0, [pc, #84]	; (8001908 <ConsoleCommandSonar+0x64>)
 80018b2:	f000 f8dd 	bl	8001a70 <ConsoleIoSendString>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <ConsoleCommandSonar+0x68>)
 80018be:	f004 fa25 	bl	8005d0c <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 80018c2:	200a      	movs	r0, #10
 80018c4:	f000 fffc 	bl	80028c0 <delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);  // pull the TRIG pin low
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	480f      	ldr	r0, [pc, #60]	; (800190c <ConsoleCommandSonar+0x68>)
 80018d0:	f004 fa1c 	bl	8005d0c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <ConsoleCommandSonar+0x6c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <ConsoleCommandSonar+0x6c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0202 	orr.w	r2, r2, #2
 80018e2:	60da      	str	r2, [r3, #12]
	HAL_Delay(100);
 80018e4:	2064      	movs	r0, #100	; 0x64
 80018e6:	f002 ff23 	bl	8004730 <HAL_Delay>
	ConsoleSendParamInt16(Distance);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fdc7 	bl	8001482 <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <ConsoleCommandSonar+0x70>)
 80018f6:	f000 f8bb 	bl	8001a70 <ConsoleIoSendString>

 	eCommandResult_T result = COMMAND_SUCCESS;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73bb      	strb	r3, [r7, #14]

	return result;
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800b5e0 	.word	0x0800b5e0
 800190c:	40021000 	.word	0x40021000
 8001910:	20000b54 	.word	0x20000b54
 8001914:	0800b5a4 	.word	0x0800b5a4

08001918 <ConsoleCommandParamExampleInt16>:



static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	461a      	mov	r2, r3
 8001926:	2101      	movs	r1, #1
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fc75 	bl	8001218 <ConsoleReceiveParamInt16>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <ConsoleCommandParamExampleInt16+0x58>)
 800193a:	f000 f899 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 800193e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd9d 	bl	8001482 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <ConsoleCommandParamExampleInt16+0x5c>)
 800194a:	f000 f891 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 800194e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fd06 	bl	8001366 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <ConsoleCommandParamExampleInt16+0x60>)
 800195c:	f000 f888 	bl	8001a70 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <ConsoleCommandParamExampleInt16+0x64>)
 8001962:	f000 f885 	bl	8001a70 <ConsoleIoSendString>
	}
	return result;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800b5f0 	.word	0x0800b5f0
 8001974:	0800b600 	.word	0x0800b600
 8001978:	0800b608 	.word	0x0800b608
 800197c:	0800b5a4 	.word	0x0800b5a4

08001980 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	461a      	mov	r2, r3
 800198e:	2101      	movs	r1, #1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fc9f 	bl	80012d4 <ConsoleReceiveParamHexUint16>
 8001996:	4603      	mov	r3, r0
 8001998:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <ConsoleCommandParamExampleHexUint16+0x40>)
 80019a2:	f000 f865 	bl	8001a70 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 80019a6:	89bb      	ldrh	r3, [r7, #12]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fcdc 	bl	8001366 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <ConsoleCommandParamExampleHexUint16+0x44>)
 80019b0:	f000 f85e 	bl	8001a70 <ConsoleIoSendString>
	}
	return result;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	0800b60c 	.word	0x0800b60c
 80019c4:	0800b5a4 	.word	0x0800b5a4

080019c8 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <ConsoleCommandVer+0x24>)
 80019d6:	f000 f84b 	bl	8001a70 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <ConsoleCommandVer+0x28>)
 80019dc:	f000 f848 	bl	8001a70 <ConsoleIoSendString>
	return result;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	0800b61c 	.word	0x0800b61c
 80019f0:	0800b5a4 	.word	0x0800b5a4

080019f4 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <ConsoleCommandsGetTable+0x10>)
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	0800b63c 	.word	0x0800b63c

08001a08 <ConsoleIoInit>:

#include "consoleIo.h"
#include <stdio.h>

eConsoleError ConsoleIoInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]

	// ------- modified ----------
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	82fb      	strh	r3, [r7, #22]
 8001a28:	e010      	b.n	8001a4c <ConsoleIoReceive+0x34>
		if(uart_buf.buf[i] == 0) break;
 8001a2a:	8afb      	ldrh	r3, [r7, #22]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <ConsoleIoReceive+0x54>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	789b      	ldrb	r3, [r3, #2]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00e      	beq.n	8001a54 <ConsoleIoReceive+0x3c>
		buffer[i] = (uint8_t)uart_buf.buf[i];
 8001a36:	8afa      	ldrh	r2, [r7, #22]
 8001a38:	8afb      	ldrh	r3, [r7, #22]
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	490b      	ldr	r1, [pc, #44]	; (8001a6c <ConsoleIoReceive+0x54>)
 8001a40:	440a      	add	r2, r1
 8001a42:	7892      	ldrb	r2, [r2, #2]
 8001a44:	701a      	strb	r2, [r3, #0]
	for(i=0; i<BUF_SIZE; i++) {
 8001a46:	8afb      	ldrh	r3, [r7, #22]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	82fb      	strh	r3, [r7, #22]
 8001a4c:	8afb      	ldrh	r3, [r7, #22]
 8001a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a50:	d9eb      	bls.n	8001a2a <ConsoleIoReceive+0x12>
 8001a52:	e000      	b.n	8001a56 <ConsoleIoReceive+0x3e>
		if(uart_buf.buf[i] == 0) break;
 8001a54:	bf00      	nop
	}
	// -----------------

	*readLength = i;
 8001a56:	8afa      	ldrh	r2, [r7, #22]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]
	//		i++;
	//	}
	//	*readLength = i;
	// ---

	return CONSOLE_SUCCESS;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000033c 	.word	0x2000033c

08001a70 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

	// --------- modified ---------

	// count the size (sizeof didn't work for me, so manually counting)
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8001a78:	2300      	movs	r3, #0
 8001a7a:	81fb      	strh	r3, [r7, #14]
 8001a7c:	e008      	b.n	8001a90 <ConsoleIoSendString+0x20>
		if(buffer[i] == '\0') break;
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <ConsoleIoSendString+0x28>
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	81fb      	strh	r3, [r7, #14]
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	d9f3      	bls.n	8001a7e <ConsoleIoSendString+0xe>
 8001a96:	e000      	b.n	8001a9a <ConsoleIoSendString+0x2a>
		if(buffer[i] == '\0') break;
 8001a98:	bf00      	nop
	}

	// send it
	uint16_t the_size = i;
 8001a9a:	89fb      	ldrh	r3, [r7, #14]
 8001a9c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buffer, the_size, HAL_MAX_DELAY); // TODO: resolve this warning
 8001a9e:	89ba      	ldrh	r2, [r7, #12]
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <ConsoleIoSendString+0x48>)
 8001aa8:	f007 ffc3 	bl	8009a32 <HAL_UART_Transmit>
	// ---------------------------

	return CONSOLE_SUCCESS;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000c2c 	.word	0x20000c2c

08001abc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a73      	ldr	r2, [pc, #460]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a6c      	ldr	r2, [pc, #432]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a50      	ldr	r2, [pc, #320]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	484b      	ldr	r0, [pc, #300]	; (8001cac <MX_GPIO_Init+0x1f0>)
 8001b80:	f004 f8c4 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2101      	movs	r1, #1
 8001b88:	4849      	ldr	r0, [pc, #292]	; (8001cb0 <MX_GPIO_Init+0x1f4>)
 8001b8a:	f004 f8bf 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b94:	4847      	ldr	r0, [pc, #284]	; (8001cb4 <MX_GPIO_Init+0x1f8>)
 8001b96:	f004 f8b9 	bl	8005d0c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	483f      	ldr	r0, [pc, #252]	; (8001cac <MX_GPIO_Init+0x1f0>)
 8001bae:	f003 fe2d 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4838      	ldr	r0, [pc, #224]	; (8001cac <MX_GPIO_Init+0x1f0>)
 8001bca:	f003 fe1f 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001bce:	2332      	movs	r3, #50	; 0x32
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4832      	ldr	r0, [pc, #200]	; (8001cac <MX_GPIO_Init+0x1f0>)
 8001be4:	f003 fe12 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <MX_GPIO_Init+0x1f4>)
 8001c00:	f003 fe04 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4827      	ldr	r0, [pc, #156]	; (8001cb8 <MX_GPIO_Init+0x1fc>)
 8001c1a:	f003 fdf7 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c1e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c22:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <MX_GPIO_Init+0x1f8>)
 8001c38:	f003 fde8 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <MX_GPIO_Init+0x1fc>)
 8001c52:	f003 fddb 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <MX_GPIO_Init+0x1fc>)
 8001c74:	f003 fdca 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <MX_GPIO_Init+0x1f8>)
 8001c8c:	f003 fdbe 	bl	800580c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2006      	movs	r0, #6
 8001c96:	f003 fa08 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c9a:	2006      	movs	r0, #6
 8001c9c:	f003 fa21 	bl	80050e2 <HAL_NVIC_EnableIRQ>

}
 8001ca0:	bf00      	nop
 8001ca2:	3730      	adds	r7, #48	; 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40020000 	.word	0x40020000

08001cbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <MX_I2C1_Init+0x54>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_I2C1_Init+0x58>)
 8001cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cfa:	f004 f839 	bl	8005d70 <HAL_I2C_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d04:	f001 fa42 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000250 	.word	0x20000250
 8001d10:	40005400 	.word	0x40005400
 8001d14:	000186a0 	.word	0x000186a0

08001d18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_I2C_MspInit+0x84>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <HAL_I2C_MspInit+0x8c>)
 8001d74:	f003 fd4a 	bl	800580c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020400 	.word	0x40020400

08001da8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_I2C_MspDeInit+0x38>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10e      	bne.n	8001dd8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_I2C_MspDeInit+0x3c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_I2C_MspDeInit+0x3c>)
 8001dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <HAL_I2C_MspDeInit+0x40>)
 8001dca:	f003 fea3 	bl	8005b14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_I2C_MspDeInit+0x40>)
 8001dd4:	f003 fe9e 	bl	8005b14 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020400 	.word	0x40020400

08001dec <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <MX_I2S2_Init+0x54>)
 8001df4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <MX_I2S2_Init+0x58>)
 8001e14:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_I2S2_Init+0x50>)
 8001e2a:	f004 ff9f 	bl	8006d6c <HAL_I2S_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001e34:	f001 f9aa 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200002a4 	.word	0x200002a4
 8001e40:	40003800 	.word	0x40003800
 8001e44:	00017700 	.word	0x00017700

08001e48 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <MX_I2S3_Init+0x58>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e58:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <MX_I2S3_Init+0x5c>)
 8001e72:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_I2S3_Init+0x54>)
 8001e88:	f004 ff70 	bl	8006d6c <HAL_I2S_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001e92:	f001 f97b 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200002ec 	.word	0x200002ec
 8001ea0:	40003c00 	.word	0x40003c00
 8001ea4:	00017700 	.word	0x00017700

08001ea8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a59      	ldr	r2, [pc, #356]	; (800202c <HAL_I2S_MspInit+0x184>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d15b      	bne.n	8001f82 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b55      	ldr	r3, [pc, #340]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a50      	ldr	r2, [pc, #320]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001f2e:	2306      	movs	r3, #6
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	483e      	ldr	r0, [pc, #248]	; (8002034 <HAL_I2S_MspInit+0x18c>)
 8001f3a:	f003 fc67 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	4619      	mov	r1, r3
 8001f58:	4836      	ldr	r0, [pc, #216]	; (8002034 <HAL_I2S_MspInit+0x18c>)
 8001f5a:	f003 fc57 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001f5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f70:	2305      	movs	r3, #5
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	482f      	ldr	r0, [pc, #188]	; (8002038 <HAL_I2S_MspInit+0x190>)
 8001f7c:	f003 fc46 	bl	800580c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001f80:	e04f      	b.n	8002022 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_I2S_MspInit+0x194>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d14a      	bne.n	8002022 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_I2S_MspInit+0x188>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4811      	ldr	r0, [pc, #68]	; (8002040 <HAL_I2S_MspInit+0x198>)
 8001ffc:	f003 fc06 	bl	800580c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002000:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002012:	2306      	movs	r3, #6
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_I2S_MspInit+0x18c>)
 800201e:	f003 fbf5 	bl	800580c <HAL_GPIO_Init>
}
 8002022:	bf00      	nop
 8002024:	3738      	adds	r7, #56	; 0x38
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40003800 	.word	0x40003800
 8002030:	40023800 	.word	0x40023800
 8002034:	40020800 	.word	0x40020800
 8002038:	40020400 	.word	0x40020400
 800203c:	40003c00 	.word	0x40003c00
 8002040:	40020000 	.word	0x40020000

08002044 <input_buf_reset>:
// https://github.com/dekuNukem/STM32_tutorials/tree/master/lesson3_serial_recv_interrupt

#include "input_buf.h"
#include <string.h> // memset is declared here

void input_buf_reset(input_buf *ib) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <input_buf_reset+0x24>
	ib->curr_index = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
	memset(ib->buf, 0, BUF_SIZE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3302      	adds	r3, #2
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f008 fd3f 	bl	800aae4 <memset>
 8002066:	e000      	b.n	800206a <input_buf_reset+0x26>
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8002068:	bf00      	nop
}
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <input_buf_add>:

void input_buf_add(input_buf *ib, uint8_t c) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
	if(NULL == ib) return;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01a      	beq.n	80020b8 <input_buf_add+0x48>
	ib->buf[ib->curr_index] = c;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	709a      	strb	r2, [r3, #2]
	if(ib->curr_index < BUF_SIZE-1) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	2b7e      	cmp	r3, #126	; 0x7e
 800209a:	dc09      	bgt.n	80020b0 <input_buf_add+0x40>
		ib->curr_index = ib->curr_index+1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e004      	b.n	80020ba <input_buf_add+0x4a>
	} else {
		input_buf_reset(ib);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffc7 	bl	8002044 <input_buf_reset>
 80020b6:	e000      	b.n	80020ba <input_buf_add+0x4a>
	if(NULL == ib) return;
 80020b8:	bf00      	nop
	}
}
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <input_buf_ready>:

uint8_t input_buf_ready(input_buf *ib) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return 0;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <input_buf_ready+0x12>
 80020ce:	2300      	movs	r3, #0
 80020d0:	e014      	b.n	80020fc <input_buf_ready+0x3c>
	if(ib->buf[ib->curr_index-1] == '\n' || ib->buf[ib->curr_index-1] == '\r') {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d8:	3b01      	subs	r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	2b0a      	cmp	r3, #10
 80020e2:	d008      	beq.n	80020f6 <input_buf_ready+0x36>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	789b      	ldrb	r3, [r3, #2]
 80020f2:	2b0d      	cmp	r3, #13
 80020f4:	d101      	bne.n	80020fa <input_buf_ready+0x3a>
		return 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <input_buf_ready+0x3c>
	}
	return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// uart interrupt callback
// huart2 defined in usart.c, generated from cubemx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	c = uart_byte_buf[0];
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_UART_RxCpltCallback+0x34>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_UART_RxCpltCallback+0x38>)
 8002116:	701a      	strb	r2, [r3, #0]
	echo = true;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_UART_RxCpltCallback+0x3c>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
	input_buf_add(&uart_buf, uart_byte_buf[0]);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_UART_RxCpltCallback+0x34>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <HAL_UART_RxCpltCallback+0x40>)
 8002126:	f7ff ffa3 	bl	8002070 <input_buf_add>
	HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 800212a:	2201      	movs	r2, #1
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_UART_RxCpltCallback+0x34>)
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <HAL_UART_RxCpltCallback+0x44>)
 8002130:	f007 fd11 	bl	8009b56 <HAL_UART_Receive_IT>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000338 	.word	0x20000338
 8002140:	200003be 	.word	0x200003be
 8002144:	200003bf 	.word	0x200003bf
 8002148:	2000033c 	.word	0x2000033c
 800214c:	20000c2c 	.word	0x20000c2c

08002150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002154:	f002 fa7a 	bl	800464c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002158:	f000 f8ae 	bl	80022b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800215c:	f000 f914 	bl	8002388 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_ACCELERO_Init();
 8002160:	f002 f920 	bl	80043a4 <BSP_ACCELERO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002164:	f7ff fcaa 	bl	8001abc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002168:	f7ff fda8 	bl	8001cbc <MX_I2C1_Init>
  MX_I2S2_Init();
 800216c:	f7ff fe3e 	bl	8001dec <MX_I2S2_Init>
  MX_I2S3_Init();
 8002170:	f7ff fe6a 	bl	8001e48 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002174:	f001 f810 	bl	8003198 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002178:	f001 fb68 	bl	800384c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800217c:	f001 f940 	bl	8003400 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002180:	f001 f9a0 	bl	80034c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002184:	f001 f9ea 	bl	800355c <MX_TIM3_Init>
  MX_ADC1_Init();
 8002188:	f7fe fdea 	bl	8000d60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 800218c:	f7fe ff28 	bl	8000fe0 <ConsoleInit>
  input_buf_reset(&uart_buf);
 8002190:	483c      	ldr	r0, [pc, #240]	; (8002284 <main+0x134>)
 8002192:	f7ff ff57 	bl	8002044 <input_buf_reset>
  HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	493b      	ldr	r1, [pc, #236]	; (8002288 <main+0x138>)
 800219a:	483c      	ldr	r0, [pc, #240]	; (800228c <main+0x13c>)
 800219c:	f007 fcdb 	bl	8009b56 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80021a0:	483b      	ldr	r0, [pc, #236]	; (8002290 <main+0x140>)
 80021a2:	f006 f925 	bl	80083f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80021a6:	483b      	ldr	r0, [pc, #236]	; (8002294 <main+0x144>)
 80021a8:	f006 f922 	bl	80083f0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021ac:	2100      	movs	r1, #0
 80021ae:	483a      	ldr	r0, [pc, #232]	; (8002298 <main+0x148>)
 80021b0:	f006 f9d2 	bl	8008558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80021b4:	2104      	movs	r1, #4
 80021b6:	4838      	ldr	r0, [pc, #224]	; (8002298 <main+0x148>)
 80021b8:	f006 f9ce 	bl	8008558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80021bc:	2108      	movs	r1, #8
 80021be:	4836      	ldr	r0, [pc, #216]	; (8002298 <main+0x148>)
 80021c0:	f006 f9ca 	bl	8008558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80021c4:	210c      	movs	r1, #12
 80021c6:	4834      	ldr	r0, [pc, #208]	; (8002298 <main+0x148>)
 80021c8:	f006 f9c6 	bl	8008558 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80021cc:	2100      	movs	r1, #0
 80021ce:	4830      	ldr	r0, [pc, #192]	; (8002290 <main+0x140>)
 80021d0:	f006 fac2 	bl	8008758 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80021d4:	2104      	movs	r1, #4
 80021d6:	482e      	ldr	r0, [pc, #184]	; (8002290 <main+0x140>)
 80021d8:	f006 fabe 	bl	8008758 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80021dc:	2108      	movs	r1, #8
 80021de:	482c      	ldr	r0, [pc, #176]	; (8002290 <main+0x140>)
 80021e0:	f006 faba 	bl	8008758 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */

  // infinite loop state machine
  while(1)
  {
	  switch(op_mode)
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <main+0x14c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d8fb      	bhi.n	80021e4 <main+0x94>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <main+0xa4>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002209 	.word	0x08002209
 80021f8:	0800221d 	.word	0x0800221d
 80021fc:	0800222b 	.word	0x0800222b
 8002200:	08002243 	.word	0x08002243
 8002204:	08002273 	.word	0x08002273
	  {
	  case mode_cli:
		  cli_check();
 8002208:	f000 f8de 	bl	80023c8 <cli_check>
			if(button_pressed != 0)
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <main+0x150>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d034      	beq.n	800227e <main+0x12e>
			{
				op_mode = mode_local;
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <main+0x14c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
			}
		  break;
 800221a:	e030      	b.n	800227e <main+0x12e>
	  case mode_local:
		  //find where I am if first time
		  // eCompass to set direction, for now, origin is North relative
		  current_heading = north;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <main+0x154>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
		  op_mode = mode_moving;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <main+0x14c>)
 8002224:	2202      	movs	r2, #2
 8002226:	701a      	strb	r2, [r3, #0]
		  break;
 8002228:	e02a      	b.n	8002280 <main+0x130>
	  case mode_moving:
		  if(demo_mode)
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <main+0x158>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <main+0xe8>
		  {
			  demo_drive();
 8002232:	f000 fdc5 	bl	8002dc0 <demo_drive>
		  else
		  {
			  check_sonar();
			  wall_follow();
		  }
		  break;
 8002236:	e023      	b.n	8002280 <main+0x130>
			  check_sonar();
 8002238:	f000 fdae 	bl	8002d98 <check_sonar>
			  wall_follow();
 800223c:	f000 fc80 	bl	8002b40 <wall_follow>
		  break;
 8002240:	e01e      	b.n	8002280 <main+0x130>
	  case mode_sensing:
		  origin_check();
 8002242:	f000 fd4f 	bl	8002ce4 <origin_check>
		  gas_values[x_loc][y_loc] = read_gas();
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <main+0x15c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461c      	mov	r4, r3
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <main+0x160>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461d      	mov	r5, r3
 8002252:	f000 ff83 	bl	800315c <read_gas>
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <main+0x164>)
 800225c:	4623      	mov	r3, r4
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1b1b      	subs	r3, r3, r4
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	442b      	add	r3, r5
 8002266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  op_mode = mode_moving;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <main+0x14c>)
 800226c:	2202      	movs	r2, #2
 800226e:	701a      	strb	r2, [r3, #0]
		  break;
 8002270:	e006      	b.n	8002280 <main+0x130>
	  case mode_measure:
		  linear_reg(2);
 8002272:	2002      	movs	r0, #2
 8002274:	f000 fe8a 	bl	8002f8c <linear_reg>
		  cli_check();
 8002278:	f000 f8a6 	bl	80023c8 <cli_check>
		  break;
 800227c:	e000      	b.n	8002280 <main+0x130>
		  break;
 800227e:	bf00      	nop
	  switch(op_mode)
 8002280:	e7b0      	b.n	80021e4 <main+0x94>
 8002282:	bf00      	nop
 8002284:	2000033c 	.word	0x2000033c
 8002288:	20000338 	.word	0x20000338
 800228c:	20000c2c 	.word	0x20000c2c
 8002290:	20000b54 	.word	0x20000b54
 8002294:	20000b9c 	.word	0x20000b9c
 8002298:	20000be4 	.word	0x20000be4
 800229c:	20000334 	.word	0x20000334
 80022a0:	20000335 	.word	0x20000335
 80022a4:	20000336 	.word	0x20000336
 80022a8:	20000af6 	.word	0x20000af6
 80022ac:	20000af4 	.word	0x20000af4
 80022b0:	20000af5 	.word	0x20000af5
 80022b4:	200003ec 	.word	0x200003ec

080022b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b094      	sub	sp, #80	; 0x50
 80022bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022be:	f107 0320 	add.w	r3, r7, #32
 80022c2:	2230      	movs	r2, #48	; 0x30
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f008 fc0c 	bl	800aae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <SystemClock_Config+0xc8>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <SystemClock_Config+0xc8>)
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <SystemClock_Config+0xc8>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <SystemClock_Config+0xcc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <SystemClock_Config+0xcc>)
 8002302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <SystemClock_Config+0xcc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002314:	2301      	movs	r3, #1
 8002316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231e:	2302      	movs	r3, #2
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002328:	2304      	movs	r3, #4
 800232a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800232c:	23c0      	movs	r3, #192	; 0xc0
 800232e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002330:	2304      	movs	r3, #4
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002334:	2308      	movs	r3, #8
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4618      	mov	r0, r3
 800233e:	f005 f997 	bl	8007670 <HAL_RCC_OscConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002348:	f000 ff20 	bl	800318c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234c:	230f      	movs	r3, #15
 800234e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002350:	2302      	movs	r3, #2
 8002352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002358:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800235c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	2103      	movs	r1, #3
 8002368:	4618      	mov	r0, r3
 800236a:	f005 fbf9 	bl	8007b60 <HAL_RCC_ClockConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002374:	f000 ff0a 	bl	800318c <Error_Handler>
  }
}
 8002378:	bf00      	nop
 800237a:	3750      	adds	r7, #80	; 0x50
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800239e:	2301      	movs	r3, #1
 80023a0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80023a2:	23c8      	movs	r3, #200	; 0xc8
 80023a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80023a6:	2305      	movs	r3, #5
 80023a8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023aa:	2302      	movs	r3, #2
 80023ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ae:	463b      	mov	r3, r7
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fdf5 	bl	8007fa0 <HAL_RCCEx_PeriphCLKConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80023bc:	f000 fee6 	bl	800318c <Error_Handler>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <cli_check>:

/* USER CODE BEGIN 4 */
void cli_check(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 	if(echo) {
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <cli_check+0x8c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <cli_check+0x30>
		sprintf((char*)buf, "%c", c);
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <cli_check+0x90>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	491f      	ldr	r1, [pc, #124]	; (800245c <cli_check+0x94>)
 80023de:	4820      	ldr	r0, [pc, #128]	; (8002460 <cli_check+0x98>)
 80023e0:	f008 fb88 	bl	800aaf4 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e8:	2201      	movs	r2, #1
 80023ea:	491d      	ldr	r1, [pc, #116]	; (8002460 <cli_check+0x98>)
 80023ec:	481d      	ldr	r0, [pc, #116]	; (8002464 <cli_check+0x9c>)
 80023ee:	f007 fb20 	bl	8009a32 <HAL_UART_Transmit>
  		echo = false;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <cli_check+0x8c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  	}

  	if(input_buf_ready(&uart_buf)) {
 80023f8:	481b      	ldr	r0, [pc, #108]	; (8002468 <cli_check+0xa0>)
 80023fa:	f7ff fe61 	bl	80020c0 <input_buf_ready>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d022      	beq.n	800244a <cli_check+0x82>
  		// remove the c in sprintf((char*)buf, "\r\n", c);
  		sprintf((char*)buf, "\r\n", c);
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <cli_check+0x90>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4918      	ldr	r1, [pc, #96]	; (800246c <cli_check+0xa4>)
 800240c:	4814      	ldr	r0, [pc, #80]	; (8002460 <cli_check+0x98>)
 800240e:	f008 fb71 	bl	800aaf4 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY);
 8002412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002416:	2202      	movs	r2, #2
 8002418:	4911      	ldr	r1, [pc, #68]	; (8002460 <cli_check+0x98>)
 800241a:	4812      	ldr	r0, [pc, #72]	; (8002464 <cli_check+0x9c>)
 800241c:	f007 fb09 	bl	8009a32 <HAL_UART_Transmit>
			ConsoleProcess();
 8002420:	f7fe fe0c 	bl	800103c <ConsoleProcess>
			input_buf_reset(&uart_buf);
 8002424:	4810      	ldr	r0, [pc, #64]	; (8002468 <cli_check+0xa0>)
 8002426:	f7ff fe0d 	bl	8002044 <input_buf_reset>
			// unsure why console.c doesn't clear, so let's clear it here
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 800242a:	2300      	movs	r3, #0
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	e006      	b.n	800243e <cli_check+0x76>
				mReceiveBuffer[i] = 0;
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <cli_check+0xa8>)
 8002434:	2100      	movs	r1, #0
 8002436:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	3301      	adds	r3, #1
 800243c:	80fb      	strh	r3, [r7, #6]
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2bff      	cmp	r3, #255	; 0xff
 8002442:	d9f5      	bls.n	8002430 <cli_check+0x68>
			}
			mReceivedSoFar = 0;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <cli_check+0xac>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
		}
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200003bf 	.word	0x200003bf
 8002458:	200003be 	.word	0x200003be
 800245c:	0800b634 	.word	0x0800b634
 8002460:	200003c0 	.word	0x200003c0
 8002464:	20000c2c 	.word	0x20000c2c
 8002468:	2000033c 	.word	0x2000033c
 800246c:	0800b638 	.word	0x0800b638
 8002470:	20000148 	.word	0x20000148
 8002474:	20000248 	.word	0x20000248

08002478 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */
// Sonar Calls for each direction
// FUTURE simplify and use different Trigger pins for each
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 8083 	bne.w	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800248a:	4b99      	ldr	r3, [pc, #612]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 fda7 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 800249a:	4603      	mov	r3, r0
 800249c:	4a95      	ldr	r2, [pc, #596]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800249e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80024a0:	4b93      	ldr	r3, [pc, #588]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020a 	bic.w	r2, r2, #10
 80024b4:	621a      	str	r2, [r3, #32]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0202 	orr.w	r2, r2, #2
 80024c4:	621a      	str	r2, [r3, #32]
 80024c6:	e063      	b.n	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 80024c8:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d15f      	bne.n	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f006 fd88 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80024dc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 80024e6:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d907      	bls.n	8002502 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference = IC_Val2-IC_Val1;
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a7f      	ldr	r2, [pc, #508]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e00f      	b.n	8002522 <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2)
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d909      	bls.n	8002522 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800250e:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b78      	ldr	r3, [pc, #480]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800251c:	33ff      	adds	r3, #255	; 0xff
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 8002520:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd ffec 	bl	8000504 <__aeabi_ui2d>
 800252c:	a36e      	add	r3, pc, #440	; (adr r3, 80026e8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f861 	bl	80005f8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002546:	f7fe f981 	bl	800084c <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fa63 	bl	8000a1c <__aeabi_d2uiz>
 8002556:	4603      	mov	r3, r0
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b69      	ldr	r3, [pc, #420]	; (8002700 <HAL_TIM_IC_CaptureCallback+0x288>)
 800255c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800255e:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 020a 	bic.w	r2, r2, #10
 8002572:	621a      	str	r2, [r3, #32]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a12      	ldr	r2, [r2, #32]
 800257e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8002580:	4b60      	ldr	r3, [pc, #384]	; (8002704 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0202 	bic.w	r2, r2, #2
 800258e:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7f1b      	ldrb	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	f040 8083 	bne.w	80026a0 <HAL_TIM_IC_CaptureCallback+0x228>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800259a:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11a      	bne.n	80025d8 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80025a2:	2104      	movs	r1, #4
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f006 fd1f 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80025ae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80025b0:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025c4:	621a      	str	r2, [r3, #32]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	621a      	str	r2, [r3, #32]
 80025d6:	e063      	b.n	80026a0 <HAL_TIM_IC_CaptureCallback+0x228>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 80025d8:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d15f      	bne.n	80026a0 <HAL_TIM_IC_CaptureCallback+0x228>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80025e0:	2104      	movs	r1, #4
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f006 fd00 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4a43      	ldr	r2, [pc, #268]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80025ec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d907      	bls.n	8002612 <HAL_TIM_IC_CaptureCallback+0x19a>
			{
				Difference = IC_Val2-IC_Val1;
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e00f      	b.n	8002632 <HAL_TIM_IC_CaptureCallback+0x1ba>
			}

			else if (IC_Val1 > IC_Val2)
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d909      	bls.n	8002632 <HAL_TIM_IC_CaptureCallback+0x1ba>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800262c:	33ff      	adds	r3, #255	; 0xff
 800262e:	4a33      	ldr	r2, [pc, #204]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 8002630:	6013      	str	r3, [r2, #0]
			}

			DistanceR = Difference * .034/2;
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_TIM_IC_CaptureCallback+0x284>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff64 	bl	8000504 <__aeabi_ui2d>
 800263c:	a32a      	add	r3, pc, #168	; (adr r3, 80026e8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ffd9 	bl	80005f8 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002656:	f7fe f8f9 	bl	800084c <__aeabi_ddiv>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe f9db 	bl	8000a1c <__aeabi_d2uiz>
 8002666:	4603      	mov	r3, r0
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x290>)
 800266c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a12      	ldr	r2, [r2, #32]
 800268e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7f1b      	ldrb	r3, [r3, #28]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	f040 8095 	bne.w	80027d4 <HAL_TIM_IC_CaptureCallback+0x35c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d12c      	bne.n	800270c <HAL_TIM_IC_CaptureCallback+0x294>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 80026b2:	2108      	movs	r1, #8
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 fc97 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80026be:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80026d4:	621a      	str	r2, [r3, #32]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
		}
	}
}
 80026e6:	e075      	b.n	80027d4 <HAL_TIM_IC_CaptureCallback+0x35c>
 80026e8:	b020c49c 	.word	0xb020c49c
 80026ec:	3fa16872 	.word	0x3fa16872
 80026f0:	200003e8 	.word	0x200003e8
 80026f4:	200003dc 	.word	0x200003dc
 80026f8:	200003e0 	.word	0x200003e0
 80026fc:	200003e4 	.word	0x200003e4
 8002700:	200003e9 	.word	0x200003e9
 8002704:	20000b54 	.word	0x20000b54
 8002708:	200003ea 	.word	0x200003ea
		else if (Is_First_Captured==1)   // if the first is already captured
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x370>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d15f      	bne.n	80027d4 <HAL_TIM_IC_CaptureCallback+0x35c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8002714:	2108      	movs	r1, #8
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f006 fc66 	bl	8008fe8 <HAL_TIM_ReadCapturedValue>
 800271c:	4603      	mov	r3, r0
 800271e:	4a33      	ldr	r2, [pc, #204]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x374>)
 8002720:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x374>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d907      	bls.n	8002746 <HAL_TIM_IC_CaptureCallback+0x2ce>
				Difference = IC_Val2-IC_Val1;
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x374>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x378>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e00f      	b.n	8002766 <HAL_TIM_IC_CaptureCallback+0x2ee>
			else if (IC_Val1 > IC_Val2)
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x374>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d909      	bls.n	8002766 <HAL_TIM_IC_CaptureCallback+0x2ee>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x374>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002760:	33ff      	adds	r3, #255	; 0xff
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002764:	6013      	str	r3, [r2, #0]
			DistanceL = Difference * .034/2;
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd feca 	bl	8000504 <__aeabi_ui2d>
 8002770:	a31b      	add	r3, pc, #108	; (adr r3, 80027e0 <HAL_TIM_IC_CaptureCallback+0x368>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff3f 	bl	80005f8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800278a:	f7fe f85f 	bl	800084c <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe f941 	bl	8000a1c <__aeabi_d2uiz>
 800279a:	4603      	mov	r3, r0
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_TIM_IC_CaptureCallback+0x380>)
 80027a0:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80027b6:	621a      	str	r2, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a12      	ldr	r2, [r2, #32]
 80027c2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_TIM_IC_CaptureCallback+0x384>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_TIM_IC_CaptureCallback+0x384>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0208 	bic.w	r2, r2, #8
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	f3af 8000 	nop.w
 80027e0:	b020c49c 	.word	0xb020c49c
 80027e4:	3fa16872 	.word	0x3fa16872
 80027e8:	200003e8 	.word	0x200003e8
 80027ec:	200003e0 	.word	0x200003e0
 80027f0:	200003dc 	.word	0x200003dc
 80027f4:	200003e4 	.word	0x200003e4
 80027f8:	200003eb 	.word	0x200003eb
 80027fc:	20000b54 	.word	0x20000b54

08002800 <HCSR04_Read>:
void HCSR04_Read (void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <HCSR04_Read+0x38>)
 800280c:	f003 fa7e 	bl	8005d0c <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8002810:	200a      	movs	r0, #10
 8002812:	f000 f855 	bl	80028c0 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800281c:	4806      	ldr	r0, [pc, #24]	; (8002838 <HCSR04_Read+0x38>)
 800281e:	f003 fa75 	bl	8005d0c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HCSR04_Read+0x3c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HCSR04_Read+0x3c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0202 	orr.w	r2, r2, #2
 8002830:	60da      	str	r2, [r3, #12]

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	20000b54 	.word	0x20000b54

08002840 <HCSR04_ReadRight>:

void HCSR04_ReadRight (void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <HCSR04_ReadRight+0x38>)
 800284c:	f003 fa5e 	bl	8005d0c <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8002850:	200a      	movs	r0, #10
 8002852:	f000 f835 	bl	80028c0 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <HCSR04_ReadRight+0x38>)
 800285e:	f003 fa55 	bl	8005d0c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HCSR04_ReadRight+0x3c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <HCSR04_ReadRight+0x3c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0204 	orr.w	r2, r2, #4
 8002870:	60da      	str	r2, [r3, #12]


}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	20000b54 	.word	0x20000b54

08002880 <HCSR04_ReadLeft>:

void HCSR04_ReadLeft (void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288a:	480b      	ldr	r0, [pc, #44]	; (80028b8 <HCSR04_ReadLeft+0x38>)
 800288c:	f003 fa3e 	bl	8005d0c <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8002890:	200a      	movs	r0, #10
 8002892:	f000 f815 	bl	80028c0 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289c:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HCSR04_ReadLeft+0x38>)
 800289e:	f003 fa35 	bl	8005d0c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HCSR04_ReadLeft+0x3c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <HCSR04_ReadLeft+0x3c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0208 	orr.w	r2, r2, #8
 80028b0:	60da      	str	r2, [r3, #12]

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	20000b54 	.word	0x20000b54

080028c0 <delay_us>:

// Timer for ultrasonic echo
void delay_us(uint16_t us)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <delay_us+0x30>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80028d2:	bf00      	nop
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <delay_us+0x30>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3f9      	bcc.n	80028d4 <delay_us+0x14>
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000b9c 	.word	0x20000b9c

080028f4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
	currentMs = HAL_GetTick();
 80028fe:	f001 ff0b 	bl	8004718 <HAL_GetTick>
 8002902:	4603      	mov	r3, r0
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_GPIO_EXTI_Callback+0x68>)
 8002906:	6013      	str	r3, [r2, #0]
	if((GPIO_Pin == GPIO_PIN_0) && (currentMs - previousMs > 10) ){
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11e      	bne.n	800294c <HAL_GPIO_EXTI_Callback+0x58>
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_GPIO_EXTI_Callback+0x68>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b0a      	cmp	r3, #10
 800291a:	d917      	bls.n	800294c <HAL_GPIO_EXTI_Callback+0x58>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)){
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	4619      	mov	r1, r3
 8002920:	4810      	ldr	r0, [pc, #64]	; (8002964 <HAL_GPIO_EXTI_Callback+0x70>)
 8002922:	f003 f9db 	bl	8005cdc <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <HAL_GPIO_EXTI_Callback+0x4c>
			// Rising
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <HAL_GPIO_EXTI_Callback+0x74>)
 8002934:	f003 f9ea 	bl	8005d0c <HAL_GPIO_WritePin>
			button_pressed = true; // exit cli mode
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_GPIO_EXTI_Callback+0x78>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e005      	b.n	800294c <HAL_GPIO_EXTI_Callback+0x58>
		}
		else{
			// Falling
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <HAL_GPIO_EXTI_Callback+0x74>)
 8002948:	f003 f9e0 	bl	8005d0c <HAL_GPIO_WritePin>
		}
	}
	previousMs = currentMs;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_GPIO_EXTI_Callback+0x68>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a03      	ldr	r2, [pc, #12]	; (8002960 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200003d8 	.word	0x200003d8
 8002960:	200003d4 	.word	0x200003d4
 8002964:	40020000 	.word	0x40020000
 8002968:	40020c00 	.word	0x40020c00
 800296c:	20000335 	.word	0x20000335

08002970 <straight>:

void straight(uint16_t ms_time)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = speed;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <straight+0x58>)
 800297c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <straight+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = speed_R;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <straight+0x58>)
 800298a:	f246 0218 	movw	r2, #24600	; 0x6018
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <straight+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(ms_time);
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fec9 	bl	8004730 <HAL_Delay>
	  TIM3->CCR1 = 0;
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <straight+0x58>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <straight+0x58>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <straight+0x58>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <straight+0x58>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1000);
 80029b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ba:	f001 feb9 	bl	8004730 <HAL_Delay>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40000400 	.word	0x40000400

080029cc <left>:
void left(uint16_t ms_time)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = 0;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <left+0x58>)
 80029d8:	2200      	movs	r2, #0
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = speed;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <left+0x58>)
 80029de:	f247 5230 	movw	r2, #30000	; 0x7530
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = speed_R;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <left+0x58>)
 80029e6:	f246 0218 	movw	r2, #24600	; 0x6018
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <left+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(ms_time);
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fe9b 	bl	8004730 <HAL_Delay>
	  TIM3->CCR1 = 0;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <left+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <left+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <left+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <left+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1000);
 8002a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a16:	f001 fe8b 	bl	8004730 <HAL_Delay>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40000400 	.word	0x40000400

08002a28 <right>:
void right(uint16_t ms_time)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = speed;
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <right+0x58>)
 8002a34:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <right+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <right+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = speed_R;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <right+0x58>)
 8002a48:	f246 0218 	movw	r2, #24600	; 0x6018
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(ms_time);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fe6d 	bl	8004730 <HAL_Delay>
	  TIM3->CCR1 = 0;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <right+0x58>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <right+0x58>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <right+0x58>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <right+0x58>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1000);
 8002a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a72:	f001 fe5d 	bl	8004730 <HAL_Delay>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40000400 	.word	0x40000400

08002a84 <back>:
void back(uint16_t ms_time)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
	  TIM3->CCR1 = 0;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <back+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = speed;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <back+0x58>)
 8002a96:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <back+0x58>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = speed_R;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <back+0x58>)
 8002aa4:	f246 0218 	movw	r2, #24600	; 0x6018
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(ms_time);
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 fe3f 	bl	8004730 <HAL_Delay>
	  TIM3->CCR1 = 0;
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <back+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR3 = 0;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <back+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR2 = 0;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <back+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR4 = 0;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <back+0x58>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1000);
 8002aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ace:	f001 fe2f 	bl	8004730 <HAL_Delay>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40000400 	.word	0x40000400

08002ae0 <heading_left>:
void heading_left(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
	if(current_heading == 0)
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <heading_left+0x2c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <heading_left+0x14>
	{
		current_heading = 3;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <heading_left+0x2c>)
 8002aee:	2203      	movs	r2, #3
 8002af0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		current_heading--;
	}
}
 8002af2:	e005      	b.n	8002b00 <heading_left+0x20>
		current_heading--;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <heading_left+0x2c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <heading_left+0x2c>)
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000336 	.word	0x20000336

08002b10 <heading_right>:
void heading_right(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	if(current_heading == 3)
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <heading_right+0x2c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d103      	bne.n	8002b24 <heading_right+0x14>
	{
		current_heading = 0;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <heading_right+0x2c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		current_heading++;
	}
}
 8002b22:	e005      	b.n	8002b30 <heading_right+0x20>
		current_heading++;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <heading_right+0x2c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <heading_right+0x2c>)
 8002b2e:	701a      	strb	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000336 	.word	0x20000336

08002b40 <wall_follow>:

void wall_follow(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0

	  if(DistanceR > wall_space && !block)
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <wall_follow+0xa4>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <wall_follow+0xa8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d91b      	bls.n	8002b8a <wall_follow+0x4a>
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <wall_follow+0xac>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <wall_follow+0x4a>
	  {
		  // if an open to the right go there
		  right(turn_time);
 8002b60:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5f 	bl	8002a28 <right>
		  heading_right();
 8002b6a:	f7ff ffd1 	bl	8002b10 <heading_right>
		  straight(forward_time); // unit must go forward or it will circle
 8002b6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fefc 	bl	8002970 <straight>
		  block = 0;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <wall_follow+0xac>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
		  update_heading();
 8002b7e:	f000 f83d 	bl	8002bfc <update_heading>
		  op_mode = mode_sensing;
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <wall_follow+0xb0>)
 8002b84:	2203      	movs	r2, #3
 8002b86:	701a      	strb	r2, [r3, #0]
		  block = 1;
		  // update grid location
		  update_heading_back();
	  }

}
 8002b88:	e02a      	b.n	8002be0 <wall_follow+0xa0>
	  else if(Distance > 30)
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <wall_follow+0xb4>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b1e      	cmp	r3, #30
 8002b90:	d90d      	bls.n	8002bae <wall_follow+0x6e>
		  straight(forward_time);
 8002b92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff feea 	bl	8002970 <straight>
		  block = 0;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <wall_follow+0xac>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
		  update_heading();
 8002ba2:	f000 f82b 	bl	8002bfc <update_heading>
		  op_mode = mode_sensing;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <wall_follow+0xb0>)
 8002ba8:	2203      	movs	r2, #3
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	e018      	b.n	8002be0 <wall_follow+0xa0>
	  else if(DistanceL > 60)
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <wall_follow+0xb8>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b3c      	cmp	r3, #60	; 0x3c
 8002bb4:	d90a      	bls.n	8002bcc <wall_follow+0x8c>
		  left(turn_time);
 8002bb6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff06 	bl	80029cc <left>
		  block = 0;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <wall_follow+0xac>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
		  heading_left();
 8002bc6:	f7ff ff8b 	bl	8002ae0 <heading_left>
}
 8002bca:	e009      	b.n	8002be0 <wall_follow+0xa0>
		  back(forward_time);
 8002bcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff57 	bl	8002a84 <back>
		  block = 1;
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <wall_follow+0xac>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		  update_heading_back();
 8002bdc:	f000 f848 	bl	8002c70 <update_heading_back>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200003ea 	.word	0x200003ea
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000337 	.word	0x20000337
 8002bf0:	20000334 	.word	0x20000334
 8002bf4:	200003e9 	.word	0x200003e9
 8002bf8:	200003eb 	.word	0x200003eb

08002bfc <update_heading>:
void update_heading(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	switch(current_heading)
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <update_heading+0x68>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d827      	bhi.n	8002c58 <update_heading+0x5c>
 8002c08:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <update_heading+0x14>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c2f 	.word	0x08002c2f
 8002c18:	08002c3d 	.word	0x08002c3d
 8002c1c:	08002c4b 	.word	0x08002c4b
	{
	  case north:
		  x_loc++;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <update_heading+0x6c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <update_heading+0x6c>)
 8002c2a:	701a      	strb	r2, [r3, #0]
		  break;
 8002c2c:	e014      	b.n	8002c58 <update_heading+0x5c>
	  case east:
		  y_loc--;
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <update_heading+0x70>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <update_heading+0x70>)
 8002c38:	701a      	strb	r2, [r3, #0]
		  break;
 8002c3a:	e00d      	b.n	8002c58 <update_heading+0x5c>
	  case south:
		  x_loc--;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <update_heading+0x6c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <update_heading+0x6c>)
 8002c46:	701a      	strb	r2, [r3, #0]
		  break;
 8002c48:	e006      	b.n	8002c58 <update_heading+0x5c>
	  case west:
		  y_loc++;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <update_heading+0x70>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <update_heading+0x70>)
 8002c54:	701a      	strb	r2, [r3, #0]
		  break;
 8002c56:	bf00      	nop
	}
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000336 	.word	0x20000336
 8002c68:	20000af4 	.word	0x20000af4
 8002c6c:	20000af5 	.word	0x20000af5

08002c70 <update_heading_back>:
void update_heading_back(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	  switch(current_heading)
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <update_heading_back+0x68>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d827      	bhi.n	8002ccc <update_heading_back+0x5c>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <update_heading_back+0x14>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002ca3 	.word	0x08002ca3
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cbf 	.word	0x08002cbf
	  {
		  case north:
			  x_loc--;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <update_heading_back+0x6c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <update_heading_back+0x6c>)
 8002c9e:	701a      	strb	r2, [r3, #0]
			  break;
 8002ca0:	e014      	b.n	8002ccc <update_heading_back+0x5c>
		  case east:
			  y_loc++;
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <update_heading_back+0x70>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <update_heading_back+0x70>)
 8002cac:	701a      	strb	r2, [r3, #0]
			  break;
 8002cae:	e00d      	b.n	8002ccc <update_heading_back+0x5c>
		  case south:
			  x_loc++;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <update_heading_back+0x6c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <update_heading_back+0x6c>)
 8002cba:	701a      	strb	r2, [r3, #0]
			  break;
 8002cbc:	e006      	b.n	8002ccc <update_heading_back+0x5c>
		  case west:
			  y_loc--;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <update_heading_back+0x70>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <update_heading_back+0x70>)
 8002cc8:	701a      	strb	r2, [r3, #0]
			  break;
 8002cca:	bf00      	nop
	  }
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000336 	.word	0x20000336
 8002cdc:	20000af4 	.word	0x20000af4
 8002ce0:	20000af5 	.word	0x20000af5

08002ce4 <origin_check>:

// Check if robot is back to the origin point
void origin_check(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	if(x_loc ==0 && y_loc == 0)
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <origin_check+0x9c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d144      	bne.n	8002d7a <origin_check+0x96>
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <origin_check+0xa0>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d140      	bne.n	8002d7a <origin_check+0x96>
	{
		if(perimeter_only)
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <origin_check+0xa4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <origin_check+0x24>
		{
			// Back at the origin then end the session
			op_mode = mode_measure;
 8002d00:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <origin_check+0xa8>)
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
				op_mode = mode_measure;
			}

		}
	}
}
 8002d06:	e038      	b.n	8002d7a <origin_check+0x96>
			left(turn_time);
 8002d08:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fe5d 	bl	80029cc <left>
			heading_left();
 8002d12:	f7ff fee5 	bl	8002ae0 <heading_left>
			straight(forward_time);
 8002d16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fe28 	bl	8002970 <straight>
			update_heading();
 8002d20:	f7ff ff6c 	bl	8002bfc <update_heading>
			right(turn_time);
 8002d24:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fe7d 	bl	8002a28 <right>
			heading_right();
 8002d2e:	f7ff feef 	bl	8002b10 <heading_right>
			straight(forward_time);
 8002d32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fe1a 	bl	8002970 <straight>
			update_heading();
 8002d3c:	f7ff ff5e 	bl	8002bfc <update_heading>
			wall_space = wall_space + 30;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <origin_check+0xac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	331e      	adds	r3, #30
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <origin_check+0xac>)
 8002d48:	6013      	str	r3, [r2, #0]
			if(gas_values[x_loc][y_loc != 0])
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <origin_check+0x9c>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <origin_check+0xa0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <origin_check+0xb0>)
 8002d62:	460b      	mov	r3, r1
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4403      	add	r3, r0
 8002d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <origin_check+0x96>
				op_mode = mode_measure;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <origin_check+0xa8>)
 8002d76:	2204      	movs	r2, #4
 8002d78:	701a      	strb	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000af4 	.word	0x20000af4
 8002d84:	20000af5 	.word	0x20000af5
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	20000334 	.word	0x20000334
 8002d90:	20000000 	.word	0x20000000
 8002d94:	200003ec 	.word	0x200003ec

08002d98 <check_sonar>:

void check_sonar(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	  HCSR04_Read();
 8002d9c:	f7ff fd30 	bl	8002800 <HCSR04_Read>
	  HAL_Delay(200);
 8002da0:	20c8      	movs	r0, #200	; 0xc8
 8002da2:	f001 fcc5 	bl	8004730 <HAL_Delay>
	  HCSR04_ReadRight();
 8002da6:	f7ff fd4b 	bl	8002840 <HCSR04_ReadRight>
	  HAL_Delay(200);
 8002daa:	20c8      	movs	r0, #200	; 0xc8
 8002dac:	f001 fcc0 	bl	8004730 <HAL_Delay>
	  HCSR04_ReadLeft();
 8002db0:	f7ff fd66 	bl	8002880 <HCSR04_ReadLeft>
	  HAL_Delay(400);
 8002db4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002db8:	f001 fcba 	bl	8004730 <HAL_Delay>
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <demo_drive>:

void demo_drive(void)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
	uint8_t movement_units= 5;
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	71fb      	strb	r3, [r7, #7]
	  for(int i = movement_units; i > 0; i--)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e022      	b.n	8002e16 <demo_drive+0x56>
		  {
			  //nothing in front
			  straight(forward_time);
 8002dd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fdcb 	bl	8002970 <straight>
			  block = 0;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <demo_drive+0x108>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
			  update_heading();
 8002de0:	f7ff ff0c 	bl	8002bfc <update_heading>
			  //measure ADC
			  HAL_Delay(1000);
 8002de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de8:	f001 fca2 	bl	8004730 <HAL_Delay>
			  gas_values[x_loc][y_loc] = read_gas();
 8002dec:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <demo_drive+0x10c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461c      	mov	r4, r3
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <demo_drive+0x110>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461d      	mov	r5, r3
 8002df8:	f000 f9b0 	bl	800315c <read_gas>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <demo_drive+0x114>)
 8002e02:	4623      	mov	r3, r4
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1b1b      	subs	r3, r3, r4
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	442b      	add	r3, r5
 8002e0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = movement_units; i > 0; i--)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	dcd9      	bgt.n	8002dd0 <demo_drive+0x10>
		  }
	  left(turn_time);
 8002e1c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fdd3 	bl	80029cc <left>
	  heading_left();
 8002e26:	f7ff fe5b 	bl	8002ae0 <heading_left>
	  straight(forward_time);
 8002e2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd9e 	bl	8002970 <straight>
	  left(turn_time);
 8002e34:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fdc7 	bl	80029cc <left>
	  heading_left();
 8002e3e:	f7ff fe4f 	bl	8002ae0 <heading_left>
	  gas_values[x_loc][y_loc] = read_gas();
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <demo_drive+0x10c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461c      	mov	r4, r3
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <demo_drive+0x110>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	f000 f985 	bl	800315c <read_gas>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4619      	mov	r1, r3
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <demo_drive+0x114>)
 8002e58:	4623      	mov	r3, r4
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1b1b      	subs	r3, r3, r4
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	442b      	add	r3, r5
 8002e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = movement_units; i > 0; i--)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	e022      	b.n	8002eb2 <demo_drive+0xf2>
		  {
			  //nothing in front
			  straight(forward_time);
 8002e6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fd7d 	bl	8002970 <straight>
			  block = 0;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <demo_drive+0x108>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
			  update_heading();
 8002e7c:	f7ff febe 	bl	8002bfc <update_heading>
			  //measure ADC
			  HAL_Delay(1000);
 8002e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e84:	f001 fc54 	bl	8004730 <HAL_Delay>
			  gas_values[x_loc][y_loc] = read_gas();
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <demo_drive+0x10c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <demo_drive+0x110>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461d      	mov	r5, r3
 8002e94:	f000 f962 	bl	800315c <read_gas>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <demo_drive+0x114>)
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1b1b      	subs	r3, r3, r4
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	442b      	add	r3, r5
 8002ea8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = movement_units; i > 0; i--)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dcd9      	bgt.n	8002e6c <demo_drive+0xac>
		  }
	linear_reg(2);
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f000 f867 	bl	8002f8c <linear_reg>

}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000337 	.word	0x20000337
 8002ecc:	20000af4 	.word	0x20000af4
 8002ed0:	20000af5 	.word	0x20000af5
 8002ed4:	200003ec 	.word	0x200003ec

08002ed8 <findHighest>:

void findHighest(int* x, int* y)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	int n = 10;
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	613b      	str	r3, [r7, #16]
	int m = 10;
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	60fb      	str	r3, [r7, #12]


     for (int i = 0; i < n; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e034      	b.n	8002f5a <findHighest+0x82>
     {
         int max = gas_values[i][0];
 8002ef0:	4925      	ldr	r1, [pc, #148]	; (8002f88 <findHighest+0xb0>)
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
         for (int j = 1; j < m; j++)
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e021      	b.n	8002f4c <findHighest+0x74>
         {
             if (gas_values[i][j] > max)
 8002f08:	491f      	ldr	r1, [pc, #124]	; (8002f88 <findHighest+0xb0>)
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4413      	add	r3, r2
 8002f18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4293      	cmp	r3, r2
 8002f22:	da10      	bge.n	8002f46 <findHighest+0x6e>
             {
                max = gas_values[i][j];
 8002f24:	4918      	ldr	r1, [pc, #96]	; (8002f88 <findHighest+0xb0>)
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4413      	add	r3, r2
 8002f34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f38:	61bb      	str	r3, [r7, #24]
                *x = i;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	601a      	str	r2, [r3, #0]
                *y = j;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	601a      	str	r2, [r3, #0]
         for (int j = 1; j < m; j++)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dbd9      	blt.n	8002f08 <findHighest+0x30>
     for (int i = 0; i < n; i++)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	dbc6      	blt.n	8002ef0 <findHighest+0x18>
             }
         }
     }
     //null the max so we can get the next value
     gas_values[*x][*y] = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	4807      	ldr	r0, [pc, #28]	; (8002f88 <findHighest+0xb0>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	440b      	add	r3, r1
 8002f76:	2200      	movs	r2, #0
 8002f78:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

}
 8002f7c:	bf00      	nop
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	200003ec 	.word	0x200003ec

08002f8c <linear_reg>:

void linear_reg(int n)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	//variables
   int i;
   int x,y;
   float m,c,d;
   float sumx=0,sumxsq=0,sumy=0,sumxy=0;
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c

	//find max points


	// calculate m and c
	for(i=0;i<n;i++){
 8002fac:	2300      	movs	r3, #0
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb0:	e03c      	b.n	800302c <linear_reg+0xa0>
		findHighest(&y,&x);
 8002fb2:	f107 020c 	add.w	r2, r7, #12
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff8b 	bl	8002ed8 <findHighest>
	   sumx=sumx+x;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fcc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	   sumxsq=sumxsq+(x*x);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	   sumy=sumy+y;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003006:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	   sumxy=sumxy+(x*y);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800301e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003022:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(i=0;i<n;i++){
 8003026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003028:	3301      	adds	r3, #1
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	dbbe      	blt.n	8002fb2 <linear_reg+0x26>
	}

	d=n*sumxsq-sumx*sumx;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800303e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003046:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800304a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800304e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003052:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	m=(n*sumxy-sumx*sumy)/d;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003060:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003068:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800306c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003074:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003078:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800307c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003080:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	c=(sumy*sumxsq-sumx*sumxy)/d;
 8003084:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003088:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003094:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80030a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80030a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a8:	edc7 7a08 	vstr	s15, [r7, #32]
	uint32_t m_int = (uint32_t)m;
 80030ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	61fb      	str	r3, [r7, #28]
	uint32_t c_int = (uint32_t)c;
 80030ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80030be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c2:	ee17 3a90 	vmov	r3, s15
 80030c6:	61bb      	str	r3, [r7, #24]
	uint64_t flash_data = ((uint32_t)m_int << 32) | c_int;
 80030c8:	2220      	movs	r2, #32
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa03 f202 	lsl.w	r2, r3, r2
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	2200      	movs	r2, #0
 80030d6:	461c      	mov	r4, r3
 80030d8:	4615      	mov	r5, r2
 80030da:	e9c7 4504 	strd	r4, r5, [r7, #16]
	flash_write(flash_data);
 80030de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030e2:	f000 f805 	bl	80030f0 <flash_write>
}
 80030e6:	bf00      	nop
 80030e8:	3740      	adds	r7, #64	; 0x40
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030f0 <flash_write>:

void flash_write(uint64_t data)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	e9c7 0100 	strd	r0, r1, [r7]

	HAL_FLASH_Unlock();
 80030fa:	f002 f8f3 	bl	80052e4 <HAL_FLASH_Unlock>
	//HAL_FLASH_OB_Unlock();
	// Erase
	//Instantiate the FLASH_EraseInitTypeDef struct needed for the HAL_FLASHEx_Erase() function
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]
 800310c:	611a      	str	r2, [r3, #16]

	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  //Erase type set to sectors
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
	FLASH_EraseInitStruct.Sector = 5;            				//sector 0x0800 C000
 8003112:	2305      	movs	r3, #5
 8003114:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitStruct.NbSectors = 1;                        //The number of sectors
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800311a:	2302      	movs	r3, #2
 800311c:	61fb      	str	r3, [r7, #28]

	uint32_t  errorStatus = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 8003122:	f107 0208 	add.w	r2, r7, #8
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f002 fa4b 	bl	80055c8 <HAL_FLASHEx_Erase>
	HAL_Delay(10);
 8003132:	200a      	movs	r0, #10
 8003134:	f001 fafc 	bl	8004730 <HAL_Delay>
	// FLASH->CR &= (FLASH_CR_PG);

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,0x08020000, data);
 8003138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <flash_write+0x68>)
 800313e:	2003      	movs	r0, #3
 8003140:	f002 f87c 	bl	800523c <HAL_FLASH_Program>

	HAL_Delay(10);
 8003144:	200a      	movs	r0, #10
 8003146:	f001 faf3 	bl	8004730 <HAL_Delay>
	HAL_FLASH_Lock();
 800314a:	f002 f8ed 	bl	8005328 <HAL_FLASH_Lock>
}
 800314e:	bf00      	nop
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	08020000 	.word	0x08020000

0800315c <read_gas>:

uint16_t read_gas(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
	uint16_t rawADC;
	HAL_ADC_Start(&hadc1);
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <read_gas+0x2c>)
 8003164:	f001 fb4c 	bl	8004800 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316c:	4806      	ldr	r0, [pc, #24]	; (8003188 <read_gas+0x2c>)
 800316e:	f001 fbfb 	bl	8004968 <HAL_ADC_PollForConversion>
	rawADC = HAL_ADC_GetValue(&hadc1);
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <read_gas+0x2c>)
 8003174:	f001 fc83 	bl	8004a7e <HAL_ADC_GetValue>
 8003178:	4603      	mov	r3, r0
 800317a:	80fb      	strh	r3, [r7, #6]
	return rawADC;
 800317c:	88fb      	ldrh	r3, [r7, #6]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000100 	.word	0x20000100

0800318c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003194:	e7fe      	b.n	8003194 <Error_Handler+0x8>
	...

08003198 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800319c:	4b17      	ldr	r3, [pc, #92]	; (80031fc <MX_SPI1_Init+0x64>)
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <MX_SPI1_Init+0x68>)
 80031a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <MX_SPI1_Init+0x64>)
 80031a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <MX_SPI1_Init+0x64>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <MX_SPI1_Init+0x64>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <MX_SPI1_Init+0x64>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <MX_SPI1_Init+0x64>)
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <MX_SPI1_Init+0x64>)
 80031c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <MX_SPI1_Init+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <MX_SPI1_Init+0x64>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <MX_SPI1_Init+0x64>)
 80031d8:	2200      	movs	r2, #0
 80031da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <MX_SPI1_Init+0x64>)
 80031de:	2200      	movs	r2, #0
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <MX_SPI1_Init+0x64>)
 80031e4:	220a      	movs	r2, #10
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <MX_SPI1_Init+0x64>)
 80031ea:	f005 f829 	bl	8008240 <HAL_SPI_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031f4:	f7ff ffca 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000af8 	.word	0x20000af8
 8003200:	40013000 	.word	0x40013000

08003204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_SPI_MspInit+0x84>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12b      	bne.n	800327e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_SPI_MspInit+0x88>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_SPI_MspInit+0x88>)
 8003230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_SPI_MspInit+0x88>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_SPI_MspInit+0x88>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_SPI_MspInit+0x88>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_SPI_MspInit+0x88>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800325e:	23e0      	movs	r3, #224	; 0xe0
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326a:	2303      	movs	r3, #3
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800326e:	2305      	movs	r3, #5
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	4805      	ldr	r0, [pc, #20]	; (8003290 <HAL_SPI_MspInit+0x8c>)
 800327a:	f002 fac7 	bl	800580c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40013000 	.word	0x40013000
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000

08003294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_MspInit+0x4c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032d2:	2007      	movs	r0, #7
 80032d4:	f001 fede 	bl	8005094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800

080032e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <NMI_Handler+0x4>

080032ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <MemManage_Handler+0x4>

080032f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <BusFault_Handler+0x4>

080032fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <UsageFault_Handler+0x4>

08003302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f001 f9de 	bl	80046f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800333c:	2001      	movs	r0, #1
 800333e:	f002 fcff 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <TIM1_CC_IRQHandler+0x10>)
 800334e:	f005 fb1d 	bl	800898c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000b54 	.word	0x20000b54

0800335c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <USART2_IRQHandler+0x10>)
 8003362:	f006 fc29 	bl	8009bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000c2c 	.word	0x20000c2c

08003370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <_sbrk+0x5c>)
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <_sbrk+0x60>)
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003384:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <_sbrk+0x64>)
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <_sbrk+0x68>)
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	429a      	cmp	r2, r3
 800339e:	d207      	bcs.n	80033b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a0:	f007 fb76 	bl	800aa90 <__errno>
 80033a4:	4603      	mov	r3, r0
 80033a6:	220c      	movs	r2, #12
 80033a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ae:	e009      	b.n	80033c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <_sbrk+0x64>)
 80033c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20020000 	.word	0x20020000
 80033d0:	00000400 	.word	0x00000400
 80033d4:	20000b50 	.word	0x20000b50
 80033d8:	20000d00 	.word	0x20000d00

080033dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <SystemInit+0x20>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <SystemInit+0x20>)
 80033e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003410:	463b      	mov	r3, r7
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <MX_TIM1_Init+0xbc>)
 800341e:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <MX_TIM1_Init+0xc0>)
 8003420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8003422:	4b26      	ldr	r3, [pc, #152]	; (80034bc <MX_TIM1_Init+0xbc>)
 8003424:	225f      	movs	r2, #95	; 0x5f
 8003426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <MX_TIM1_Init+0xbc>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <MX_TIM1_Init+0xbc>)
 8003430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <MX_TIM1_Init+0xbc>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <MX_TIM1_Init+0xbc>)
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <MX_TIM1_Init+0xbc>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003448:	481c      	ldr	r0, [pc, #112]	; (80034bc <MX_TIM1_Init+0xbc>)
 800344a:	f005 f935 	bl	80086b8 <HAL_TIM_IC_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003454:	f7ff fe9a 	bl	800318c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	4619      	mov	r1, r3
 8003466:	4815      	ldr	r0, [pc, #84]	; (80034bc <MX_TIM1_Init+0xbc>)
 8003468:	f006 fa14 	bl	8009894 <HAL_TIMEx_MasterConfigSynchronization>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003472:	f7ff fe8b 	bl	800318c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003476:	2300      	movs	r3, #0
 8003478:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800347a:	2301      	movs	r3, #1
 800347c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003486:	463b      	mov	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	4619      	mov	r1, r3
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <MX_TIM1_Init+0xbc>)
 800348e:	f005 fb85 	bl	8008b9c <HAL_TIM_IC_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003498:	f7ff fe78 	bl	800318c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800349c:	463b      	mov	r3, r7
 800349e:	2204      	movs	r2, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <MX_TIM1_Init+0xbc>)
 80034a4:	f005 fb7a 	bl	8008b9c <HAL_TIM_IC_ConfigChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80034ae:	f7ff fe6d 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000b54 	.word	0x20000b54
 80034c0:	40010000 	.word	0x40010000

080034c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d8:	463b      	mov	r3, r7
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <MX_TIM2_Init+0x94>)
 80034e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_TIM2_Init+0x94>)
 80034ea:	225f      	movs	r2, #95	; 0x5f
 80034ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <MX_TIM2_Init+0x94>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <MX_TIM2_Init+0x94>)
 80034f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <MX_TIM2_Init+0x94>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <MX_TIM2_Init+0x94>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003508:	4813      	ldr	r0, [pc, #76]	; (8003558 <MX_TIM2_Init+0x94>)
 800350a:	f004 ff22 	bl	8008352 <HAL_TIM_Base_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003514:	f7ff fe3a 	bl	800318c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4619      	mov	r1, r3
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <MX_TIM2_Init+0x94>)
 8003526:	f005 fc97 	bl	8008e58 <HAL_TIM_ConfigClockSource>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003530:	f7ff fe2c 	bl	800318c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800353c:	463b      	mov	r3, r7
 800353e:	4619      	mov	r1, r3
 8003540:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_TIM2_Init+0x94>)
 8003542:	f006 f9a7 	bl	8009894 <HAL_TIMEx_MasterConfigSynchronization>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800354c:	f7ff fe1e 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000b9c 	.word	0x20000b9c

0800355c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	; 0x38
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	f107 0320 	add.w	r3, r7, #32
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <MX_TIM3_Init+0x128>)
 800358e:	4a3e      	ldr	r2, [pc, #248]	; (8003688 <MX_TIM3_Init+0x12c>)
 8003590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <MX_TIM3_Init+0x128>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <MX_TIM3_Init+0x128>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <MX_TIM3_Init+0x128>)
 80035a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a6:	4b37      	ldr	r3, [pc, #220]	; (8003684 <MX_TIM3_Init+0x128>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <MX_TIM3_Init+0x128>)
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035b2:	4834      	ldr	r0, [pc, #208]	; (8003684 <MX_TIM3_Init+0x128>)
 80035b4:	f004 fecd 	bl	8008352 <HAL_TIM_Base_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80035be:	f7ff fde5 	bl	800318c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035cc:	4619      	mov	r1, r3
 80035ce:	482d      	ldr	r0, [pc, #180]	; (8003684 <MX_TIM3_Init+0x128>)
 80035d0:	f005 fc42 	bl	8008e58 <HAL_TIM_ConfigClockSource>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80035da:	f7ff fdd7 	bl	800318c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035de:	4829      	ldr	r0, [pc, #164]	; (8003684 <MX_TIM3_Init+0x128>)
 80035e0:	f004 ff60 	bl	80084a4 <HAL_TIM_PWM_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80035ea:	f7ff fdcf 	bl	800318c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f6:	f107 0320 	add.w	r3, r7, #32
 80035fa:	4619      	mov	r1, r3
 80035fc:	4821      	ldr	r0, [pc, #132]	; (8003684 <MX_TIM3_Init+0x128>)
 80035fe:	f006 f949 	bl	8009894 <HAL_TIMEx_MasterConfigSynchronization>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003608:	f7ff fdc0 	bl	800318c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360c:	2360      	movs	r3, #96	; 0x60
 800360e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2200      	movs	r2, #0
 8003620:	4619      	mov	r1, r3
 8003622:	4818      	ldr	r0, [pc, #96]	; (8003684 <MX_TIM3_Init+0x128>)
 8003624:	f005 fb56 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800362e:	f7ff fdad 	bl	800318c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	2204      	movs	r2, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4812      	ldr	r0, [pc, #72]	; (8003684 <MX_TIM3_Init+0x128>)
 800363a:	f005 fb4b 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003644:	f7ff fda2 	bl	800318c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	2208      	movs	r2, #8
 800364c:	4619      	mov	r1, r3
 800364e:	480d      	ldr	r0, [pc, #52]	; (8003684 <MX_TIM3_Init+0x128>)
 8003650:	f005 fb40 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800365a:	f7ff fd97 	bl	800318c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	220c      	movs	r2, #12
 8003662:	4619      	mov	r1, r3
 8003664:	4807      	ldr	r0, [pc, #28]	; (8003684 <MX_TIM3_Init+0x128>)
 8003666:	f005 fb35 	bl	8008cd4 <HAL_TIM_PWM_ConfigChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8003670:	f7ff fd8c 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003674:	4803      	ldr	r0, [pc, #12]	; (8003684 <MX_TIM3_Init+0x128>)
 8003676:	f000 f88f 	bl	8003798 <HAL_TIM_MspPostInit>

}
 800367a:	bf00      	nop
 800367c:	3738      	adds	r7, #56	; 0x38
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000be4 	.word	0x20000be4
 8003688:	40000400 	.word	0x40000400

0800368c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_TIM_IC_MspInit+0x94>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d134      	bne.n	8003718 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6453      	str	r3, [r2, #68]	; 0x44
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036d4:	f043 0310 	orr.w	r3, r3, #16
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_TIM_IC_MspInit+0x98>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80036e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80036ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4619      	mov	r1, r3
 8003702:	4809      	ldr	r0, [pc, #36]	; (8003728 <HAL_TIM_IC_MspInit+0x9c>)
 8003704:	f002 f882 	bl	800580c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2100      	movs	r1, #0
 800370c:	201b      	movs	r0, #27
 800370e:	f001 fccc 	bl	80050aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003712:	201b      	movs	r0, #27
 8003714:	f001 fce5 	bl	80050e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003718:	bf00      	nop
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010000 	.word	0x40010000
 8003724:	40023800 	.word	0x40023800
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d10e      	bne.n	800375c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a12      	ldr	r2, [pc, #72]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800375a:	e012      	b.n	8003782 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_TIM_Base_MspInit+0x68>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_TIM_Base_MspInit+0x64>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40000400 	.word	0x40000400

08003798 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <HAL_TIM_MspPostInit+0xa4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d13b      	bne.n	8003832 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_TIM_MspPostInit+0xa8>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80037f2:	2323      	movs	r3, #35	; 0x23
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003802:	2302      	movs	r3, #2
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4619      	mov	r1, r3
 800380c:	480d      	ldr	r0, [pc, #52]	; (8003844 <HAL_TIM_MspPostInit+0xac>)
 800380e:	f001 fffd 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003822:	2302      	movs	r3, #2
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <HAL_TIM_MspPostInit+0xb0>)
 800382e:	f001 ffed 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40000400 	.word	0x40000400
 8003840:	40023800 	.word	0x40023800
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800

0800384c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <MX_USART2_UART_Init+0x50>)
 8003854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003858:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800385c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003872:	220c      	movs	r2, #12
 8003874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003882:	4805      	ldr	r0, [pc, #20]	; (8003898 <MX_USART2_UART_Init+0x4c>)
 8003884:	f006 f888 	bl	8009998 <HAL_UART_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800388e:	f7ff fc7d 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000c2c 	.word	0x20000c2c
 800389c:	40004400 	.word	0x40004400

080038a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_UART_MspInit+0x94>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d133      	bne.n	800392a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_UART_MspInit+0x98>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038fa:	230c      	movs	r3, #12
 80038fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800390a:	2307      	movs	r3, #7
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4619      	mov	r1, r3
 8003914:	4809      	ldr	r0, [pc, #36]	; (800393c <HAL_UART_MspInit+0x9c>)
 8003916:	f001 ff79 	bl	800580c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	2026      	movs	r0, #38	; 0x26
 8003920:	f001 fbc3 	bl	80050aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003924:	2026      	movs	r0, #38	; 0x26
 8003926:	f001 fbdc 	bl	80050e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40004400 	.word	0x40004400
 8003938:	40023800 	.word	0x40023800
 800393c:	40020000 	.word	0x40020000

08003940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003946:	490e      	ldr	r1, [pc, #56]	; (8003980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003948:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800394c:	e002      	b.n	8003954 <LoopCopyDataInit>

0800394e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003952:	3304      	adds	r3, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003958:	d3f9      	bcc.n	800394e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800395c:	4c0b      	ldr	r4, [pc, #44]	; (800398c <LoopFillZerobss+0x26>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003960:	e001      	b.n	8003966 <LoopFillZerobss>

08003962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003964:	3204      	adds	r2, #4

08003966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003968:	d3fb      	bcc.n	8003962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800396a:	f7ff fd37 	bl	80033dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800396e:	f007 f895 	bl	800aa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003972:	f7fe fbed 	bl	8002150 <main>
  bx  lr    
 8003976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800397c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003980:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003984:	0800bab0 	.word	0x0800bab0
  ldr r2, =_sbss
 8003988:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 800398c:	20000d00 	.word	0x20000d00

08003990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003990:	e7fe      	b.n	8003990 <ADC_IRQHandler>

08003992 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80039a0:	f000 fc82 	bl	80042a8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	461a      	mov	r2, r3
 80039ac:	2120      	movs	r1, #32
 80039ae:	2032      	movs	r0, #50	; 0x32
 80039b0:	f000 fcd2 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	461a      	mov	r2, r3
 80039bc:	2123      	movs	r1, #35	; 0x23
 80039be:	2032      	movs	r0, #50	; 0x32
 80039c0:	f000 fcca 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80039e0:	2300      	movs	r3, #0
 80039e2:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80039e4:	f000 fc60 	bl	80042a8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80039e8:	210f      	movs	r1, #15
 80039ea:	2032      	movs	r0, #50	; 0x32
 80039ec:	f000 fcc7 	bl	800437e <COMPASSACCELERO_IO_Read>
 80039f0:	4603      	mov	r3, r0
 80039f2:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80039f4:	79fb      	ldrb	r3, [r7, #7]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8003a04:	2124      	movs	r1, #36	; 0x24
 8003a06:	2032      	movs	r0, #50	; 0x32
 8003a08:	f000 fcb9 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a16:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2124      	movs	r1, #36	; 0x24
 8003a1e:	2032      	movs	r0, #50	; 0x32
 8003a20:	f000 fc9a 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8003a36:	2121      	movs	r1, #33	; 0x21
 8003a38:	2032      	movs	r0, #50	; 0x32
 8003a3a:	f000 fca0 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	461a      	mov	r2, r3
 8003a56:	2121      	movs	r1, #33	; 0x21
 8003a58:	2032      	movs	r0, #50	; 0x32
 8003a5a:	f000 fc7d 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8003a70:	2121      	movs	r1, #33	; 0x21
 8003a72:	2032      	movs	r0, #50	; 0x32
 8003a74:	f000 fc83 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2121      	movs	r1, #33	; 0x21
 8003a92:	2032      	movs	r0, #50	; 0x32
 8003a94:	f000 fc60 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8003ab4:	2123      	movs	r1, #35	; 0x23
 8003ab6:	2032      	movs	r0, #50	; 0x32
 8003ab8:	f000 fc61 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003abc:	4603      	mov	r3, r0
 8003abe:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8003ac0:	2124      	movs	r1, #36	; 0x24
 8003ac2:	2032      	movs	r0, #50	; 0x32
 8003ac4:	f000 fc5b 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8003acc:	2128      	movs	r1, #40	; 0x28
 8003ace:	2032      	movs	r0, #50	; 0x32
 8003ad0:	f000 fc55 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8003ada:	2129      	movs	r1, #41	; 0x29
 8003adc:	2032      	movs	r0, #50	; 0x32
 8003ade:	f000 fc4e 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8003ae8:	212a      	movs	r1, #42	; 0x2a
 8003aea:	2032      	movs	r0, #50	; 0x32
 8003aec:	f000 fc47 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003af0:	4603      	mov	r3, r0
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8003af6:	212b      	movs	r1, #43	; 0x2b
 8003af8:	2032      	movs	r0, #50	; 0x32
 8003afa:	f000 fc40 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b25b      	sxtb	r3, r3
 8003b02:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	2032      	movs	r0, #50	; 0x32
 8003b08:	f000 fc39 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8003b12:	212d      	movs	r1, #45	; 0x2d
 8003b14:	2032      	movs	r0, #50	; 0x32
 8003b16:	f000 fc32 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	b25b      	sxtb	r3, r3
 8003b1e:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8003b20:	7d3b      	ldrb	r3, [r7, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d123      	bne.n	8003b72 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e01c      	b.n	8003b6a <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	3301      	adds	r3, #1
 8003b36:	3320      	adds	r3, #32
 8003b38:	443b      	add	r3, r7
 8003b3a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	7ffb      	ldrb	r3, [r7, #31]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	3320      	adds	r3, #32
 8003b4a:	443b      	add	r3, r7
 8003b4c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	b212      	sxth	r2, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	3320      	adds	r3, #32
 8003b5e:	443b      	add	r3, r7
 8003b60:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
 8003b66:	3301      	adds	r3, #1
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d9df      	bls.n	8003b30 <LSM303AGR_AccReadXYZ+0x90>
 8003b70:	e022      	b.n	8003bb8 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e01c      	b.n	8003bb2 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	443b      	add	r3, r7
 8003b80:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	3301      	adds	r3, #1
 8003b90:	3320      	adds	r3, #32
 8003b92:	443b      	add	r3, r7
 8003b94:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ba0:	b212      	sxth	r2, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	3320      	adds	r3, #32
 8003ba6:	443b      	add	r3, r7
 8003ba8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003bac:	7ffb      	ldrb	r3, [r7, #31]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d9df      	bls.n	8003b78 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8003bb8:	7d3b      	ldrb	r3, [r7, #20]
 8003bba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bbe:	2b30      	cmp	r3, #48	; 0x30
 8003bc0:	d013      	beq.n	8003bea <LSM303AGR_AccReadXYZ+0x14a>
 8003bc2:	2b30      	cmp	r3, #48	; 0x30
 8003bc4:	dc14      	bgt.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d00c      	beq.n	8003be4 <LSM303AGR_AccReadXYZ+0x144>
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	dc10      	bgt.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <LSM303AGR_AccReadXYZ+0x138>
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d003      	beq.n	8003bde <LSM303AGR_AccReadXYZ+0x13e>
 8003bd6:	e00b      	b.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77bb      	strb	r3, [r7, #30]
    break;
 8003bdc:	e008      	b.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8003bde:	2302      	movs	r3, #2
 8003be0:	77bb      	strb	r3, [r7, #30]
    break;
 8003be2:	e005      	b.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8003be4:	2304      	movs	r3, #4
 8003be6:	77bb      	strb	r3, [r7, #30]
    break;
 8003be8:	e002      	b.n	8003bf0 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8003bea:	230c      	movs	r3, #12
 8003bec:	77bb      	strb	r3, [r7, #30]
    break;
 8003bee:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e014      	b.n	8003c20 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	3320      	adds	r3, #32
 8003bfc:	443b      	add	r3, r7
 8003bfe:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	7fbb      	ldrb	r3, [r7, #30]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	fb12 f303 	smulbb	r3, r2, r3
 8003c0c:	b299      	uxth	r1, r3
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	b20a      	sxth	r2, r1
 8003c18:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d9e7      	bls.n	8003bf6 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8003c3e:	2121      	movs	r1, #33	; 0x21
 8003c40:	2032      	movs	r0, #50	; 0x32
 8003c42:	f000 fb9c 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003c46:	4603      	mov	r3, r0
 8003c48:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2121      	movs	r1, #33	; 0x21
 8003c60:	2032      	movs	r0, #50	; 0x32
 8003c62:	f000 fb79 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8003c7c:	2122      	movs	r1, #34	; 0x22
 8003c7e:	2032      	movs	r0, #50	; 0x32
 8003c80:	f000 fb7d 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	461a      	mov	r2, r3
 8003c94:	2122      	movs	r1, #34	; 0x22
 8003c96:	2032      	movs	r0, #50	; 0x32
 8003c98:	f000 fb5e 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8003cb2:	2138      	movs	r1, #56	; 0x38
 8003cb4:	2032      	movs	r0, #50	; 0x32
 8003cb6:	f000 fb62 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2138      	movs	r1, #56	; 0x38
 8003ccc:	2032      	movs	r0, #50	; 0x32
 8003cce:	f000 fb43 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	213a      	movs	r1, #58	; 0x3a
 8003cdc:	2032      	movs	r0, #50	; 0x32
 8003cde:	f000 fb3b 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	213b      	movs	r1, #59	; 0x3b
 8003cec:	2032      	movs	r0, #50	; 0x32
 8003cee:	f000 fb33 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	213c      	movs	r1, #60	; 0x3c
 8003cf8:	2032      	movs	r0, #50	; 0x32
 8003cfa:	f000 fb2d 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8003cfe:	2332      	movs	r3, #50	; 0x32
 8003d00:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	461a      	mov	r2, r3
 8003d06:	213d      	movs	r1, #61	; 0x3d
 8003d08:	2032      	movs	r0, #50	; 0x32
 8003d0a:	f000 fb25 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8003d16:	b580      	push	{r7, lr}
 8003d18:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8003d1a:	f000 faed 	bl	80042f8 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8003d1e:	2080      	movs	r0, #128	; 0x80
 8003d20:	f7ff ffa5 	bl	8003c6e <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8003d24:	2004      	movs	r0, #4
 8003d26:	f7ff ff83 	bl	8003c30 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8003d2a:	2010      	movs	r0, #16
 8003d2c:	f7ff ffba 	bl	8003ca4 <LSM303AGR_AccClickITEnable>
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8003d42:	f000 fab1 	bl	80042a8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2120      	movs	r1, #32
 8003d50:	2032      	movs	r0, #50	; 0x32
 8003d52:	f000 fb01 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2123      	movs	r1, #35	; 0x23
 8003d60:	2032      	movs	r0, #50	; 0x32
 8003d62:	f000 faf9 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
}
 8003d72:	bf00      	nop
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003d82:	2300      	movs	r3, #0
 8003d84:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8003d86:	f000 fa8f 	bl	80042a8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	2032      	movs	r0, #50	; 0x32
 8003d8e:	f000 faf6 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8003da6:	2124      	movs	r1, #36	; 0x24
 8003da8:	2032      	movs	r0, #50	; 0x32
 8003daa:	f000 fae8 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003db8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2124      	movs	r1, #36	; 0x24
 8003dc0:	2032      	movs	r0, #50	; 0x32
 8003dc2:	f000 fac9 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8003dd8:	2121      	movs	r1, #33	; 0x21
 8003dda:	2032      	movs	r0, #50	; 0x32
 8003ddc:	f000 facf 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003de0:	4603      	mov	r3, r0
 8003de2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	461a      	mov	r2, r3
 8003df8:	2121      	movs	r1, #33	; 0x21
 8003dfa:	2032      	movs	r0, #50	; 0x32
 8003dfc:	f000 faac 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8003e12:	2121      	movs	r1, #33	; 0x21
 8003e14:	2032      	movs	r0, #50	; 0x32
 8003e16:	f000 fab2 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	f023 0308 	bic.w	r3, r3, #8
 8003e24:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	461a      	mov	r2, r3
 8003e32:	2121      	movs	r1, #33	; 0x21
 8003e34:	2032      	movs	r0, #50	; 0x32
 8003e36:	f000 fa8f 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b088      	sub	sp, #32
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8003e52:	2301      	movs	r3, #1
 8003e54:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8003e56:	2123      	movs	r1, #35	; 0x23
 8003e58:	2032      	movs	r0, #50	; 0x32
 8003e5a:	f000 fa90 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8003e62:	2124      	movs	r1, #36	; 0x24
 8003e64:	2032      	movs	r0, #50	; 0x32
 8003e66:	f000 fa8a 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8003e6e:	2128      	movs	r1, #40	; 0x28
 8003e70:	2032      	movs	r0, #50	; 0x32
 8003e72:	f000 fa84 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e76:	4603      	mov	r3, r0
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8003e7c:	2129      	movs	r1, #41	; 0x29
 8003e7e:	2032      	movs	r0, #50	; 0x32
 8003e80:	f000 fa7d 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e84:	4603      	mov	r3, r0
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8003e8a:	212a      	movs	r1, #42	; 0x2a
 8003e8c:	2032      	movs	r0, #50	; 0x32
 8003e8e:	f000 fa76 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003e92:	4603      	mov	r3, r0
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8003e98:	212b      	movs	r1, #43	; 0x2b
 8003e9a:	2032      	movs	r0, #50	; 0x32
 8003e9c:	f000 fa6f 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	2032      	movs	r0, #50	; 0x32
 8003eaa:	f000 fa68 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8003eb4:	212d      	movs	r1, #45	; 0x2d
 8003eb6:	2032      	movs	r0, #50	; 0x32
 8003eb8:	f000 fa61 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8003ec2:	7d3b      	ldrb	r3, [r7, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d123      	bne.n	8003f14 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e01c      	b.n	8003f0c <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	3320      	adds	r3, #32
 8003eda:	443b      	add	r3, r7
 8003edc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	3320      	adds	r3, #32
 8003eec:	443b      	add	r3, r7
 8003eee:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	7ffb      	ldrb	r3, [r7, #31]
 8003efa:	b212      	sxth	r2, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	3320      	adds	r3, #32
 8003f00:	443b      	add	r3, r7
 8003f02:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d9df      	bls.n	8003ed2 <LSM303DLHC_AccReadXYZ+0x90>
 8003f12:	e022      	b.n	8003f5a <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e01c      	b.n	8003f54 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	3320      	adds	r3, #32
 8003f20:	443b      	add	r3, r7
 8003f22:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	3301      	adds	r3, #1
 8003f32:	3320      	adds	r3, #32
 8003f34:	443b      	add	r3, r7
 8003f36:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	7ffb      	ldrb	r3, [r7, #31]
 8003f42:	b212      	sxth	r2, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	3320      	adds	r3, #32
 8003f48:	443b      	add	r3, r7
 8003f4a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	3301      	adds	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d9df      	bls.n	8003f1a <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8003f5a:	7d3b      	ldrb	r3, [r7, #20]
 8003f5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d013      	beq.n	8003f8c <LSM303DLHC_AccReadXYZ+0x14a>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	dc14      	bgt.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d00c      	beq.n	8003f86 <LSM303DLHC_AccReadXYZ+0x144>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	dc10      	bgt.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <LSM303DLHC_AccReadXYZ+0x138>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d003      	beq.n	8003f80 <LSM303DLHC_AccReadXYZ+0x13e>
 8003f78:	e00b      	b.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
    break;
 8003f7e:	e008      	b.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8003f80:	2302      	movs	r3, #2
 8003f82:	77bb      	strb	r3, [r7, #30]
    break;
 8003f84:	e005      	b.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8003f86:	2304      	movs	r3, #4
 8003f88:	77bb      	strb	r3, [r7, #30]
    break;
 8003f8a:	e002      	b.n	8003f92 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	77bb      	strb	r3, [r7, #30]
    break;
 8003f90:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e014      	b.n	8003fc2 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	3320      	adds	r3, #32
 8003f9e:	443b      	add	r3, r7
 8003fa0:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	7fbb      	ldrb	r3, [r7, #30]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	fb12 f303 	smulbb	r3, r2, r3
 8003fae:	b299      	uxth	r1, r3
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b20a      	sxth	r2, r1
 8003fba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d9e7      	bls.n	8003f98 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8003fe0:	2121      	movs	r1, #33	; 0x21
 8003fe2:	2032      	movs	r0, #50	; 0x32
 8003fe4:	f000 f9cb 	bl	800437e <COMPASSACCELERO_IO_Read>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	461a      	mov	r2, r3
 8004000:	2121      	movs	r1, #33	; 0x21
 8004002:	2032      	movs	r0, #50	; 0x32
 8004004:	f000 f9a8 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800401e:	2122      	movs	r1, #34	; 0x22
 8004020:	2032      	movs	r0, #50	; 0x32
 8004022:	f000 f9ac 	bl	800437e <COMPASSACCELERO_IO_Read>
 8004026:	4603      	mov	r3, r0
 8004028:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	4313      	orrs	r3, r2
 8004030:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	461a      	mov	r2, r3
 8004036:	2122      	movs	r1, #34	; 0x22
 8004038:	2032      	movs	r0, #50	; 0x32
 800403a:	f000 f98d 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004054:	2138      	movs	r1, #56	; 0x38
 8004056:	2032      	movs	r0, #50	; 0x32
 8004058:	f000 f991 	bl	800437e <COMPASSACCELERO_IO_Read>
 800405c:	4603      	mov	r3, r0
 800405e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	4313      	orrs	r3, r2
 8004066:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	461a      	mov	r2, r3
 800406c:	2138      	movs	r1, #56	; 0x38
 800406e:	2032      	movs	r0, #50	; 0x32
 8004070:	f000 f972 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8004074:	230a      	movs	r3, #10
 8004076:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	461a      	mov	r2, r3
 800407c:	213a      	movs	r1, #58	; 0x3a
 800407e:	2032      	movs	r0, #50	; 0x32
 8004080:	f000 f96a 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8004084:	2305      	movs	r3, #5
 8004086:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	461a      	mov	r2, r3
 800408c:	213b      	movs	r1, #59	; 0x3b
 800408e:	2032      	movs	r0, #50	; 0x32
 8004090:	f000 f962 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	461a      	mov	r2, r3
 8004098:	213c      	movs	r1, #60	; 0x3c
 800409a:	2032      	movs	r0, #50	; 0x32
 800409c:	f000 f95c 	bl	8004358 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80040a0:	2332      	movs	r3, #50	; 0x32
 80040a2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	461a      	mov	r2, r3
 80040a8:	213d      	movs	r1, #61	; 0x3d
 80040aa:	2032      	movs	r0, #50	; 0x32
 80040ac:	f000 f954 	bl	8004358 <COMPASSACCELERO_IO_Write>
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80040bc:	f000 f91c 	bl	80042f8 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80040c0:	2080      	movs	r0, #128	; 0x80
 80040c2:	f7ff ffa5 	bl	8004010 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80040c6:	2004      	movs	r0, #4
 80040c8:	f7ff ff83 	bl	8003fd2 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80040cc:	2010      	movs	r0, #16
 80040ce:	f7ff ffba 	bl	8004046 <LSM303DLHC_AccClickITEnable>
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80040dc:	4814      	ldr	r0, [pc, #80]	; (8004130 <I2Cx_Init+0x58>)
 80040de:	f002 fadb 	bl	8006698 <HAL_I2C_GetState>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d121      	bne.n	800412c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <I2Cx_Init+0x58>)
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <I2Cx_Init+0x5c>)
 80040ec:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <I2Cx_Init+0x58>)
 80040f0:	2243      	movs	r2, #67	; 0x43
 80040f2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <I2Cx_Init+0x58>)
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <I2Cx_Init+0x60>)
 80040f8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <I2Cx_Init+0x58>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <I2Cx_Init+0x58>)
 8004102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004106:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <I2Cx_Init+0x58>)
 800410a:	2200      	movs	r2, #0
 800410c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <I2Cx_Init+0x58>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <I2Cx_Init+0x58>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <I2Cx_Init+0x58>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <I2Cx_Init+0x58>)
 8004122:	f000 f86b 	bl	80041fc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8004126:	4802      	ldr	r0, [pc, #8]	; (8004130 <I2Cx_Init+0x58>)
 8004128:	f001 fe22 	bl	8005d70 <HAL_I2C_Init>
  }
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000c70 	.word	0x20000c70
 8004134:	40005400 	.word	0x40005400
 8004138:	000186a0 	.word	0x000186a0

0800413c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af04      	add	r7, sp, #16
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
 8004146:	460b      	mov	r3, r1
 8004148:	717b      	strb	r3, [r7, #5]
 800414a:	4613      	mov	r3, r2
 800414c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004152:	797b      	ldrb	r3, [r7, #5]
 8004154:	b29a      	uxth	r2, r3
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <I2Cx_WriteData+0x48>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	88f9      	ldrh	r1, [r7, #6]
 800415c:	9302      	str	r3, [sp, #8]
 800415e:	2301      	movs	r3, #1
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2301      	movs	r3, #1
 8004168:	4807      	ldr	r0, [pc, #28]	; (8004188 <I2Cx_WriteData+0x4c>)
 800416a:	f001 ff75 	bl	8006058 <HAL_I2C_Mem_Write>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8004178:	f000 f834 	bl	80041e4 <I2Cx_Error>
  }
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000074 	.word	0x20000074
 8004188:	20000c70 	.word	0x20000c70

0800418c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af04      	add	r7, sp, #16
 8004192:	4603      	mov	r3, r0
 8004194:	460a      	mov	r2, r1
 8004196:	80fb      	strh	r3, [r7, #6]
 8004198:	4613      	mov	r3, r2
 800419a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80041a4:	797b      	ldrb	r3, [r7, #5]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <I2Cx_ReadData+0x50>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	88f9      	ldrh	r1, [r7, #6]
 80041ae:	9302      	str	r3, [sp, #8]
 80041b0:	2301      	movs	r3, #1
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	f107 030e 	add.w	r3, r7, #14
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2301      	movs	r3, #1
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <I2Cx_ReadData+0x54>)
 80041be:	f002 f845 	bl	800624c <HAL_I2C_Mem_Read>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80041cc:	f000 f80a 	bl	80041e4 <I2Cx_Error>
  }
  return value;
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000074 	.word	0x20000074
 80041e0:	20000c70 	.word	0x20000c70

080041e4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <I2Cx_Error+0x14>)
 80041ea:	f001 ff05 	bl	8005ff8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80041ee:	f7ff ff73 	bl	80040d8 <I2Cx_Init>
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000c70 	.word	0x20000c70

080041fc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	; 0x28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <I2Cx_MspInit+0xa4>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <I2Cx_MspInit+0xa4>)
 800420e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004212:	6413      	str	r3, [r2, #64]	; 0x40
 8004214:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <I2Cx_MspInit+0xa4>)
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6313      	str	r3, [r2, #48]	; 0x30
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 800423c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004240:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8004242:	2312      	movs	r3, #18
 8004244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800424a:	2302      	movs	r3, #2
 800424c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800424e:	2304      	movs	r3, #4
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004252:	f107 0314 	add.w	r3, r7, #20
 8004256:	4619      	mov	r1, r3
 8004258:	4812      	ldr	r0, [pc, #72]	; (80042a4 <I2Cx_MspInit+0xa8>)
 800425a:	f001 fad7 	bl	800580c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004268:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <I2Cx_MspInit+0xa4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <I2Cx_MspInit+0xa4>)
 8004270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004274:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	210f      	movs	r1, #15
 800427a:	201f      	movs	r0, #31
 800427c:	f000 ff15 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004280:	201f      	movs	r0, #31
 8004282:	f000 ff2e 	bl	80050e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004286:	2200      	movs	r2, #0
 8004288:	210f      	movs	r1, #15
 800428a:	2020      	movs	r0, #32
 800428c:	f000 ff0d 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8004290:	2020      	movs	r0, #32
 8004292:	f000 ff26 	bl	80050e2 <HAL_NVIC_EnableIRQ>
}
 8004296:	bf00      	nop
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020400 	.word	0x40020400

080042a8 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <COMPASSACCELERO_IO_Init+0x48>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <COMPASSACCELERO_IO_Init+0x48>)
 80042b8:	f043 0310 	orr.w	r3, r3, #16
 80042bc:	6313      	str	r3, [r2, #48]	; 0x30
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <COMPASSACCELERO_IO_Init+0x48>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80042ca:	2304      	movs	r3, #4
 80042cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80042d6:	2302      	movs	r3, #2
 80042d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <COMPASSACCELERO_IO_Init+0x4c>)
 80042e0:	f001 fa94 	bl	800580c <HAL_GPIO_Init>
  
  I2Cx_Init();
 80042e4:	f7ff fef8 	bl	80040d8 <I2Cx_Init>
}
 80042e8:	bf00      	nop
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40021000 	.word	0x40021000

080042f8 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800431a:	2330      	movs	r3, #48	; 0x30
 800431c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800431e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004324:	2302      	movs	r3, #2
 8004326:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4808      	ldr	r0, [pc, #32]	; (8004354 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8004332:	f001 fa6b 	bl	800580c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8004336:	2200      	movs	r2, #0
 8004338:	210f      	movs	r1, #15
 800433a:	200a      	movs	r0, #10
 800433c:	f000 feb5 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8004340:	200a      	movs	r0, #10
 8004342:	f000 fece 	bl	80050e2 <HAL_NVIC_EnableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	40021000 	.word	0x40021000

08004358 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	80fb      	strh	r3, [r7, #6]
 8004362:	460b      	mov	r3, r1
 8004364:	717b      	strb	r3, [r7, #5]
 8004366:	4613      	mov	r3, r2
 8004368:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800436a:	793a      	ldrb	r2, [r7, #4]
 800436c:	7979      	ldrb	r1, [r7, #5]
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fee3 	bl	800413c <I2Cx_WriteData>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	460a      	mov	r2, r1
 8004388:	80fb      	strh	r3, [r7, #6]
 800438a:	4613      	mov	r3, r2
 800438c:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800438e:	797a      	ldrb	r2, [r7, #5]
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fef9 	bl	800418c <I2Cx_ReadData>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80043ae:	2300      	movs	r3, #0
 80043b0:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80043ba:	4b58      	ldr	r3, [pc, #352]	; (800451c <BSP_ACCELERO_Init+0x178>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4798      	blx	r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b33      	cmp	r3, #51	; 0x33
 80043c4:	d14f      	bne.n	8004466 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80043c6:	4b56      	ldr	r3, [pc, #344]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 80043c8:	4a54      	ldr	r2, [pc, #336]	; (800451c <BSP_ACCELERO_Init+0x178>)
 80043ca:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80043d4:	2307      	movs	r3, #7
 80043d6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80043d8:	2300      	movs	r3, #0
 80043da:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80043dc:	2300      	movs	r3, #0
 80043de:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80043e0:	2300      	movs	r3, #0
 80043e2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80043e4:	2308      	movs	r3, #8
 80043e6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80043e8:	7b3a      	ldrb	r2, [r7, #12]
 80043ea:	7b7b      	ldrb	r3, [r7, #13]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	8abb      	ldrh	r3, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80043fe:	7c3a      	ldrb	r2, [r7, #16]
 8004400:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8004402:	4313      	orrs	r3, r2
 8004404:	b2da      	uxtb	r2, r3
 8004406:	7cbb      	ldrb	r3, [r7, #18]
 8004408:	4313      	orrs	r3, r2
 800440a:	b2da      	uxtb	r2, r3
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	4313      	orrs	r3, r2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004414:	b21a      	sxth	r2, r3
 8004416:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	b21b      	sxth	r3, r3
 800441e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004420:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	8aba      	ldrh	r2, [r7, #20]
 8004428:	4610      	mov	r0, r2
 800442a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8004430:	2310      	movs	r3, #16
 8004432:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800443c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800443e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004440:	4313      	orrs	r3, r2
 8004442:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004444:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004446:	4313      	orrs	r3, r2
 8004448:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800444a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800444c:	4313      	orrs	r3, r2
 800444e:	b2db      	uxtb	r3, r3
 8004450:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004452:	4b33      	ldr	r3, [pc, #204]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	8aba      	ldrh	r2, [r7, #20]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4610      	mov	r0, r2
 800445e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
 8004464:	e054      	b.n	8004510 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <BSP_ACCELERO_Init+0x180>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4798      	blx	r3
 800446c:	4603      	mov	r3, r0
 800446e:	2b33      	cmp	r3, #51	; 0x33
 8004470:	d14e      	bne.n	8004510 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <BSP_ACCELERO_Init+0x180>)
 8004476:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8004478:	2300      	movs	r3, #0
 800447a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 800447c:	2340      	movs	r3, #64	; 0x40
 800447e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8004480:	2307      	movs	r3, #7
 8004482:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8004484:	2300      	movs	r3, #0
 8004486:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8004488:	2300      	movs	r3, #0
 800448a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 800448c:	2300      	movs	r3, #0
 800448e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8004490:	2308      	movs	r3, #8
 8004492:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004494:	7b3a      	ldrb	r2, [r7, #12]
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	4313      	orrs	r3, r2
 800449a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800449c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800449e:	4313      	orrs	r3, r2
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	8abb      	ldrh	r3, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80044aa:	7c3a      	ldrb	r2, [r7, #16]
 80044ac:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80044ae:	4313      	orrs	r3, r2
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	7cbb      	ldrb	r3, [r7, #18]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80044c0:	b21a      	sxth	r2, r3
 80044c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	b21b      	sxth	r3, r3
 80044ca:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	8aba      	ldrh	r2, [r7, #20]
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80044dc:	2310      	movs	r3, #16
 80044de:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80044e8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80044ea:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80044f0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80044f6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <BSP_ACCELERO_Init+0x17c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	8aba      	ldrh	r2, [r7, #20]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	4610      	mov	r0, r2
 800450a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000040 	.word	0x20000040
 8004520:	20000cc4 	.word	0x20000cc4
 8004524:	2000000c 	.word	0x2000000c

08004528 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <BSP_ACCELERO_GetXYZ+0x50>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <BSP_ACCELERO_GetXYZ+0x50>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <BSP_ACCELERO_GetXYZ+0x50>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0b      	ldr	r2, [pc, #44]	; (800457c <BSP_ACCELERO_GetXYZ+0x54>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10e      	bne.n	8004570 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	425b      	negs	r3, r3
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3302      	adds	r3, #2
 800456c:	b212      	sxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000cc4 	.word	0x20000cc4
 800457c:	20000040 	.word	0x20000040

08004580 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <HAL_I2S_TxCpltCallback+0x20>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8004592:	f000 f807 	bl	80045a4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40003c00 	.word	0x40003c00

080045a4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80045c8:	f000 f804 	bl	80045d4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a07      	ldr	r2, [pc, #28]	; (800461c <HAL_I2S_ErrorCallback+0x2c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004602:	f7ff ffd6 	bl	80045b2 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <HAL_I2S_ErrorCallback+0x30>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8004610:	f7ff ffe7 	bl	80045e2 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40003c00 	.word	0x40003c00
 8004620:	40003800 	.word	0x40003800

08004624 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <BSP_GYRO_GetXYZ+0x24>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <BSP_GYRO_GetXYZ+0x24>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
  }
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000cc8 	.word	0x20000cc8

0800464c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_Init+0x40>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <HAL_Init+0x40>)
 8004656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_Init+0x40>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <HAL_Init+0x40>)
 8004662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_Init+0x40>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_Init+0x40>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004674:	2003      	movs	r0, #3
 8004676:	f000 fd0d 	bl	8005094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800467a:	2000      	movs	r0, #0
 800467c:	f000 f808 	bl	8004690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004680:	f7fe fe08 	bl	8003294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023c00 	.word	0x40023c00

08004690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_InitTick+0x54>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_InitTick+0x58>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fd25 	bl	80050fe <HAL_SYSTICK_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e00e      	b.n	80046dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b0f      	cmp	r3, #15
 80046c2:	d80a      	bhi.n	80046da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046c4:	2200      	movs	r2, #0
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046cc:	f000 fced 	bl	80050aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046d0:	4a06      	ldr	r2, [pc, #24]	; (80046ec <HAL_InitTick+0x5c>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000008 	.word	0x20000008
 80046e8:	2000007c 	.word	0x2000007c
 80046ec:	20000078 	.word	0x20000078

080046f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_IncTick+0x20>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_IncTick+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_IncTick+0x24>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	2000007c 	.word	0x2000007c
 8004714:	20000ccc 	.word	0x20000ccc

08004718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_GetTick+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000ccc 	.word	0x20000ccc

08004730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff ffee 	bl	8004718 <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d005      	beq.n	8004756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_Delay+0x44>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004756:	bf00      	nop
 8004758:	f7ff ffde 	bl	8004718 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d8f7      	bhi.n	8004758 <HAL_Delay+0x28>
  {
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000007c 	.word	0x2000007c

08004778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e033      	b.n	80047f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fb34 	bl	8000e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047be:	f023 0302 	bic.w	r3, r3, #2
 80047c2:	f043 0202 	orr.w	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa96 	bl	8004cfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
 80047e6:	e001      	b.n	80047ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_ADC_Start+0x1a>
 8004816:	2302      	movs	r3, #2
 8004818:	e097      	b.n	800494a <HAL_ADC_Start+0x14a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d018      	beq.n	8004862 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004840:	4b45      	ldr	r3, [pc, #276]	; (8004958 <HAL_ADC_Start+0x158>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a45      	ldr	r2, [pc, #276]	; (800495c <HAL_ADC_Start+0x15c>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9a      	lsrs	r2, r3, #18
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004854:	e002      	b.n	800485c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3b01      	subs	r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f9      	bne.n	8004856 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d15f      	bne.n	8004930 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800489a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d106      	bne.n	80048be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	f023 0206 	bic.w	r2, r3, #6
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
 80048bc:	e002      	b.n	80048c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_ADC_Start+0x160>)
 80048ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d129      	bne.n	8004948 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	e020      	b.n	8004948 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_ADC_Start+0x164>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d11b      	bne.n	8004948 <HAL_ADC_Start+0x148>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d114      	bne.n	8004948 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800492c:	609a      	str	r2, [r3, #8]
 800492e:	e00b      	b.n	8004948 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0210 	orr.w	r2, r3, #16
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	f043 0201 	orr.w	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000008 	.word	0x20000008
 800495c:	431bde83 	.word	0x431bde83
 8004960:	40012300 	.word	0x40012300
 8004964:	40012000 	.word	0x40012000

08004968 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d113      	bne.n	80049ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	d10b      	bne.n	80049ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e063      	b.n	8004a76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80049ae:	f7ff feb3 	bl	8004718 <HAL_GetTick>
 80049b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049b4:	e021      	b.n	80049fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049bc:	d01d      	beq.n	80049fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_ADC_PollForConversion+0x6c>
 80049c4:	f7ff fea8 	bl	8004718 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d212      	bcs.n	80049fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d00b      	beq.n	80049fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e03d      	b.n	8004a76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d1d6      	bne.n	80049b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0212 	mvn.w	r2, #18
 8004a10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d123      	bne.n	8004a74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11f      	bne.n	8004a74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d111      	bne.n	8004a74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1c>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e113      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x244>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d925      	bls.n	8004b10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68d9      	ldr	r1, [r3, #12]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3b1e      	subs	r3, #30
 8004ada:	2207      	movs	r2, #7
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	400a      	ands	r2, r1
 8004ae8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68d9      	ldr	r1, [r3, #12]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4618      	mov	r0, r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4403      	add	r3, r0
 8004b02:	3b1e      	subs	r3, #30
 8004b04:	409a      	lsls	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	e022      	b.n	8004b56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6919      	ldr	r1, [r3, #16]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	2207      	movs	r2, #7
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	400a      	ands	r2, r1
 8004b32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6919      	ldr	r1, [r3, #16]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4618      	mov	r0, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4403      	add	r3, r0
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d824      	bhi.n	8004ba8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3b05      	subs	r3, #5
 8004b70:	221f      	movs	r2, #31
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43da      	mvns	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	3b05      	subs	r3, #5
 8004b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ba6:	e04c      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d824      	bhi.n	8004bfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3b23      	subs	r3, #35	; 0x23
 8004bc2:	221f      	movs	r2, #31
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	400a      	ands	r2, r1
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	3b23      	subs	r3, #35	; 0x23
 8004bec:	fa00 f203 	lsl.w	r2, r0, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf8:	e023      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	3b41      	subs	r3, #65	; 0x41
 8004c0c:	221f      	movs	r2, #31
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	400a      	ands	r2, r1
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4618      	mov	r0, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	3b41      	subs	r3, #65	; 0x41
 8004c36:	fa00 f203 	lsl.w	r2, r0, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_ADC_ConfigChannel+0x250>)
 8004c44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a28      	ldr	r2, [pc, #160]	; (8004cec <HAL_ADC_ConfigChannel+0x254>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10f      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1d8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b12      	cmp	r3, #18
 8004c56:	d10b      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <HAL_ADC_ConfigChannel+0x254>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12b      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x23a>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <HAL_ADC_ConfigChannel+0x258>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <HAL_ADC_ConfigChannel+0x1f4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b11      	cmp	r3, #17
 8004c8a:	d122      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <HAL_ADC_ConfigChannel+0x258>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d111      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_ADC_ConfigChannel+0x25c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <HAL_ADC_ConfigChannel+0x260>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	0c9a      	lsrs	r2, r3, #18
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cc4:	e002      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f9      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40012300 	.word	0x40012300
 8004cec:	40012000 	.word	0x40012000
 8004cf0:	10000012 	.word	0x10000012
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	431bde83 	.word	0x431bde83

08004cfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d04:	4b79      	ldr	r3, [pc, #484]	; (8004eec <ADC_Init+0x1f0>)
 8004d06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	021a      	lsls	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	4a58      	ldr	r2, [pc, #352]	; (8004ef0 <ADC_Init+0x1f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	e00f      	b.n	8004dfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004df8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0202 	bic.w	r2, r2, #2
 8004e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7e1b      	ldrb	r3, [r3, #24]
 8004e14:	005a      	lsls	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	3b01      	subs	r3, #1
 8004e54:	035a      	lsls	r2, r3, #13
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	e007      	b.n	8004e70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	051a      	lsls	r2, r3, #20
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eb2:	025a      	lsls	r2, r3, #9
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	029a      	lsls	r2, r3, #10
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012300 	.word	0x40012300
 8004ef0:	0f000001 	.word	0x0f000001

08004ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <__NVIC_SetPriorityGrouping+0x44>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f10:	4013      	ands	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f26:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <__NVIC_SetPriorityGrouping+0x44>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	60d3      	str	r3, [r2, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <__NVIC_GetPriorityGrouping+0x18>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	f003 0307 	and.w	r3, r3, #7
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000ed00 	.word	0xe000ed00

08004f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	db0b      	blt.n	8004f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	f003 021f 	and.w	r2, r3, #31
 8004f70:	4907      	ldr	r1, [pc, #28]	; (8004f90 <__NVIC_EnableIRQ+0x38>)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2001      	movs	r0, #1
 8004f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e100 	.word	0xe000e100

08004f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db0a      	blt.n	8004fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <__NVIC_SetPriority+0x4c>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fbc:	e00a      	b.n	8004fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <__NVIC_SetPriority+0x50>)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	761a      	strb	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f1c3 0307 	rsb	r3, r3, #7
 8005002:	2b04      	cmp	r3, #4
 8005004:	bf28      	it	cs
 8005006:	2304      	movcs	r3, #4
 8005008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3304      	adds	r3, #4
 800500e:	2b06      	cmp	r3, #6
 8005010:	d902      	bls.n	8005018 <NVIC_EncodePriority+0x30>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	3b03      	subs	r3, #3
 8005016:	e000      	b.n	800501a <NVIC_EncodePriority+0x32>
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	401a      	ands	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	43d9      	mvns	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	4313      	orrs	r3, r2
         );
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005060:	d301      	bcc.n	8005066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <SysTick_Config+0x40>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506e:	210f      	movs	r1, #15
 8005070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005074:	f7ff ff8e 	bl	8004f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <SysTick_Config+0x40>)
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <SysTick_Config+0x40>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010

08005094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff29 	bl	8004ef4 <__NVIC_SetPriorityGrouping>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050bc:	f7ff ff3e 	bl	8004f3c <__NVIC_GetPriorityGrouping>
 80050c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7ff ff8e 	bl	8004fe8 <NVIC_EncodePriority>
 80050cc:	4602      	mov	r2, r0
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff5d 	bl	8004f94 <__NVIC_SetPriority>
}
 80050da:	bf00      	nop
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff31 	bl	8004f58 <__NVIC_EnableIRQ>
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ffa2 	bl	8005050 <SysTick_Config>
 800510c:	4603      	mov	r3, r0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7ff faf8 	bl	8004718 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d008      	beq.n	8005148 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e052      	b.n	80051ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0216 	bic.w	r2, r2, #22
 8005156:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005166:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <HAL_DMA_Abort+0x62>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0208 	bic.w	r2, r2, #8
 8005186:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005198:	e013      	b.n	80051c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800519a:	f7ff fabd 	bl	8004718 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d90c      	bls.n	80051c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e015      	b.n	80051ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d4:	223f      	movs	r2, #63	; 0x3f
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d004      	beq.n	8005214 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e00c      	b.n	800522e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2205      	movs	r2, #5
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <HAL_FLASH_Program+0xa0>)
 8005250:	7e1b      	ldrb	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_FLASH_Program+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e03b      	b.n	80052d2 <HAL_FLASH_Program+0x96>
 800525a:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_FLASH_Program+0xa0>)
 800525c:	2201      	movs	r2, #1
 800525e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005264:	f000 f870 	bl	8005348 <FLASH_WaitForLastOperation>
 8005268:	4603      	mov	r3, r0
 800526a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d12b      	bne.n	80052ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005278:	783b      	ldrb	r3, [r7, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f000 f91b 	bl	80054b8 <FLASH_Program_Byte>
 8005282:	e016      	b.n	80052b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800528a:	883b      	ldrh	r3, [r7, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f000 f8ee 	bl	8005470 <FLASH_Program_HalfWord>
 8005294:	e00d      	b.n	80052b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d105      	bne.n	80052a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	68b8      	ldr	r0, [r7, #8]
 80052a2:	f000 f8c3 	bl	800542c <FLASH_Program_Word>
 80052a6:	e004      	b.n	80052b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80052a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f000 f88b 	bl	80053c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052b6:	f000 f847 	bl	8005348 <FLASH_WaitForLastOperation>
 80052ba:	4603      	mov	r3, r0
 80052bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80052be:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <HAL_FLASH_Program+0xa4>)
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <HAL_FLASH_Program+0xa4>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_FLASH_Program+0xa0>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000cd0 	.word	0x20000cd0
 80052e0:	40023c00 	.word	0x40023c00

080052e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_FLASH_Unlock+0x38>)
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0b      	bge.n	800530e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_FLASH_Unlock+0x38>)
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <HAL_FLASH_Unlock+0x3c>)
 80052fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <HAL_FLASH_Unlock+0x38>)
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <HAL_FLASH_Unlock+0x40>)
 8005300:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_FLASH_Unlock+0x38>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da01      	bge.n	800530e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800530e:	79fb      	ldrb	r3, [r7, #7]
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	40023c00 	.word	0x40023c00
 8005320:	45670123 	.word	0x45670123
 8005324:	cdef89ab 	.word	0xcdef89ab

08005328 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_FLASH_Lock+0x1c>)
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_FLASH_Lock+0x1c>)
 8005332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005336:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40023c00 	.word	0x40023c00

08005348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <FLASH_WaitForLastOperation+0x78>)
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800535a:	f7ff f9dd 	bl	8004718 <HAL_GetTick>
 800535e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005360:	e010      	b.n	8005384 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d00c      	beq.n	8005384 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <FLASH_WaitForLastOperation+0x38>
 8005370:	f7ff f9d2 	bl	8004718 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d201      	bcs.n	8005384 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e019      	b.n	80053b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e8      	bne.n	8005362 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 800539e:	2201      	movs	r2, #1
 80053a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80053ae:	f000 f8a5 	bl	80054fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
  
}  
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000cd0 	.word	0x20000cd0
 80053c4:	40023c00 	.word	0x40023c00

080053c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	4a10      	ldr	r2, [pc, #64]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <FLASH_Program_DoubleWord+0x60>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80053fe:	f3bf 8f6f 	isb	sy
}
 8005402:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	000a      	movs	r2, r1
 8005412:	2300      	movs	r3, #0
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	3104      	adds	r1, #4
 8005418:	4613      	mov	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40023c00 	.word	0x40023c00

0800542c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <FLASH_Program_Word+0x40>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <FLASH_Program_Word+0x40>)
 800543c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005440:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <FLASH_Program_Word+0x40>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <FLASH_Program_Word+0x40>)
 8005448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800544c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <FLASH_Program_Word+0x40>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	4a06      	ldr	r2, [pc, #24]	; (800546c <FLASH_Program_Word+0x40>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40023c00 	.word	0x40023c00

08005470 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 800548e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <FLASH_Program_HalfWord+0x44>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	801a      	strh	r2, [r3, #0]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40023c00 	.word	0x40023c00

080054b8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054c4:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	4a06      	ldr	r2, [pc, #24]	; (80054f8 <FLASH_Program_Byte+0x40>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	701a      	strb	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40023c00 	.word	0x40023c00

080054fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005500:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f043 0310 	orr.w	r3, r3, #16
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005516:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005518:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 800551a:	2210      	movs	r2, #16
 800551c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800551e:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f043 0308 	orr.w	r3, r3, #8
 8005532:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005534:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005538:	2220      	movs	r2, #32
 800553a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800553c:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800555a:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005570:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005574:	2280      	movs	r2, #128	; 0x80
 8005576:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 800558e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 8005592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005596:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f043 0320 	orr.w	r3, r3, #32
 80055ac:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <FLASH_SetErrorCode+0xc8>)
 80055ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <FLASH_SetErrorCode+0xc4>)
 80055b2:	2202      	movs	r2, #2
 80055b4:	60da      	str	r2, [r3, #12]
  }
}
 80055b6:	bf00      	nop
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40023c00 	.word	0x40023c00
 80055c4:	20000cd0 	.word	0x20000cd0

080055c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_FLASHEx_Erase+0xd8>)
 80055dc:	7e1b      	ldrb	r3, [r3, #24]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_FLASHEx_Erase+0x1e>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e058      	b.n	8005698 <HAL_FLASHEx_Erase+0xd0>
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HAL_FLASHEx_Erase+0xd8>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055f0:	f7ff feaa 	bl	8005348 <FLASH_WaitForLastOperation>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d148      	bne.n	8005690 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005604:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d115      	bne.n	800563a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 f844 	bl	80056a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005620:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005624:	f7ff fe90 	bl	8005348 <FLASH_WaitForLastOperation>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_FLASHEx_Erase+0xdc>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <HAL_FLASHEx_Erase+0xdc>)
 8005632:	f023 0304 	bic.w	r3, r3, #4
 8005636:	6113      	str	r3, [r2, #16]
 8005638:	e028      	b.n	800568c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	e01c      	b.n	800567c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	4619      	mov	r1, r3
 800564a:	68b8      	ldr	r0, [r7, #8]
 800564c:	f000 f850 	bl	80056f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005654:	f7ff fe78 	bl	8005348 <FLASH_WaitForLastOperation>
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <HAL_FLASHEx_Erase+0xdc>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	4a10      	ldr	r2, [pc, #64]	; (80056a4 <HAL_FLASHEx_Erase+0xdc>)
 8005662:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005666:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	601a      	str	r2, [r3, #0]
          break;
 8005674:	e00a      	b.n	800568c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3301      	adds	r3, #1
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	4413      	add	r3, r2
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	429a      	cmp	r2, r3
 800568a:	d3da      	bcc.n	8005642 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800568c:	f000 f878 	bl	8005780 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005690:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <HAL_FLASHEx_Erase+0xd8>)
 8005692:	2200      	movs	r2, #0
 8005694:	761a      	strb	r2, [r3, #24]

  return status;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000cd0 	.word	0x20000cd0
 80056a4:	40023c00 	.word	0x40023c00

080056a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <FLASH_MassErase+0x44>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <FLASH_MassErase+0x44>)
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <FLASH_MassErase+0x44>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4a09      	ldr	r2, [pc, #36]	; (80056ec <FLASH_MassErase+0x44>)
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <FLASH_MassErase+0x44>)
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	4313      	orrs	r3, r2
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <FLASH_MassErase+0x44>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6113      	str	r3, [r2, #16]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40023c00 	.word	0x40023c00

080056f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e010      	b.n	800572e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d103      	bne.n	800571a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e009      	b.n	800572e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d103      	bne.n	8005728 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e002      	b.n	800572e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <FLASH_Erase_Sector+0x8c>)
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	490f      	ldr	r1, [pc, #60]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4a0c      	ldr	r2, [pc, #48]	; (800577c <FLASH_Erase_Sector+0x8c>)
 800574c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005750:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4313      	orrs	r3, r2
 800575c:	4a07      	ldr	r2, [pc, #28]	; (800577c <FLASH_Erase_Sector+0x8c>)
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <FLASH_Erase_Sector+0x8c>)
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <FLASH_Erase_Sector+0x8c>)
 800576a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576e:	6113      	str	r3, [r2, #16]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40023c00 	.word	0x40023c00

08005780 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <FLASH_FlushCaches+0x88>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <FLASH_FlushCaches+0x88>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <FLASH_FlushCaches+0x88>)
 8005796:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800579a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800579c:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <FLASH_FlushCaches+0x88>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a13      	ldr	r2, [pc, #76]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a07      	ldr	r2, [pc, #28]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a04      	ldr	r2, [pc, #16]	; (8005808 <FLASH_FlushCaches+0x88>)
 80057f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057fa:	6013      	str	r3, [r2, #0]
  }
}
 80057fc:	bf00      	nop
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00

0800580c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800580c:	b480      	push	{r7}
 800580e:	b089      	sub	sp, #36	; 0x24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	e159      	b.n	8005adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005828:	2201      	movs	r2, #1
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	429a      	cmp	r2, r3
 8005842:	f040 8148 	bne.w	8005ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d005      	beq.n	800585e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800585a:	2b02      	cmp	r3, #2
 800585c:	d130      	bne.n	80058c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	2203      	movs	r2, #3
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005894:	2201      	movs	r2, #1
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 0201 	and.w	r2, r3, #1
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d017      	beq.n	80058fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	2203      	movs	r2, #3
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d123      	bne.n	8005950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	08da      	lsrs	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3208      	adds	r2, #8
 8005910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	220f      	movs	r2, #15
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	08da      	lsrs	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3208      	adds	r2, #8
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2203      	movs	r2, #3
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 0203 	and.w	r2, r3, #3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a2 	beq.w	8005ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	4b57      	ldr	r3, [pc, #348]	; (8005af4 <HAL_GPIO_Init+0x2e8>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	4a56      	ldr	r2, [pc, #344]	; (8005af4 <HAL_GPIO_Init+0x2e8>)
 800599c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a0:	6453      	str	r3, [r2, #68]	; 0x44
 80059a2:	4b54      	ldr	r3, [pc, #336]	; (8005af4 <HAL_GPIO_Init+0x2e8>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ae:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_GPIO_Init+0x2ec>)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	3302      	adds	r3, #2
 80059b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	220f      	movs	r2, #15
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a49      	ldr	r2, [pc, #292]	; (8005afc <HAL_GPIO_Init+0x2f0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d019      	beq.n	8005a0e <HAL_GPIO_Init+0x202>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a48      	ldr	r2, [pc, #288]	; (8005b00 <HAL_GPIO_Init+0x2f4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_GPIO_Init+0x1fe>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a47      	ldr	r2, [pc, #284]	; (8005b04 <HAL_GPIO_Init+0x2f8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00d      	beq.n	8005a06 <HAL_GPIO_Init+0x1fa>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a46      	ldr	r2, [pc, #280]	; (8005b08 <HAL_GPIO_Init+0x2fc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <HAL_GPIO_Init+0x1f6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a45      	ldr	r2, [pc, #276]	; (8005b0c <HAL_GPIO_Init+0x300>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_GPIO_Init+0x1f2>
 80059fa:	2304      	movs	r3, #4
 80059fc:	e008      	b.n	8005a10 <HAL_GPIO_Init+0x204>
 80059fe:	2307      	movs	r3, #7
 8005a00:	e006      	b.n	8005a10 <HAL_GPIO_Init+0x204>
 8005a02:	2303      	movs	r3, #3
 8005a04:	e004      	b.n	8005a10 <HAL_GPIO_Init+0x204>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e002      	b.n	8005a10 <HAL_GPIO_Init+0x204>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_GPIO_Init+0x204>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	f002 0203 	and.w	r2, r2, #3
 8005a16:	0092      	lsls	r2, r2, #2
 8005a18:	4093      	lsls	r3, r2
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a20:	4935      	ldr	r1, [pc, #212]	; (8005af8 <HAL_GPIO_Init+0x2ec>)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	3302      	adds	r3, #2
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a52:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a58:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ad0:	4a0f      	ldr	r2, [pc, #60]	; (8005b10 <HAL_GPIO_Init+0x304>)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	f67f aea2 	bls.w	8005828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3724      	adds	r7, #36	; 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40013800 	.word	0x40013800
 8005afc:	40020000 	.word	0x40020000
 8005b00:	40020400 	.word	0x40020400
 8005b04:	40020800 	.word	0x40020800
 8005b08:	40020c00 	.word	0x40020c00
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40013c00 	.word	0x40013c00

08005b14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e0bb      	b.n	8005ca8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b30:	2201      	movs	r2, #1
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	f040 80ab 	bne.w	8005ca2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b4c:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_GPIO_DeInit+0x1ac>)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	3302      	adds	r3, #2
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	220f      	movs	r2, #15
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a54      	ldr	r2, [pc, #336]	; (8005cc4 <HAL_GPIO_DeInit+0x1b0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d019      	beq.n	8005baa <HAL_GPIO_DeInit+0x96>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a53      	ldr	r2, [pc, #332]	; (8005cc8 <HAL_GPIO_DeInit+0x1b4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_GPIO_DeInit+0x92>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a52      	ldr	r2, [pc, #328]	; (8005ccc <HAL_GPIO_DeInit+0x1b8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00d      	beq.n	8005ba2 <HAL_GPIO_DeInit+0x8e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a51      	ldr	r2, [pc, #324]	; (8005cd0 <HAL_GPIO_DeInit+0x1bc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_GPIO_DeInit+0x8a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a50      	ldr	r2, [pc, #320]	; (8005cd4 <HAL_GPIO_DeInit+0x1c0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_GPIO_DeInit+0x86>
 8005b96:	2304      	movs	r3, #4
 8005b98:	e008      	b.n	8005bac <HAL_GPIO_DeInit+0x98>
 8005b9a:	2307      	movs	r3, #7
 8005b9c:	e006      	b.n	8005bac <HAL_GPIO_DeInit+0x98>
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e004      	b.n	8005bac <HAL_GPIO_DeInit+0x98>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e002      	b.n	8005bac <HAL_GPIO_DeInit+0x98>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <HAL_GPIO_DeInit+0x98>
 8005baa:	2300      	movs	r3, #0
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	f002 0203 	and.w	r2, r2, #3
 8005bb2:	0092      	lsls	r2, r2, #2
 8005bb4:	4093      	lsls	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d132      	bne.n	8005c22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	4944      	ldr	r1, [pc, #272]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bca:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	4941      	ldr	r1, [pc, #260]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bd8:	4b3f      	ldr	r3, [pc, #252]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	493d      	ldr	r1, [pc, #244]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005be6:	4b3c      	ldr	r3, [pc, #240]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	493a      	ldr	r1, [pc, #232]	; (8005cd8 <HAL_GPIO_DeInit+0x1c4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	220f      	movs	r2, #15
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c04:	4a2e      	ldr	r2, [pc, #184]	; (8005cc0 <HAL_GPIO_DeInit+0x1ac>)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	43da      	mvns	r2, r3
 8005c14:	482a      	ldr	r0, [pc, #168]	; (8005cc0 <HAL_GPIO_DeInit+0x1ac>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	2103      	movs	r1, #3
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	08da      	lsrs	r2, r3, #3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3208      	adds	r2, #8
 8005c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	08d2      	lsrs	r2, r2, #3
 8005c58:	4019      	ands	r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3208      	adds	r2, #8
 8005c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2103      	movs	r1, #3
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	401a      	ands	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	2103      	movs	r1, #3
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	401a      	ands	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	f67f af40 	bls.w	8005b30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	40020000 	.word	0x40020000
 8005cc8:	40020400 	.word	0x40020400
 8005ccc:	40020800 	.word	0x40020800
 8005cd0:	40020c00 	.word	0x40020c00
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40013c00 	.word	0x40013c00

08005cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	887b      	ldrh	r3, [r7, #2]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e001      	b.n	8005cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d28:	e003      	b.n	8005d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	041a      	lsls	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d56:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc fdc8 	bl	80028f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40013c00 	.word	0x40013c00

08005d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e12b      	b.n	8005fda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb ffbe 	bl	8001d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f002 f8bc 	bl	8007f50 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4a81      	ldr	r2, [pc, #516]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d807      	bhi.n	8005df4 <HAL_I2C_Init+0x84>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a80      	ldr	r2, [pc, #512]	; (8005fe8 <HAL_I2C_Init+0x278>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bf94      	ite	ls
 8005dec:	2301      	movls	r3, #1
 8005dee:	2300      	movhi	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e006      	b.n	8005e02 <HAL_I2C_Init+0x92>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a7d      	ldr	r2, [pc, #500]	; (8005fec <HAL_I2C_Init+0x27c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	bf94      	ite	ls
 8005dfc:	2301      	movls	r3, #1
 8005dfe:	2300      	movhi	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0e7      	b.n	8005fda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a78      	ldr	r2, [pc, #480]	; (8005ff0 <HAL_I2C_Init+0x280>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0c9b      	lsrs	r3, r3, #18
 8005e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a6a      	ldr	r2, [pc, #424]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d802      	bhi.n	8005e44 <HAL_I2C_Init+0xd4>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	3301      	adds	r3, #1
 8005e42:	e009      	b.n	8005e58 <HAL_I2C_Init+0xe8>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	4a69      	ldr	r2, [pc, #420]	; (8005ff4 <HAL_I2C_Init+0x284>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	3301      	adds	r3, #1
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	495c      	ldr	r1, [pc, #368]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005e74:	428b      	cmp	r3, r1
 8005e76:	d819      	bhi.n	8005eac <HAL_I2C_Init+0x13c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1e59      	subs	r1, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_I2C_Init+0x138>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1e59      	subs	r1, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea6:	e051      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e04f      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d111      	bne.n	8005ed8 <HAL_I2C_Init+0x168>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1e58      	subs	r0, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	440b      	add	r3, r1
 8005ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e012      	b.n	8005efe <HAL_I2C_Init+0x18e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1e58      	subs	r0, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	0099      	lsls	r1, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Init+0x196>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e022      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10e      	bne.n	8005f2c <HAL_I2C_Init+0x1bc>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1e58      	subs	r0, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6859      	ldr	r1, [r3, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	440b      	add	r3, r1
 8005f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f20:	3301      	adds	r3, #1
 8005f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	e00f      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	6809      	ldr	r1, [r1, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6911      	ldr	r1, [r2, #16]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68d2      	ldr	r2, [r2, #12]
 8005f86:	4311      	orrs	r1, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	000186a0 	.word	0x000186a0
 8005fe8:	001e847f 	.word	0x001e847f
 8005fec:	003d08ff 	.word	0x003d08ff
 8005ff0:	431bde83 	.word	0x431bde83
 8005ff4:	10624dd3 	.word	0x10624dd3

08005ff8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e021      	b.n	800604e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	; 0x24
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fb fec0 	bl	8001da8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006072:	f7fe fb51 	bl	8004718 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b20      	cmp	r3, #32
 8006082:	f040 80d9 	bne.w	8006238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2319      	movs	r3, #25
 800608c:	2201      	movs	r2, #1
 800608e:	496d      	ldr	r1, [pc, #436]	; (8006244 <HAL_I2C_Mem_Write+0x1ec>)
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fc8d 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
 800609e:	e0cc      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_I2C_Mem_Write+0x56>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e0c5      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d007      	beq.n	80060d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2221      	movs	r2, #33	; 0x21
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a4d      	ldr	r2, [pc, #308]	; (8006248 <HAL_I2C_Mem_Write+0x1f0>)
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006116:	88f8      	ldrh	r0, [r7, #6]
 8006118:	893a      	ldrh	r2, [r7, #8]
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	4603      	mov	r3, r0
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fac4 	bl	80066b4 <I2C_RequestMemoryWrite>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d052      	beq.n	80061d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e081      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fd0e 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b04      	cmp	r3, #4
 800614c:	d107      	bne.n	800615e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e06b      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	781a      	ldrb	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d11b      	bne.n	80061d8 <HAL_I2C_Mem_Write+0x180>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1aa      	bne.n	8006136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fcfa 	bl	8006bde <I2C_WaitOnBTFFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d107      	bne.n	8006208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e016      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e000      	b.n	800623a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	00100002 	.word	0x00100002
 8006248:	ffff0000 	.word	0xffff0000

0800624c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	4603      	mov	r3, r0
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	460b      	mov	r3, r1
 8006260:	813b      	strh	r3, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006266:	f7fe fa57 	bl	8004718 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b20      	cmp	r3, #32
 8006276:	f040 8208 	bne.w	800668a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2319      	movs	r3, #25
 8006280:	2201      	movs	r2, #1
 8006282:	497b      	ldr	r1, [pc, #492]	; (8006470 <HAL_I2C_Mem_Read+0x224>)
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fb93 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
 8006292:	e1fb      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_I2C_Mem_Read+0x56>
 800629e:	2302      	movs	r3, #2
 80062a0:	e1f4      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d007      	beq.n	80062c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2222      	movs	r2, #34	; 0x22
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2240      	movs	r2, #64	; 0x40
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4a5b      	ldr	r2, [pc, #364]	; (8006474 <HAL_I2C_Mem_Read+0x228>)
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800630a:	88f8      	ldrh	r0, [r7, #6]
 800630c:	893a      	ldrh	r2, [r7, #8]
 800630e:	8979      	ldrh	r1, [r7, #10]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	4603      	mov	r3, r0
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa60 	bl	80067e0 <I2C_RequestMemoryRead>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1b0      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d113      	bne.n	800635a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e184      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635e:	2b01      	cmp	r3, #1
 8006360:	d11b      	bne.n	800639a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e164      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d11b      	bne.n	80063da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c2:	2300      	movs	r3, #0
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	e144      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063f0:	e138      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	f200 80f1 	bhi.w	80065de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	2b01      	cmp	r3, #1
 8006402:	d123      	bne.n	800644c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fc29 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e139      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	855a      	strh	r2, [r3, #42]	; 0x2a
 800644a:	e10b      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	2b02      	cmp	r3, #2
 8006452:	d14e      	bne.n	80064f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	2200      	movs	r2, #0
 800645c:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_I2C_Mem_Read+0x22c>)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 faa6 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e10e      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
 800646e:	bf00      	nop
 8006470:	00100002 	.word	0x00100002
 8006474:	ffff0000 	.word	0xffff0000
 8006478:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064f0:	e0b8      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2200      	movs	r2, #0
 80064fa:	4966      	ldr	r1, [pc, #408]	; (8006694 <HAL_I2C_Mem_Read+0x448>)
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa57 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0bf      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2200      	movs	r2, #0
 8006556:	494f      	ldr	r1, [pc, #316]	; (8006694 <HAL_I2C_Mem_Read+0x448>)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fa29 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e091      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065dc:	e042      	b.n	8006664 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fb3c 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e04c      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d118      	bne.n	8006664 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f aec2 	bne.w	80063f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800668a:	2302      	movs	r3, #2
  }
}
 800668c:	4618      	mov	r0, r3
 800668e:	3728      	adds	r7, #40	; 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	00010004 	.word	0x00010004

08006698 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a6:	b2db      	uxtb	r3, r3
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	817b      	strh	r3, [r7, #10]
 80066c6:	460b      	mov	r3, r1
 80066c8:	813b      	strh	r3, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f960 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006704:	d103      	bne.n	800670e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e05f      	b.n	80067d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	492d      	ldr	r1, [pc, #180]	; (80067dc <I2C_RequestMemoryWrite+0x128>)
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f998 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e04c      	b.n	80067d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006750:	6a39      	ldr	r1, [r7, #32]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fa02 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b04      	cmp	r3, #4
 8006764:	d107      	bne.n	8006776 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e02b      	b.n	80067d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d105      	bne.n	800678c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	b2da      	uxtb	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	611a      	str	r2, [r3, #16]
 800678a:	e021      	b.n	80067d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800678c:	893b      	ldrh	r3, [r7, #8]
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	b29b      	uxth	r3, r3
 8006792:	b2da      	uxtb	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679c:	6a39      	ldr	r1, [r7, #32]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f9dc 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d107      	bne.n	80067c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e005      	b.n	80067d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	00010002 	.word	0x00010002

080067e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	4608      	mov	r0, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	461a      	mov	r2, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	817b      	strh	r3, [r7, #10]
 80067f2:	460b      	mov	r3, r1
 80067f4:	813b      	strh	r3, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006808:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2200      	movs	r2, #0
 8006822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f8c2 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d103      	bne.n	800684a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0aa      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800684e:	897b      	ldrh	r3, [r7, #10]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800685c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	4952      	ldr	r1, [pc, #328]	; (80069ac <I2C_RequestMemoryRead+0x1cc>)
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f8fa 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e097      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	6a39      	ldr	r1, [r7, #32]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f964 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d107      	bne.n	80068b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e076      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d105      	bne.n	80068c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068bc:	893b      	ldrh	r3, [r7, #8]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	611a      	str	r2, [r3, #16]
 80068c6:	e021      	b.n	800690c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	6a39      	ldr	r1, [r7, #32]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f93e 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00d      	beq.n	8006902 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d107      	bne.n	80068fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e050      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006902:	893b      	ldrh	r3, [r7, #8]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800690c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690e:	6a39      	ldr	r1, [r7, #32]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f923 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b04      	cmp	r3, #4
 8006922:	d107      	bne.n	8006934 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006932:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e035      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006946:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	2200      	movs	r2, #0
 8006950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f82b 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	d103      	bne.n	8006978 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e013      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800697c:	897b      	ldrh	r3, [r7, #10]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	4906      	ldr	r1, [pc, #24]	; (80069ac <I2C_RequestMemoryRead+0x1cc>)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f863 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	00010002 	.word	0x00010002

080069b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c0:	e025      	b.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c8:	d021      	beq.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fd fea5 	bl	8004718 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d116      	bne.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e023      	b.n	8006a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10d      	bne.n	8006a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	e00c      	b.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	2301      	moveq	r3, #1
 8006a48:	2300      	movne	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d0b6      	beq.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a6c:	e051      	b.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d123      	bne.n	8006ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f043 0204 	orr.w	r2, r3, #4
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e046      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006acc:	d021      	beq.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fd fe23 	bl	8004718 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d116      	bne.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e020      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10c      	bne.n	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	43da      	mvns	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e00b      	b.n	8006b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d18d      	bne.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b68:	e02d      	b.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f8ce 	bl	8006d0c <I2C_IsAcknowledgeFailed>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e02d      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b80:	d021      	beq.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fd fdc9 	bl	8004718 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d116      	bne.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e007      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d1ca      	bne.n	8006b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bea:	e02d      	b.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f88d 	bl	8006d0c <I2C_IsAcknowledgeFailed>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e02d      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c02:	d021      	beq.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c04:	f7fd fd88 	bl	8004718 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d116      	bne.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e007      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d1ca      	bne.n	8006bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c6c:	e042      	b.n	8006cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d119      	bne.n	8006cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0210 	mvn.w	r2, #16
 8006c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e029      	b.n	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb0:	f7fd fd32 	bl	8004718 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e007      	b.n	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d1b5      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d22:	d11b      	bne.n	8006d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f043 0204 	orr.w	r2, r3, #4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e128      	b.n	8006fd0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a90      	ldr	r2, [pc, #576]	; (8006fd8 <HAL_I2S_Init+0x26c>)
 8006d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fb f885 	bl	8001ea8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006db4:	f023 030f 	bic.w	r3, r3, #15
 8006db8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d060      	beq.n	8006e8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d102      	bne.n	8006dd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	e001      	b.n	8006ddc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006dd8:	2320      	movs	r3, #32
 8006dda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d802      	bhi.n	8006dea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006dea:	2001      	movs	r0, #1
 8006dec:	f001 f9c8 	bl	8008180 <HAL_RCCEx_GetPeriphCLKFreq>
 8006df0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfa:	d125      	bne.n	8006e48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d010      	beq.n	8006e26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	3305      	adds	r3, #5
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	e01f      	b.n	8006e66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	461a      	mov	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e42:	3305      	adds	r3, #5
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	e00e      	b.n	8006e66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	3305      	adds	r3, #5
 8006e64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4a5c      	ldr	r2, [pc, #368]	; (8006fdc <HAL_I2S_Init+0x270>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	08db      	lsrs	r3, r3, #3
 8006e70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e003      	b.n	8006e94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d902      	bls.n	8006ea0 <HAL_I2S_Init+0x134>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2bff      	cmp	r3, #255	; 0xff
 8006e9e:	d907      	bls.n	8006eb0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	f043 0210 	orr.w	r2, r3, #16
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e08f      	b.n	8006fd0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	ea42 0103 	orr.w	r1, r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ece:	f023 030f 	bic.w	r3, r3, #15
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6851      	ldr	r1, [r2, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	4311      	orrs	r1, r2
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68d2      	ldr	r2, [r2, #12]
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6992      	ldr	r2, [r2, #24]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d161      	bne.n	8006fc0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a38      	ldr	r2, [pc, #224]	; (8006fe0 <HAL_I2S_Init+0x274>)
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a37      	ldr	r2, [pc, #220]	; (8006fe4 <HAL_I2S_Init+0x278>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <HAL_I2S_Init+0x1a4>
 8006f0c:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <HAL_I2S_Init+0x27c>)
 8006f0e:	e001      	b.n	8006f14 <HAL_I2S_Init+0x1a8>
 8006f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	4932      	ldr	r1, [pc, #200]	; (8006fe4 <HAL_I2S_Init+0x278>)
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	d101      	bne.n	8006f24 <HAL_I2S_Init+0x1b8>
 8006f20:	4a31      	ldr	r2, [pc, #196]	; (8006fe8 <HAL_I2S_Init+0x27c>)
 8006f22:	e001      	b.n	8006f28 <HAL_I2S_Init+0x1bc>
 8006f24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006f28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f2c:	f023 030f 	bic.w	r3, r3, #15
 8006f30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <HAL_I2S_Init+0x278>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d101      	bne.n	8006f40 <HAL_I2S_Init+0x1d4>
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <HAL_I2S_Init+0x27c>)
 8006f3e:	e001      	b.n	8006f44 <HAL_I2S_Init+0x1d8>
 8006f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f44:	2202      	movs	r2, #2
 8006f46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	; (8006fe4 <HAL_I2S_Init+0x278>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d101      	bne.n	8006f56 <HAL_I2S_Init+0x1ea>
 8006f52:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <HAL_I2S_Init+0x27c>)
 8006f54:	e001      	b.n	8006f5a <HAL_I2S_Init+0x1ee>
 8006f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f66:	d003      	beq.n	8006f70 <HAL_I2S_Init+0x204>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	e001      	b.n	8006f7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f86:	4313      	orrs	r3, r2
 8006f88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f90:	4313      	orrs	r3, r2
 8006f92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fa8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <HAL_I2S_Init+0x278>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <HAL_I2S_Init+0x24c>
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <HAL_I2S_Init+0x27c>)
 8006fb6:	e001      	b.n	8006fbc <HAL_I2S_Init+0x250>
 8006fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fbc:	897a      	ldrh	r2, [r7, #10]
 8006fbe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	080070a7 	.word	0x080070a7
 8006fdc:	cccccccd 	.word	0xcccccccd
 8006fe0:	080071bd 	.word	0x080071bd
 8006fe4:	40003800 	.word	0x40003800
 8006fe8:	40003400 	.word	0x40003400

08006fec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	881a      	ldrh	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10e      	bne.n	8007040 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007030:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fd faa0 	bl	8004580 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	b292      	uxth	r2, r2
 800705c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10e      	bne.n	800709e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800708e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fd fa91 	bl	80045c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d13a      	bne.n	8007138 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d109      	bne.n	80070e0 <I2S_IRQHandler+0x3a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d102      	bne.n	80070e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ffb4 	bl	8007048 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d126      	bne.n	8007138 <I2S_IRQHandler+0x92>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d11f      	bne.n	8007138 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007106:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fd fa5c 	bl	80045f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b03      	cmp	r3, #3
 8007142:	d136      	bne.n	80071b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b02      	cmp	r3, #2
 800714c:	d109      	bne.n	8007162 <I2S_IRQHandler+0xbc>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007158:	2b80      	cmp	r3, #128	; 0x80
 800715a:	d102      	bne.n	8007162 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff45 	bl	8006fec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b08      	cmp	r3, #8
 800716a:	d122      	bne.n	80071b2 <I2S_IRQHandler+0x10c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b20      	cmp	r3, #32
 8007178:	d11b      	bne.n	80071b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007188:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	f043 0204 	orr.w	r2, r3, #4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fd fa1f 	bl	80045f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071b2:	bf00      	nop
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a92      	ldr	r2, [pc, #584]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d101      	bne.n	80071da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80071d6:	4b92      	ldr	r3, [pc, #584]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071d8:	e001      	b.n	80071de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80071da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a8b      	ldr	r2, [pc, #556]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d101      	bne.n	80071f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80071f4:	4b8a      	ldr	r3, [pc, #552]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071f6:	e001      	b.n	80071fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80071f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d004      	beq.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f040 8099 	bne.w	8007346 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b02      	cmp	r3, #2
 800721c:	d107      	bne.n	800722e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f925 	bl	8007478 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d107      	bne.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9c8 	bl	80075d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d13a      	bne.n	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d035      	beq.n	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6e      	ldr	r2, [pc, #440]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d101      	bne.n	800726a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007266:	4b6e      	ldr	r3, [pc, #440]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007268:	e001      	b.n	800726e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800726a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4969      	ldr	r1, [pc, #420]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007276:	428b      	cmp	r3, r1
 8007278:	d101      	bne.n	800727e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800727a:	4b69      	ldr	r3, [pc, #420]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800727c:	e001      	b.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800727e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007286:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007296:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fd f994 	bl	80045f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	f040 80c3 	bne.w	800745a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80bd 	beq.w	800745a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a49      	ldr	r2, [pc, #292]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d101      	bne.n	80072fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80072fa:	4b49      	ldr	r3, [pc, #292]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072fc:	e001      	b.n	8007302 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80072fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4944      	ldr	r1, [pc, #272]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800730a:	428b      	cmp	r3, r1
 800730c:	d101      	bne.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800730e:	4b44      	ldr	r3, [pc, #272]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007310:	e001      	b.n	8007316 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800731a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800731c:	2300      	movs	r3, #0
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007336:	f043 0204 	orr.w	r2, r3, #4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fd f956 	bl	80045f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007344:	e089      	b.n	800745a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d107      	bne.n	8007360 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f8be 	bl	80074dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b01      	cmp	r3, #1
 8007368:	d107      	bne.n	800737a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8fd 	bl	8007574 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d12f      	bne.n	80073e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02a      	beq.n	80073e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800739c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1e      	ldr	r2, [pc, #120]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80073a8:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073aa:	e001      	b.n	80073b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80073ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4919      	ldr	r1, [pc, #100]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073b8:	428b      	cmp	r3, r1
 80073ba:	d101      	bne.n	80073c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80073bc:	4b18      	ldr	r3, [pc, #96]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073be:	e001      	b.n	80073c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80073c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	f043 0202 	orr.w	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fd f906 	bl	80045f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d136      	bne.n	800745c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d031      	beq.n	800745c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a07      	ldr	r2, [pc, #28]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d101      	bne.n	8007406 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007402:	4b07      	ldr	r3, [pc, #28]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007404:	e001      	b.n	800740a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4902      	ldr	r1, [pc, #8]	; (800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007412:	428b      	cmp	r3, r1
 8007414:	d106      	bne.n	8007424 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007416:	4b02      	ldr	r3, [pc, #8]	; (8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007418:	e006      	b.n	8007428 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800741a:	bf00      	nop
 800741c:	40003800 	.word	0x40003800
 8007420:	40003400 	.word	0x40003400
 8007424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007428:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800742c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800743c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f043 0204 	orr.w	r2, r3, #4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fd f8cc 	bl	80045f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007458:	e000      	b.n	800745c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800745a:	bf00      	nop
}
 800745c:	bf00      	nop
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	1c99      	adds	r1, r3, #2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6251      	str	r1, [r2, #36]	; 0x24
 800748a:	881a      	ldrh	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d113      	bne.n	80074d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ffc9 	bl	8007464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	1c99      	adds	r1, r3, #2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6251      	str	r1, [r2, #36]	; 0x24
 80074ee:	8819      	ldrh	r1, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1d      	ldr	r2, [pc, #116]	; (800756c <I2SEx_TxISR_I2SExt+0x90>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d101      	bne.n	80074fe <I2SEx_TxISR_I2SExt+0x22>
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <I2SEx_TxISR_I2SExt+0x94>)
 80074fc:	e001      	b.n	8007502 <I2SEx_TxISR_I2SExt+0x26>
 80074fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007502:	460a      	mov	r2, r1
 8007504:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d121      	bne.n	8007562 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <I2SEx_TxISR_I2SExt+0x90>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <I2SEx_TxISR_I2SExt+0x50>
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <I2SEx_TxISR_I2SExt+0x94>)
 800752a:	e001      	b.n	8007530 <I2SEx_TxISR_I2SExt+0x54>
 800752c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	490d      	ldr	r1, [pc, #52]	; (800756c <I2SEx_TxISR_I2SExt+0x90>)
 8007538:	428b      	cmp	r3, r1
 800753a:	d101      	bne.n	8007540 <I2SEx_TxISR_I2SExt+0x64>
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <I2SEx_TxISR_I2SExt+0x94>)
 800753e:	e001      	b.n	8007544 <I2SEx_TxISR_I2SExt+0x68>
 8007540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007548:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff ff81 	bl	8007464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40003800 	.word	0x40003800
 8007570:	40003400 	.word	0x40003400

08007574 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68d8      	ldr	r0, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	1c99      	adds	r1, r3, #2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800758c:	b282      	uxth	r2, r0
 800758e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d113      	bne.n	80075d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff4a 	bl	8007464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a20      	ldr	r2, [pc, #128]	; (8007668 <I2SEx_RxISR_I2SExt+0x90>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d101      	bne.n	80075ee <I2SEx_RxISR_I2SExt+0x16>
 80075ea:	4b20      	ldr	r3, [pc, #128]	; (800766c <I2SEx_RxISR_I2SExt+0x94>)
 80075ec:	e001      	b.n	80075f2 <I2SEx_RxISR_I2SExt+0x1a>
 80075ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075f2:	68d8      	ldr	r0, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	1c99      	adds	r1, r3, #2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80075fe:	b282      	uxth	r2, r0
 8007600:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d121      	bne.n	800765e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a12      	ldr	r2, [pc, #72]	; (8007668 <I2SEx_RxISR_I2SExt+0x90>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d101      	bne.n	8007628 <I2SEx_RxISR_I2SExt+0x50>
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <I2SEx_RxISR_I2SExt+0x94>)
 8007626:	e001      	b.n	800762c <I2SEx_RxISR_I2SExt+0x54>
 8007628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	490d      	ldr	r1, [pc, #52]	; (8007668 <I2SEx_RxISR_I2SExt+0x90>)
 8007634:	428b      	cmp	r3, r1
 8007636:	d101      	bne.n	800763c <I2SEx_RxISR_I2SExt+0x64>
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <I2SEx_RxISR_I2SExt+0x94>)
 800763a:	e001      	b.n	8007640 <I2SEx_RxISR_I2SExt+0x68>
 800763c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007644:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d106      	bne.n	800765e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff03 	bl	8007464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40003800 	.word	0x40003800
 800766c:	40003400 	.word	0x40003400

08007670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e267      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d075      	beq.n	800777a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800768e:	4b88      	ldr	r3, [pc, #544]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b04      	cmp	r3, #4
 8007698:	d00c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800769a:	4b85      	ldr	r3, [pc, #532]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d112      	bne.n	80076cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076a6:	4b82      	ldr	r3, [pc, #520]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b2:	d10b      	bne.n	80076cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	4b7e      	ldr	r3, [pc, #504]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d05b      	beq.n	8007778 <HAL_RCC_OscConfig+0x108>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d157      	bne.n	8007778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e242      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d106      	bne.n	80076e4 <HAL_RCC_OscConfig+0x74>
 80076d6:	4b76      	ldr	r3, [pc, #472]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a75      	ldr	r2, [pc, #468]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e01d      	b.n	8007720 <HAL_RCC_OscConfig+0xb0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ec:	d10c      	bne.n	8007708 <HAL_RCC_OscConfig+0x98>
 80076ee:	4b70      	ldr	r3, [pc, #448]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a6f      	ldr	r2, [pc, #444]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4b6d      	ldr	r3, [pc, #436]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6c      	ldr	r2, [pc, #432]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e00b      	b.n	8007720 <HAL_RCC_OscConfig+0xb0>
 8007708:	4b69      	ldr	r3, [pc, #420]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a68      	ldr	r2, [pc, #416]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800770e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b66      	ldr	r3, [pc, #408]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a65      	ldr	r2, [pc, #404]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800771a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800771e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d013      	beq.n	8007750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fc fff6 	bl	8004718 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007730:	f7fc fff2 	bl	8004718 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	; 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e207      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007742:	4b5b      	ldr	r3, [pc, #364]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0xc0>
 800774e:	e014      	b.n	800777a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fc ffe2 	bl	8004718 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007758:	f7fc ffde 	bl	8004718 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	; 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e1f3      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0xe8>
 8007776:	e000      	b.n	800777a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d063      	beq.n	800784e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007786:	4b4a      	ldr	r3, [pc, #296]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007792:	4b47      	ldr	r3, [pc, #284]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800779a:	2b08      	cmp	r3, #8
 800779c:	d11c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800779e:	4b44      	ldr	r3, [pc, #272]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d116      	bne.n	80077d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_RCC_OscConfig+0x152>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d001      	beq.n	80077c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1c7      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c2:	4b3b      	ldr	r3, [pc, #236]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4937      	ldr	r1, [pc, #220]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d6:	e03a      	b.n	800784e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077e0:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <HAL_RCC_OscConfig+0x244>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e6:	f7fc ff97 	bl	8004718 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fc ff93 	bl	8004718 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e1a8      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007800:	4b2b      	ldr	r3, [pc, #172]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b28      	ldr	r3, [pc, #160]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4925      	ldr	r1, [pc, #148]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 800781c:	4313      	orrs	r3, r2
 800781e:	600b      	str	r3, [r1, #0]
 8007820:	e015      	b.n	800784e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <HAL_RCC_OscConfig+0x244>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fc ff76 	bl	8004718 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007830:	f7fc ff72 	bl	8004718 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e187      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007842:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d036      	beq.n	80078c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <HAL_RCC_OscConfig+0x248>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007868:	f7fc ff56 	bl	8004718 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007870:	f7fc ff52 	bl	8004718 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e167      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <HAL_RCC_OscConfig+0x240>)
 8007884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x200>
 800788e:	e01b      	b.n	80078c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <HAL_RCC_OscConfig+0x248>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007896:	f7fc ff3f 	bl	8004718 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800789c:	e00e      	b.n	80078bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800789e:	f7fc ff3b 	bl	8004718 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d907      	bls.n	80078bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e150      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
 80078b0:	40023800 	.word	0x40023800
 80078b4:	42470000 	.word	0x42470000
 80078b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078bc:	4b88      	ldr	r3, [pc, #544]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80078be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1ea      	bne.n	800789e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8097 	beq.w	8007a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078d6:	2300      	movs	r3, #0
 80078d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078da:	4b81      	ldr	r3, [pc, #516]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10f      	bne.n	8007906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	4b7d      	ldr	r3, [pc, #500]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	4a7c      	ldr	r2, [pc, #496]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80078f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f4:	6413      	str	r3, [r2, #64]	; 0x40
 80078f6:	4b7a      	ldr	r3, [pc, #488]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007906:	4b77      	ldr	r3, [pc, #476]	; (8007ae4 <HAL_RCC_OscConfig+0x474>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d118      	bne.n	8007944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007912:	4b74      	ldr	r3, [pc, #464]	; (8007ae4 <HAL_RCC_OscConfig+0x474>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a73      	ldr	r2, [pc, #460]	; (8007ae4 <HAL_RCC_OscConfig+0x474>)
 8007918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800791e:	f7fc fefb 	bl	8004718 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007926:	f7fc fef7 	bl	8004718 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e10c      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007938:	4b6a      	ldr	r3, [pc, #424]	; (8007ae4 <HAL_RCC_OscConfig+0x474>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f0      	beq.n	8007926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d106      	bne.n	800795a <HAL_RCC_OscConfig+0x2ea>
 800794c:	4b64      	ldr	r3, [pc, #400]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	4a63      	ldr	r2, [pc, #396]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	6713      	str	r3, [r2, #112]	; 0x70
 8007958:	e01c      	b.n	8007994 <HAL_RCC_OscConfig+0x324>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b05      	cmp	r3, #5
 8007960:	d10c      	bne.n	800797c <HAL_RCC_OscConfig+0x30c>
 8007962:	4b5f      	ldr	r3, [pc, #380]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	4a5e      	ldr	r2, [pc, #376]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007968:	f043 0304 	orr.w	r3, r3, #4
 800796c:	6713      	str	r3, [r2, #112]	; 0x70
 800796e:	4b5c      	ldr	r3, [pc, #368]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	4a5b      	ldr	r2, [pc, #364]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	6713      	str	r3, [r2, #112]	; 0x70
 800797a:	e00b      	b.n	8007994 <HAL_RCC_OscConfig+0x324>
 800797c:	4b58      	ldr	r3, [pc, #352]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	4a57      	ldr	r2, [pc, #348]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	6713      	str	r3, [r2, #112]	; 0x70
 8007988:	4b55      	ldr	r3, [pc, #340]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	4a54      	ldr	r2, [pc, #336]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 800798e:	f023 0304 	bic.w	r3, r3, #4
 8007992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799c:	f7fc febc 	bl	8004718 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a2:	e00a      	b.n	80079ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a4:	f7fc feb8 	bl	8004718 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e0cb      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ba:	4b49      	ldr	r3, [pc, #292]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0ee      	beq.n	80079a4 <HAL_RCC_OscConfig+0x334>
 80079c6:	e014      	b.n	80079f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079c8:	f7fc fea6 	bl	8004718 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ce:	e00a      	b.n	80079e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079d0:	f7fc fea2 	bl	8004718 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	4293      	cmp	r3, r2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e0b5      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e6:	4b3e      	ldr	r3, [pc, #248]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1ee      	bne.n	80079d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d105      	bne.n	8007a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f8:	4b39      	ldr	r3, [pc, #228]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	4a38      	ldr	r2, [pc, #224]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 80079fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80a1 	beq.w	8007b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a0e:	4b34      	ldr	r3, [pc, #208]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d05c      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d141      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a22:	4b31      	ldr	r3, [pc, #196]	; (8007ae8 <HAL_RCC_OscConfig+0x478>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a28:	f7fc fe76 	bl	8004718 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fc fe72 	bl	8004718 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e087      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a42:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69da      	ldr	r2, [r3, #28]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	019b      	lsls	r3, r3, #6
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	061b      	lsls	r3, r3, #24
 8007a72:	491b      	ldr	r1, [pc, #108]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a78:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <HAL_RCC_OscConfig+0x478>)
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7e:	f7fc fe4b 	bl	8004718 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a86:	f7fc fe47 	bl	8004718 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e05c      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0x416>
 8007aa4:	e054      	b.n	8007b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <HAL_RCC_OscConfig+0x478>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aac:	f7fc fe34 	bl	8004718 <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab4:	f7fc fe30 	bl	8004718 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e045      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac6:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x444>
 8007ad2:	e03d      	b.n	8007b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d107      	bne.n	8007aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e038      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	40007000 	.word	0x40007000
 8007ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_RCC_OscConfig+0x4ec>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d028      	beq.n	8007b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d121      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d11a      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d111      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	3b01      	subs	r3, #1
 8007b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d001      	beq.n	8007b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40023800 	.word	0x40023800

08007b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0cc      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b74:	4b68      	ldr	r3, [pc, #416]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d90c      	bls.n	8007b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b82:	4b65      	ldr	r3, [pc, #404]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8a:	4b63      	ldr	r3, [pc, #396]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d001      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0b8      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb4:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	4a58      	ldr	r2, [pc, #352]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bcc:	4b53      	ldr	r3, [pc, #332]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	4a52      	ldr	r2, [pc, #328]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd8:	4b50      	ldr	r3, [pc, #320]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	494d      	ldr	r1, [pc, #308]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d044      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfe:	4b47      	ldr	r3, [pc, #284]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d119      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e07f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d003      	beq.n	8007c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e06f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2e:	4b3b      	ldr	r3, [pc, #236]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e067      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c3e:	4b37      	ldr	r3, [pc, #220]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f023 0203 	bic.w	r2, r3, #3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	4934      	ldr	r1, [pc, #208]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c50:	f7fc fd62 	bl	8004718 <HAL_GetTick>
 8007c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c56:	e00a      	b.n	8007c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c58:	f7fc fd5e 	bl	8004718 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e04f      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 020c 	and.w	r2, r3, #12
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1eb      	bne.n	8007c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d20c      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8e:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c96:	4b20      	ldr	r3, [pc, #128]	; (8007d18 <HAL_RCC_ClockConfig+0x1b8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e032      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb4:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4916      	ldr	r1, [pc, #88]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	490e      	ldr	r1, [pc, #56]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ce6:	f000 f821 	bl	8007d2c <HAL_RCC_GetSysClockFreq>
 8007cea:	4602      	mov	r2, r0
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	091b      	lsrs	r3, r3, #4
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	490a      	ldr	r1, [pc, #40]	; (8007d20 <HAL_RCC_ClockConfig+0x1c0>)
 8007cf8:	5ccb      	ldrb	r3, [r1, r3]
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d02:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fc fcc2 	bl	8004690 <HAL_InitTick>

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	40023c00 	.word	0x40023c00
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	0800b954 	.word	0x0800b954
 8007d24:	20000008 	.word	0x20000008
 8007d28:	20000078 	.word	0x20000078

08007d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d30:	b094      	sub	sp, #80	; 0x50
 8007d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	647b      	str	r3, [r7, #68]	; 0x44
 8007d38:	2300      	movs	r3, #0
 8007d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d44:	4b79      	ldr	r3, [pc, #484]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 030c 	and.w	r3, r3, #12
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d00d      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x40>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	f200 80e1 	bhi.w	8007f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x34>
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d5e:	e0db      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d60:	4b73      	ldr	r3, [pc, #460]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d64:	e0db      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d66:	4b73      	ldr	r3, [pc, #460]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d6a:	e0d8      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d6c:	4b6f      	ldr	r3, [pc, #444]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d76:	4b6d      	ldr	r3, [pc, #436]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d063      	beq.n	8007e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d82:	4b6a      	ldr	r3, [pc, #424]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	2200      	movs	r2, #0
 8007d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	633b      	str	r3, [r7, #48]	; 0x30
 8007d96:	2300      	movs	r3, #0
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
 8007d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f04f 0100 	mov.w	r1, #0
 8007daa:	0159      	lsls	r1, r3, #5
 8007dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007db0:	0150      	lsls	r0, r2, #5
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4621      	mov	r1, r4
 8007db8:	1a51      	subs	r1, r2, r1
 8007dba:	6139      	str	r1, [r7, #16]
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	018b      	lsls	r3, r1, #6
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dda:	4651      	mov	r1, sl
 8007ddc:	018a      	lsls	r2, r1, #6
 8007dde:	4651      	mov	r1, sl
 8007de0:	ebb2 0801 	subs.w	r8, r2, r1
 8007de4:	4659      	mov	r1, fp
 8007de6:	eb63 0901 	sbc.w	r9, r3, r1
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dfe:	4690      	mov	r8, r2
 8007e00:	4699      	mov	r9, r3
 8007e02:	4623      	mov	r3, r4
 8007e04:	eb18 0303 	adds.w	r3, r8, r3
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	eb49 0303 	adc.w	r3, r9, r3
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e1e:	4629      	mov	r1, r5
 8007e20:	024b      	lsls	r3, r1, #9
 8007e22:	4621      	mov	r1, r4
 8007e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e28:	4621      	mov	r1, r4
 8007e2a:	024a      	lsls	r2, r1, #9
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e32:	2200      	movs	r2, #0
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e3c:	f7f8 fe0e 	bl	8000a5c <__aeabi_uldivmod>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4613      	mov	r3, r2
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	e058      	b.n	8007efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e4a:	4b38      	ldr	r3, [pc, #224]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	099b      	lsrs	r3, r3, #6
 8007e50:	2200      	movs	r2, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	4611      	mov	r1, r2
 8007e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e5a:	623b      	str	r3, [r7, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	f04f 0000 	mov.w	r0, #0
 8007e6c:	f04f 0100 	mov.w	r1, #0
 8007e70:	0159      	lsls	r1, r3, #5
 8007e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e76:	0150      	lsls	r0, r2, #5
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8007ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	00eb      	lsls	r3, r5, #3
 8007eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eb2:	00e2      	lsls	r2, r4, #3
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	4643      	mov	r3, r8
 8007eba:	18e3      	adds	r3, r4, r3
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	eb45 0303 	adc.w	r3, r5, r3
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	028b      	lsls	r3, r1, #10
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007edc:	4621      	mov	r1, r4
 8007ede:	028a      	lsls	r2, r1, #10
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	61fa      	str	r2, [r7, #28]
 8007eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef0:	f7f8 fdb4 	bl	8000a5c <__aeabi_uldivmod>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4613      	mov	r3, r2
 8007efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	3301      	adds	r3, #1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f16:	e002      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3750      	adds	r7, #80	; 0x50
 8007f24:	46bd      	mov	sp, r7
 8007f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	00f42400 	.word	0x00f42400
 8007f34:	007a1200 	.word	0x007a1200

08007f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000008 	.word	0x20000008

08007f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f54:	f7ff fff0 	bl	8007f38 <HAL_RCC_GetHCLKFreq>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	0a9b      	lsrs	r3, r3, #10
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	4903      	ldr	r1, [pc, #12]	; (8007f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f66:	5ccb      	ldrb	r3, [r1, r3]
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40023800 	.word	0x40023800
 8007f74:	0800b964 	.word	0x0800b964

08007f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f7c:	f7ff ffdc 	bl	8007f38 <HAL_RCC_GetHCLKFreq>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	0b5b      	lsrs	r3, r3, #13
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	4903      	ldr	r1, [pc, #12]	; (8007f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f8e:	5ccb      	ldrb	r3, [r1, r3]
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	0800b964 	.word	0x0800b964

08007fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d038      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fc8:	4b68      	ldr	r3, [pc, #416]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fce:	f7fc fba3 	bl	8004718 <HAL_GetTick>
 8007fd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fd6:	f7fc fb9f 	bl	8004718 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e0bd      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fe8:	4b61      	ldr	r3, [pc, #388]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f0      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	071b      	lsls	r3, r3, #28
 8008006:	495a      	ldr	r1, [pc, #360]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800800e:	4b57      	ldr	r3, [pc, #348]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008010:	2201      	movs	r2, #1
 8008012:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008014:	f7fc fb80 	bl	8004718 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800801a:	e008      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800801c:	f7fc fb7c 	bl	8004718 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d901      	bls.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e09a      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800802e:	4b50      	ldr	r3, [pc, #320]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f0      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8083 	beq.w	800814e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	4b48      	ldr	r3, [pc, #288]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	4a47      	ldr	r2, [pc, #284]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008056:	6413      	str	r3, [r2, #64]	; 0x40
 8008058:	4b45      	ldr	r3, [pc, #276]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a42      	ldr	r2, [pc, #264]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800806a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800806e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008070:	f7fc fb52 	bl	8004718 <HAL_GetTick>
 8008074:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008076:	e008      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008078:	f7fc fb4e 	bl	8004718 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e06c      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800808a:	4b3a      	ldr	r3, [pc, #232]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008096:	4b36      	ldr	r3, [pc, #216]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800809e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02f      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d028      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080b4:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80080ca:	4a29      	ldr	r2, [pc, #164]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d114      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80080dc:	f7fc fb1c 	bl	8004718 <HAL_GetTick>
 80080e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080e2:	e00a      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080e4:	f7fc fb18 	bl	8004718 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d901      	bls.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e034      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fa:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ee      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008112:	d10d      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008114:	4b16      	ldr	r3, [pc, #88]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008128:	4911      	ldr	r1, [pc, #68]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
 800812e:	e005      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008130:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4a0e      	ldr	r2, [pc, #56]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008136:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800813a:	6093      	str	r3, [r2, #8]
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800813e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008148:	4909      	ldr	r1, [pc, #36]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800814a:	4313      	orrs	r3, r2
 800814c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7d1a      	ldrb	r2, [r3, #20]
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008160:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	42470068 	.word	0x42470068
 8008170:	40023800 	.word	0x40023800
 8008174:	40007000 	.word	0x40007000
 8008178:	42470e40 	.word	0x42470e40
 800817c:	424711e0 	.word	0x424711e0

08008180 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d140      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800819e:	4b24      	ldr	r3, [pc, #144]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d131      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80081b4:	4b1f      	ldr	r3, [pc, #124]	; (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80081b6:	617b      	str	r3, [r7, #20]
          break;
 80081b8:	e031      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081c6:	d109      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80081c8:	4b19      	ldr	r3, [pc, #100]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d2:	4a19      	ldr	r2, [pc, #100]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80081d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	e008      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80081dc:	4b14      	ldr	r3, [pc, #80]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e6:	4a15      	ldr	r2, [pc, #84]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80081e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ec:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f4:	099b      	lsrs	r3, r3, #6
 80081f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008208:	0f1b      	lsrs	r3, r3, #28
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	617b      	str	r3, [r7, #20]
          break;
 8008216:	e002      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
          break;
 800821c:	bf00      	nop
        }
      }
      break;
 800821e:	bf00      	nop
    }
  }
  return frequency;
 8008220:	697b      	ldr	r3, [r7, #20]
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40023800 	.word	0x40023800
 8008234:	00bb8000 	.word	0x00bb8000
 8008238:	007a1200 	.word	0x007a1200
 800823c:	00f42400 	.word	0x00f42400

08008240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e07b      	b.n	800834a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d108      	bne.n	800826c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008262:	d009      	beq.n	8008278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	61da      	str	r2, [r3, #28]
 800826a:	e005      	b.n	8008278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fa ffb6 	bl	8003204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082f2:	431a      	orrs	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fc:	ea42 0103 	orr.w	r1, r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	f003 0104 	and.w	r1, r3, #4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	f003 0210 	and.w	r2, r3, #16
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e041      	b.n	80083e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fb f9d7 	bl	800372c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3304      	adds	r3, #4
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f000 fe95 	bl	80090c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	d001      	beq.n	8008408 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e03c      	b.n	8008482 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <HAL_TIM_Base_Start+0xa0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d018      	beq.n	800844c <HAL_TIM_Base_Start+0x5c>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008422:	d013      	beq.n	800844c <HAL_TIM_Base_Start+0x5c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <HAL_TIM_Base_Start+0xa4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_TIM_Base_Start+0x5c>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a19      	ldr	r2, [pc, #100]	; (8008498 <HAL_TIM_Base_Start+0xa8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_TIM_Base_Start+0x5c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a17      	ldr	r2, [pc, #92]	; (800849c <HAL_TIM_Base_Start+0xac>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_TIM_Base_Start+0x5c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <HAL_TIM_Base_Start+0xb0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d111      	bne.n	8008470 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b06      	cmp	r3, #6
 800845c:	d010      	beq.n	8008480 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800846e:	e007      	b.n	8008480 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40014000 	.word	0x40014000

080084a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e041      	b.n	800853a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f839 	bl	8008542 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f000 fdec 	bl	80090c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <HAL_TIM_PWM_Start+0x24>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	e022      	b.n	80085c2 <HAL_TIM_PWM_Start+0x6a>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b04      	cmp	r3, #4
 8008580:	d109      	bne.n	8008596 <HAL_TIM_PWM_Start+0x3e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b01      	cmp	r3, #1
 800858c:	bf14      	ite	ne
 800858e:	2301      	movne	r3, #1
 8008590:	2300      	moveq	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	e015      	b.n	80085c2 <HAL_TIM_PWM_Start+0x6a>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b08      	cmp	r3, #8
 800859a:	d109      	bne.n	80085b0 <HAL_TIM_PWM_Start+0x58>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	bf14      	ite	ne
 80085a8:	2301      	movne	r3, #1
 80085aa:	2300      	moveq	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	e008      	b.n	80085c2 <HAL_TIM_PWM_Start+0x6a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	bf14      	ite	ne
 80085bc:	2301      	movne	r3, #1
 80085be:	2300      	moveq	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e068      	b.n	800869c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d104      	bne.n	80085da <HAL_TIM_PWM_Start+0x82>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d8:	e013      	b.n	8008602 <HAL_TIM_PWM_Start+0xaa>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d104      	bne.n	80085ea <HAL_TIM_PWM_Start+0x92>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e8:	e00b      	b.n	8008602 <HAL_TIM_PWM_Start+0xaa>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d104      	bne.n	80085fa <HAL_TIM_PWM_Start+0xa2>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f8:	e003      	b.n	8008602 <HAL_TIM_PWM_Start+0xaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2201      	movs	r2, #1
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f001 f91c 	bl	8009848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a23      	ldr	r2, [pc, #140]	; (80086a4 <HAL_TIM_PWM_Start+0x14c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d107      	bne.n	800862a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <HAL_TIM_PWM_Start+0x14c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d018      	beq.n	8008666 <HAL_TIM_PWM_Start+0x10e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d013      	beq.n	8008666 <HAL_TIM_PWM_Start+0x10e>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <HAL_TIM_PWM_Start+0x150>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_TIM_PWM_Start+0x10e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a17      	ldr	r2, [pc, #92]	; (80086ac <HAL_TIM_PWM_Start+0x154>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_TIM_PWM_Start+0x10e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a16      	ldr	r2, [pc, #88]	; (80086b0 <HAL_TIM_PWM_Start+0x158>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIM_PWM_Start+0x10e>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <HAL_TIM_PWM_Start+0x15c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d111      	bne.n	800868a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b06      	cmp	r3, #6
 8008676:	d010      	beq.n	800869a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008688:	e007      	b.n	800869a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0201 	orr.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40010000 	.word	0x40010000
 80086a8:	40000400 	.word	0x40000400
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40000c00 	.word	0x40000c00
 80086b4:	40014000 	.word	0x40014000

080086b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e041      	b.n	800874e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fa ffd4 	bl	800368c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f000 fce2 	bl	80090c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <HAL_TIM_IC_Start_IT+0x1e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008772:	b2db      	uxtb	r3, r3
 8008774:	e013      	b.n	800879e <HAL_TIM_IC_Start_IT+0x46>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d104      	bne.n	8008786 <HAL_TIM_IC_Start_IT+0x2e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008782:	b2db      	uxtb	r3, r3
 8008784:	e00b      	b.n	800879e <HAL_TIM_IC_Start_IT+0x46>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d104      	bne.n	8008796 <HAL_TIM_IC_Start_IT+0x3e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008792:	b2db      	uxtb	r3, r3
 8008794:	e003      	b.n	800879e <HAL_TIM_IC_Start_IT+0x46>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879c:	b2db      	uxtb	r3, r3
 800879e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <HAL_TIM_IC_Start_IT+0x58>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	e013      	b.n	80087d8 <HAL_TIM_IC_Start_IT+0x80>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d104      	bne.n	80087c0 <HAL_TIM_IC_Start_IT+0x68>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	e00b      	b.n	80087d8 <HAL_TIM_IC_Start_IT+0x80>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d104      	bne.n	80087d0 <HAL_TIM_IC_Start_IT+0x78>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e003      	b.n	80087d8 <HAL_TIM_IC_Start_IT+0x80>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d102      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80087e0:	7b7b      	ldrb	r3, [r7, #13]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e0c2      	b.n	8008970 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <HAL_TIM_IC_Start_IT+0xa2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087f8:	e013      	b.n	8008822 <HAL_TIM_IC_Start_IT+0xca>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d104      	bne.n	800880a <HAL_TIM_IC_Start_IT+0xb2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008808:	e00b      	b.n	8008822 <HAL_TIM_IC_Start_IT+0xca>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b08      	cmp	r3, #8
 800880e:	d104      	bne.n	800881a <HAL_TIM_IC_Start_IT+0xc2>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008818:	e003      	b.n	8008822 <HAL_TIM_IC_Start_IT+0xca>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_TIM_IC_Start_IT+0xda>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008830:	e013      	b.n	800885a <HAL_TIM_IC_Start_IT+0x102>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b04      	cmp	r3, #4
 8008836:	d104      	bne.n	8008842 <HAL_TIM_IC_Start_IT+0xea>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008840:	e00b      	b.n	800885a <HAL_TIM_IC_Start_IT+0x102>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b08      	cmp	r3, #8
 8008846:	d104      	bne.n	8008852 <HAL_TIM_IC_Start_IT+0xfa>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008850:	e003      	b.n	800885a <HAL_TIM_IC_Start_IT+0x102>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b0c      	cmp	r3, #12
 800885e:	d841      	bhi.n	80088e4 <HAL_TIM_IC_Start_IT+0x18c>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_TIM_IC_Start_IT+0x110>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088e5 	.word	0x080088e5
 8008874:	080088e5 	.word	0x080088e5
 8008878:	080088af 	.word	0x080088af
 800887c:	080088e5 	.word	0x080088e5
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080088e5 	.word	0x080088e5
 8008888:	080088c1 	.word	0x080088c1
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088e5 	.word	0x080088e5
 8008894:	080088e5 	.word	0x080088e5
 8008898:	080088d3 	.word	0x080088d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0202 	orr.w	r2, r2, #2
 80088aa:	60da      	str	r2, [r3, #12]
      break;
 80088ac:	e01d      	b.n	80088ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0204 	orr.w	r2, r2, #4
 80088bc:	60da      	str	r2, [r3, #12]
      break;
 80088be:	e014      	b.n	80088ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0208 	orr.w	r2, r2, #8
 80088ce:	60da      	str	r2, [r3, #12]
      break;
 80088d0:	e00b      	b.n	80088ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0210 	orr.w	r2, r2, #16
 80088e0:	60da      	str	r2, [r3, #12]
      break;
 80088e2:	e002      	b.n	80088ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
      break;
 80088e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d13e      	bne.n	800896e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2201      	movs	r2, #1
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ffa5 	bl	8009848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1d      	ldr	r2, [pc, #116]	; (8008978 <HAL_TIM_IC_Start_IT+0x220>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d018      	beq.n	800893a <HAL_TIM_IC_Start_IT+0x1e2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008910:	d013      	beq.n	800893a <HAL_TIM_IC_Start_IT+0x1e2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a19      	ldr	r2, [pc, #100]	; (800897c <HAL_TIM_IC_Start_IT+0x224>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00e      	beq.n	800893a <HAL_TIM_IC_Start_IT+0x1e2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a17      	ldr	r2, [pc, #92]	; (8008980 <HAL_TIM_IC_Start_IT+0x228>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d009      	beq.n	800893a <HAL_TIM_IC_Start_IT+0x1e2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a16      	ldr	r2, [pc, #88]	; (8008984 <HAL_TIM_IC_Start_IT+0x22c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d004      	beq.n	800893a <HAL_TIM_IC_Start_IT+0x1e2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a14      	ldr	r2, [pc, #80]	; (8008988 <HAL_TIM_IC_Start_IT+0x230>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d111      	bne.n	800895e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b06      	cmp	r3, #6
 800894a:	d010      	beq.n	800896e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0201 	orr.w	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895c:	e007      	b.n	800896e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0201 	orr.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40010000 	.word	0x40010000
 800897c:	40000400 	.word	0x40000400
 8008980:	40000800 	.word	0x40000800
 8008984:	40000c00 	.word	0x40000c00
 8008988:	40014000 	.word	0x40014000

0800898c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d122      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d11b      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0202 	mvn.w	r2, #2
 80089b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f9 fd52 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fb54 	bl	8009084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fb5b 	bl	8009098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d122      	bne.n	8008a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d11b      	bne.n	8008a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0204 	mvn.w	r2, #4
 8008a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7f9 fd28 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008a28:	e005      	b.n	8008a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fb2a 	bl	8009084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb31 	bl	8009098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d122      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d11b      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0208 	mvn.w	r2, #8
 8008a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7f9 fcfe 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008a7c:	e005      	b.n	8008a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fb00 	bl	8009084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb07 	bl	8009098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d122      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0210 	mvn.w	r2, #16
 8008ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2208      	movs	r2, #8
 8008aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7f9 fcd4 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008ad0:	e005      	b.n	8008ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fad6 	bl	8009084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fadd 	bl	8009098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d10e      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d107      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0201 	mvn.w	r2, #1
 8008b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fab0 	bl	8009070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1a:	2b80      	cmp	r3, #128	; 0x80
 8008b1c:	d10e      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b28:	2b80      	cmp	r3, #128	; 0x80
 8008b2a:	d107      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 ff24 	bl	8009984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	d10e      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d107      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 faa2 	bl	80090ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	d10e      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d107      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0220 	mvn.w	r2, #32
 8008b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 feee 	bl	8009970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_TIM_IC_ConfigChannel+0x1e>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e088      	b.n	8008ccc <HAL_TIM_IC_ConfigChannel+0x130>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11b      	bne.n	8008c00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f000 fc7e 	bl	80094d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 020c 	bic.w	r2, r2, #12
 8008bea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6999      	ldr	r1, [r3, #24]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	619a      	str	r2, [r3, #24]
 8008bfe:	e060      	b.n	8008cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d11c      	bne.n	8008c40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6819      	ldr	r1, [r3, #0]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f000 fcf6 	bl	8009606 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699a      	ldr	r2, [r3, #24]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6999      	ldr	r1, [r3, #24]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	021a      	lsls	r2, r3, #8
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	619a      	str	r2, [r3, #24]
 8008c3e:	e040      	b.n	8008cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d11b      	bne.n	8008c7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f000 fd43 	bl	80096e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69da      	ldr	r2, [r3, #28]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 020c 	bic.w	r2, r2, #12
 8008c68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69d9      	ldr	r1, [r3, #28]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	61da      	str	r2, [r3, #28]
 8008c7c:	e021      	b.n	8008cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b0c      	cmp	r3, #12
 8008c82:	d11c      	bne.n	8008cbe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f000 fd60 	bl	8009758 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69da      	ldr	r2, [r3, #28]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ca6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	69d9      	ldr	r1, [r3, #28]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	021a      	lsls	r2, r3, #8
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	61da      	str	r2, [r3, #28]
 8008cbc:	e001      	b.n	8008cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0ae      	b.n	8008e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	f200 809f 	bhi.w	8008e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d3d 	.word	0x08008d3d
 8008d0c:	08008e41 	.word	0x08008e41
 8008d10:	08008e41 	.word	0x08008e41
 8008d14:	08008e41 	.word	0x08008e41
 8008d18:	08008d7d 	.word	0x08008d7d
 8008d1c:	08008e41 	.word	0x08008e41
 8008d20:	08008e41 	.word	0x08008e41
 8008d24:	08008e41 	.word	0x08008e41
 8008d28:	08008dbf 	.word	0x08008dbf
 8008d2c:	08008e41 	.word	0x08008e41
 8008d30:	08008e41 	.word	0x08008e41
 8008d34:	08008e41 	.word	0x08008e41
 8008d38:	08008dff 	.word	0x08008dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fa3c 	bl	80091c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0208 	orr.w	r2, r2, #8
 8008d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0204 	bic.w	r2, r2, #4
 8008d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6999      	ldr	r1, [r3, #24]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	619a      	str	r2, [r3, #24]
      break;
 8008d7a:	e064      	b.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fa82 	bl	800928c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6999      	ldr	r1, [r3, #24]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	021a      	lsls	r2, r3, #8
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	619a      	str	r2, [r3, #24]
      break;
 8008dbc:	e043      	b.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 facd 	bl	8009364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69da      	ldr	r2, [r3, #28]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0208 	orr.w	r2, r2, #8
 8008dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0204 	bic.w	r2, r2, #4
 8008de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69d9      	ldr	r1, [r3, #28]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	61da      	str	r2, [r3, #28]
      break;
 8008dfc:	e023      	b.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fb17 	bl	8009438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69da      	ldr	r2, [r3, #28]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69d9      	ldr	r1, [r3, #28]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	021a      	lsls	r2, r3, #8
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	61da      	str	r2, [r3, #28]
      break;
 8008e3e:	e002      	b.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
      break;
 8008e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d101      	bne.n	8008e74 <HAL_TIM_ConfigClockSource+0x1c>
 8008e70:	2302      	movs	r3, #2
 8008e72:	e0b4      	b.n	8008fde <HAL_TIM_ConfigClockSource+0x186>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eac:	d03e      	beq.n	8008f2c <HAL_TIM_ConfigClockSource+0xd4>
 8008eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb2:	f200 8087 	bhi.w	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	f000 8086 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x172>
 8008ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec2:	d87f      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec4:	2b70      	cmp	r3, #112	; 0x70
 8008ec6:	d01a      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0xa6>
 8008ec8:	2b70      	cmp	r3, #112	; 0x70
 8008eca:	d87b      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d050      	beq.n	8008f72 <HAL_TIM_ConfigClockSource+0x11a>
 8008ed0:	2b60      	cmp	r3, #96	; 0x60
 8008ed2:	d877      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed4:	2b50      	cmp	r3, #80	; 0x50
 8008ed6:	d03c      	beq.n	8008f52 <HAL_TIM_ConfigClockSource+0xfa>
 8008ed8:	2b50      	cmp	r3, #80	; 0x50
 8008eda:	d873      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	d058      	beq.n	8008f92 <HAL_TIM_ConfigClockSource+0x13a>
 8008ee0:	2b40      	cmp	r3, #64	; 0x40
 8008ee2:	d86f      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee4:	2b30      	cmp	r3, #48	; 0x30
 8008ee6:	d064      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ee8:	2b30      	cmp	r3, #48	; 0x30
 8008eea:	d86b      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d060      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d867      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d05c      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d05a      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008efc:	e062      	b.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6899      	ldr	r1, [r3, #8]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f000 fc7b 	bl	8009808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	609a      	str	r2, [r3, #8]
      break;
 8008f2a:	e04f      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6899      	ldr	r1, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f000 fc64 	bl	8009808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f4e:	609a      	str	r2, [r3, #8]
      break;
 8008f50:	e03c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	6859      	ldr	r1, [r3, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f000 fb22 	bl	80095a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2150      	movs	r1, #80	; 0x50
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fc31 	bl	80097d2 <TIM_ITRx_SetConfig>
      break;
 8008f70:	e02c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f000 fb7e 	bl	8009680 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2160      	movs	r1, #96	; 0x60
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fc21 	bl	80097d2 <TIM_ITRx_SetConfig>
      break;
 8008f90:	e01c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6859      	ldr	r1, [r3, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f000 fb02 	bl	80095a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2140      	movs	r1, #64	; 0x40
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fc11 	bl	80097d2 <TIM_ITRx_SetConfig>
      break;
 8008fb0:	e00c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f000 fc08 	bl	80097d2 <TIM_ITRx_SetConfig>
      break;
 8008fc2:	e003      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc8:	e000      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b0c      	cmp	r3, #12
 8008ffa:	d831      	bhi.n	8009060 <HAL_TIM_ReadCapturedValue+0x78>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	08009039 	.word	0x08009039
 8009008:	08009061 	.word	0x08009061
 800900c:	08009061 	.word	0x08009061
 8009010:	08009061 	.word	0x08009061
 8009014:	08009043 	.word	0x08009043
 8009018:	08009061 	.word	0x08009061
 800901c:	08009061 	.word	0x08009061
 8009020:	08009061 	.word	0x08009061
 8009024:	0800904d 	.word	0x0800904d
 8009028:	08009061 	.word	0x08009061
 800902c:	08009061 	.word	0x08009061
 8009030:	08009061 	.word	0x08009061
 8009034:	08009057 	.word	0x08009057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	60fb      	str	r3, [r7, #12]

      break;
 8009040:	e00f      	b.n	8009062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	60fb      	str	r3, [r7, #12]

      break;
 800904a:	e00a      	b.n	8009062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	60fb      	str	r3, [r7, #12]

      break;
 8009054:	e005      	b.n	8009062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905c:	60fb      	str	r3, [r7, #12]

      break;
 800905e:	e000      	b.n	8009062 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009060:	bf00      	nop
  }

  return tmpreg;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a34      	ldr	r2, [pc, #208]	; (80091a4 <TIM_Base_SetConfig+0xe4>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00f      	beq.n	80090f8 <TIM_Base_SetConfig+0x38>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090de:	d00b      	beq.n	80090f8 <TIM_Base_SetConfig+0x38>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a31      	ldr	r2, [pc, #196]	; (80091a8 <TIM_Base_SetConfig+0xe8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <TIM_Base_SetConfig+0x38>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a30      	ldr	r2, [pc, #192]	; (80091ac <TIM_Base_SetConfig+0xec>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_Base_SetConfig+0x38>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a2f      	ldr	r2, [pc, #188]	; (80091b0 <TIM_Base_SetConfig+0xf0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d108      	bne.n	800910a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a25      	ldr	r2, [pc, #148]	; (80091a4 <TIM_Base_SetConfig+0xe4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d01b      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009118:	d017      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a22      	ldr	r2, [pc, #136]	; (80091a8 <TIM_Base_SetConfig+0xe8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a21      	ldr	r2, [pc, #132]	; (80091ac <TIM_Base_SetConfig+0xec>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00f      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <TIM_Base_SetConfig+0xf0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d00b      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a1f      	ldr	r2, [pc, #124]	; (80091b4 <TIM_Base_SetConfig+0xf4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d007      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1e      	ldr	r2, [pc, #120]	; (80091b8 <TIM_Base_SetConfig+0xf8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_Base_SetConfig+0x8a>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <TIM_Base_SetConfig+0xfc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d108      	bne.n	800915c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <TIM_Base_SetConfig+0xe4>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d103      	bne.n	8009190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	615a      	str	r2, [r3, #20]
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	40010000 	.word	0x40010000
 80091a8:	40000400 	.word	0x40000400
 80091ac:	40000800 	.word	0x40000800
 80091b0:	40000c00 	.word	0x40000c00
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800

080091c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f023 0201 	bic.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f023 0302 	bic.w	r3, r3, #2
 8009208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a1c      	ldr	r2, [pc, #112]	; (8009288 <TIM_OC1_SetConfig+0xc8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d10c      	bne.n	8009236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f023 0308 	bic.w	r3, r3, #8
 8009222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f023 0304 	bic.w	r3, r3, #4
 8009234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a13      	ldr	r2, [pc, #76]	; (8009288 <TIM_OC1_SetConfig+0xc8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d111      	bne.n	8009262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800924c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40010000 	.word	0x40010000

0800928c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f023 0210 	bic.w	r2, r3, #16
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	021b      	lsls	r3, r3, #8
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f023 0320 	bic.w	r3, r3, #32
 80092d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a1e      	ldr	r2, [pc, #120]	; (8009360 <TIM_OC2_SetConfig+0xd4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d10d      	bne.n	8009308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a15      	ldr	r2, [pc, #84]	; (8009360 <TIM_OC2_SetConfig+0xd4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d113      	bne.n	8009338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800931e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	621a      	str	r2, [r3, #32]
}
 8009352:	bf00      	nop
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000

08009364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0303 	bic.w	r3, r3, #3
 800939a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <TIM_OC3_SetConfig+0xd0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d10d      	bne.n	80093de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a14      	ldr	r2, [pc, #80]	; (8009434 <TIM_OC3_SetConfig+0xd0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d113      	bne.n	800940e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40010000 	.word	0x40010000

08009438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800946e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	031b      	lsls	r3, r3, #12
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <TIM_OC4_SetConfig+0x9c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d109      	bne.n	80094ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800949e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	019b      	lsls	r3, r3, #6
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	621a      	str	r2, [r3, #32]
}
 80094c6:	bf00      	nop
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000

080094d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f023 0201 	bic.w	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a24      	ldr	r2, [pc, #144]	; (8009594 <TIM_TI1_SetConfig+0xbc>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d013      	beq.n	800952e <TIM_TI1_SetConfig+0x56>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950c:	d00f      	beq.n	800952e <TIM_TI1_SetConfig+0x56>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a21      	ldr	r2, [pc, #132]	; (8009598 <TIM_TI1_SetConfig+0xc0>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d00b      	beq.n	800952e <TIM_TI1_SetConfig+0x56>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a20      	ldr	r2, [pc, #128]	; (800959c <TIM_TI1_SetConfig+0xc4>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d007      	beq.n	800952e <TIM_TI1_SetConfig+0x56>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <TIM_TI1_SetConfig+0xc8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d003      	beq.n	800952e <TIM_TI1_SetConfig+0x56>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <TIM_TI1_SetConfig+0xcc>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d101      	bne.n	8009532 <TIM_TI1_SetConfig+0x5a>
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <TIM_TI1_SetConfig+0x5c>
 8009532:	2300      	movs	r3, #0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0303 	bic.w	r3, r3, #3
 800953e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e003      	b.n	8009552 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f043 0301 	orr.w	r3, r3, #1
 8009550:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	011b      	lsls	r3, r3, #4
 800955e:	b2db      	uxtb	r3, r3
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f023 030a 	bic.w	r3, r3, #10
 800956c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f003 030a 	and.w	r3, r3, #10
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	621a      	str	r2, [r3, #32]
}
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40010000 	.word	0x40010000
 8009598:	40000400 	.word	0x40000400
 800959c:	40000800 	.word	0x40000800
 80095a0:	40000c00 	.word	0x40000c00
 80095a4:	40014000 	.word	0x40014000

080095a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f023 0201 	bic.w	r2, r3, #1
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	4313      	orrs	r3, r2
 80095dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f023 030a 	bic.w	r3, r3, #10
 80095e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	f023 0210 	bic.w	r2, r3, #16
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	031b      	lsls	r3, r3, #12
 800964a:	b29b      	uxth	r3, r3
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009658:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	621a      	str	r2, [r3, #32]
}
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	f023 0210 	bic.w	r2, r3, #16
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	031b      	lsls	r3, r3, #12
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	621a      	str	r2, [r3, #32]
}
 80096d4:	bf00      	nop
 80096d6:	371c      	adds	r7, #28
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4313      	orrs	r3, r2
 8009714:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800971c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	b2db      	uxtb	r3, r3
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009730:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4313      	orrs	r3, r2
 800973e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	621a      	str	r2, [r3, #32]
}
 800974c:	bf00      	nop
 800974e:	371c      	adds	r7, #28
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009784:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009796:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	031b      	lsls	r3, r3, #12
 800979c:	b29b      	uxth	r3, r3
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80097aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	031b      	lsls	r3, r3, #12
 80097b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f043 0307 	orr.w	r3, r3, #7
 80097f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	609a      	str	r2, [r3, #8]
}
 80097fc:	bf00      	nop
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	021a      	lsls	r2, r3, #8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	431a      	orrs	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4313      	orrs	r3, r2
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	609a      	str	r2, [r3, #8]
}
 800983c:	bf00      	nop
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	2201      	movs	r2, #1
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	43db      	mvns	r3, r3
 800986a:	401a      	ands	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1a      	ldr	r2, [r3, #32]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f003 031f 	and.w	r3, r3, #31
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	fa01 f303 	lsl.w	r3, r1, r3
 8009880:	431a      	orrs	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e050      	b.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1c      	ldr	r2, [pc, #112]	; (800995c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d018      	beq.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f8:	d013      	beq.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a18      	ldr	r2, [pc, #96]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00e      	beq.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a16      	ldr	r2, [pc, #88]	; (8009964 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d009      	beq.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a15      	ldr	r2, [pc, #84]	; (8009968 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d004      	beq.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a13      	ldr	r2, [pc, #76]	; (800996c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d10c      	bne.n	800993c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	4313      	orrs	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	40010000 	.word	0x40010000
 8009960:	40000400 	.word	0x40000400
 8009964:	40000800 	.word	0x40000800
 8009968:	40000c00 	.word	0x40000c00
 800996c:	40014000 	.word	0x40014000

08009970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e03f      	b.n	8009a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7f9 ff6e 	bl	80038a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2224      	movs	r2, #36	; 0x24
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fddf 	bl	800a5a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695a      	ldr	r2, [r3, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b08a      	sub	sp, #40	; 0x28
 8009a36:	af02      	add	r7, sp, #8
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b20      	cmp	r3, #32
 8009a50:	d17c      	bne.n	8009b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <HAL_UART_Transmit+0x2c>
 8009a58:	88fb      	ldrh	r3, [r7, #6]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e075      	b.n	8009b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_UART_Transmit+0x3e>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e06e      	b.n	8009b4e <HAL_UART_Transmit+0x11c>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2221      	movs	r2, #33	; 0x21
 8009a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a86:	f7fa fe47 	bl	8004718 <HAL_GetTick>
 8009a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	88fa      	ldrh	r2, [r7, #6]
 8009a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa0:	d108      	bne.n	8009ab4 <HAL_UART_Transmit+0x82>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d104      	bne.n	8009ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	e003      	b.n	8009abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ac4:	e02a      	b.n	8009b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2200      	movs	r2, #0
 8009ace:	2180      	movs	r1, #128	; 0x80
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 fb1f 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e036      	b.n	8009b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	3302      	adds	r3, #2
 8009afa:	61bb      	str	r3, [r7, #24]
 8009afc:	e007      	b.n	8009b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1cf      	bne.n	8009ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2140      	movs	r1, #64	; 0x40
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 faef 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e006      	b.n	8009b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b4c:	2302      	movs	r3, #2
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	4613      	mov	r3, r2
 8009b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	d11d      	bne.n	8009bac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <HAL_UART_Receive_IT+0x26>
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e016      	b.n	8009bae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_UART_Receive_IT+0x38>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e00f      	b.n	8009bae <HAL_UART_Receive_IT+0x58>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fb24 	bl	800a1f0 <UART_Start_Receive_IT>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e000      	b.n	8009bae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009bac:	2302      	movs	r3, #2
  }
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b0ba      	sub	sp, #232	; 0xe8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10f      	bne.n	8009c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <HAL_UART_IRQHandler+0x66>
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fc07 	bl	800a42a <UART_Receive_IT>
      return;
 8009c1c:	e256      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80de 	beq.w	8009de4 <HAL_UART_IRQHandler+0x22c>
 8009c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d106      	bne.n	8009c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80d1 	beq.w	8009de4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00b      	beq.n	8009c66 <HAL_UART_IRQHandler+0xae>
 8009c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f043 0201 	orr.w	r2, r3, #1
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <HAL_UART_IRQHandler+0xd2>
 8009c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f043 0202 	orr.w	r2, r3, #2
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <HAL_UART_IRQHandler+0xf6>
 8009c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb2:	f003 0308 	and.w	r3, r3, #8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d011      	beq.n	8009cde <HAL_UART_IRQHandler+0x126>
 8009cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	f043 0208 	orr.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 81ed 	beq.w	800a0c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <HAL_UART_IRQHandler+0x14e>
 8009cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb92 	bl	800a42a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <HAL_UART_IRQHandler+0x17a>
 8009d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d04f      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa9a 	bl	800a26c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d141      	bne.n	8009dca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3314      	adds	r3, #20
 8009d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3314      	adds	r3, #20
 8009d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1d9      	bne.n	8009d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d013      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9e:	4a7d      	ldr	r2, [pc, #500]	; (8009f94 <HAL_UART_IRQHandler+0x3dc>)
 8009da0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fb fa25 	bl	80051f6 <HAL_DMA_Abort_IT>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d016      	beq.n	8009de0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc0:	e00e      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f990 	bl	800a0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc8:	e00a      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f98c 	bl	800a0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	e006      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f988 	bl	800a0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dde:	e170      	b.n	800a0c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	bf00      	nop
    return;
 8009de2:	e16e      	b.n	800a0c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	f040 814a 	bne.w	800a082 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8143 	beq.w	800a082 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 813c 	beq.w	800a082 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60bb      	str	r3, [r7, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	60bb      	str	r3, [r7, #8]
 8009e1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	f040 80b4 	bne.w	8009f98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 8140 	beq.w	800a0c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	f080 8139 	bcs.w	800a0c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	f000 8088 	beq.w	8009f7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	330c      	adds	r3, #12
 8009e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	330c      	adds	r3, #12
 8009e92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d9      	bne.n	8009e6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3314      	adds	r3, #20
 8009ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e1      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4a:	f023 0310 	bic.w	r3, r3, #16
 8009f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e3      	bne.n	8009f38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fb f8ce 	bl	8005116 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f8b6 	bl	800a0fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f90:	e099      	b.n	800a0c6 <HAL_UART_IRQHandler+0x50e>
 8009f92:	bf00      	nop
 8009f94:	0800a333 	.word	0x0800a333
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 808b 	beq.w	800a0ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 8086 	beq.w	800a0ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	330c      	adds	r3, #12
 8009fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	330c      	adds	r3, #12
 8009fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009fe2:	647a      	str	r2, [r7, #68]	; 0x44
 8009fe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e3      	bne.n	8009fbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3314      	adds	r3, #20
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	e853 3f00 	ldrex	r3, [r3]
 800a004:	623b      	str	r3, [r7, #32]
   return(result);
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3314      	adds	r3, #20
 800a016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a01a:	633a      	str	r2, [r7, #48]	; 0x30
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e3      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2220      	movs	r2, #32
 800a032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0310 	bic.w	r3, r3, #16
 800a052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	330c      	adds	r3, #12
 800a05c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a060:	61fa      	str	r2, [r7, #28]
 800a062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	69b9      	ldr	r1, [r7, #24]
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	617b      	str	r3, [r7, #20]
   return(result);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e3      	bne.n	800a03c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f83e 	bl	800a0fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a080:	e023      	b.n	800a0ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x4ea>
 800a08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f95d 	bl	800a35a <UART_Transmit_IT>
    return;
 800a0a0:	e014      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00e      	beq.n	800a0cc <HAL_UART_IRQHandler+0x514>
 800a0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f99d 	bl	800a3fa <UART_EndTransmit_IT>
    return;
 800a0c0:	e004      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
    return;
 800a0c2:	bf00      	nop
 800a0c4:	e002      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
      return;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
      return;
 800a0ca:	bf00      	nop
  }
}
 800a0cc:	37e8      	adds	r7, #232	; 0xe8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop

0800a0d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b090      	sub	sp, #64	; 0x40
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	e050      	b.n	800a1c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a12c:	d04c      	beq.n	800a1c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a130:	2b00      	cmp	r3, #0
 800a132:	d007      	beq.n	800a144 <UART_WaitOnFlagUntilTimeout+0x30>
 800a134:	f7fa faf0 	bl	8004718 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a140:	429a      	cmp	r2, r3
 800a142:	d241      	bcs.n	800a1c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	330c      	adds	r3, #12
 800a162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a164:	637a      	str	r2, [r7, #52]	; 0x34
 800a166:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a16a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3314      	adds	r3, #20
 800a17e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	613b      	str	r3, [r7, #16]
   return(result);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f023 0301 	bic.w	r3, r3, #1
 800a18e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3314      	adds	r3, #20
 800a196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a198:	623a      	str	r2, [r7, #32]
 800a19a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	6a3a      	ldr	r2, [r7, #32]
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e5      	bne.n	800a178 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e00f      	b.n	800a1e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	bf0c      	ite	eq
 800a1d8:	2301      	moveq	r3, #1
 800a1da:	2300      	movne	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d09f      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3740      	adds	r7, #64	; 0x40
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	88fa      	ldrh	r2, [r7, #6]
 800a208:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2222      	movs	r2, #34	; 0x22
 800a21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68da      	ldr	r2, [r3, #12]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a23c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	695a      	ldr	r2, [r3, #20]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f042 0220 	orr.w	r2, r2, #32
 800a25c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b095      	sub	sp, #84	; 0x54
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	330c      	adds	r3, #12
 800a27a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27e:	e853 3f00 	ldrex	r3, [r3]
 800a282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	330c      	adds	r3, #12
 800a292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a294:	643a      	str	r2, [r7, #64]	; 0x40
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a29a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a29c:	e841 2300 	strex	r3, r2, [r1]
 800a2a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1e5      	bne.n	800a274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3314      	adds	r3, #20
 800a2ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	f023 0301 	bic.w	r3, r3, #1
 800a2be:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3314      	adds	r3, #20
 800a2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e5      	bne.n	800a2a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d119      	bne.n	800a318 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	330c      	adds	r3, #12
 800a2ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f023 0310 	bic.w	r3, r3, #16
 800a2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	330c      	adds	r3, #12
 800a302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a304:	61ba      	str	r2, [r7, #24]
 800a306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6979      	ldr	r1, [r7, #20]
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	613b      	str	r3, [r7, #16]
   return(result);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a326:	bf00      	nop
 800a328:	3754      	adds	r7, #84	; 0x54
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff fecb 	bl	800a0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b085      	sub	sp, #20
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b21      	cmp	r3, #33	; 0x21
 800a36c:	d13e      	bne.n	800a3ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a376:	d114      	bne.n	800a3a2 <UART_Transmit_IT+0x48>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d110      	bne.n	800a3a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	1c9a      	adds	r2, r3, #2
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	621a      	str	r2, [r3, #32]
 800a3a0:	e008      	b.n	800a3b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	1c59      	adds	r1, r3, #1
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6211      	str	r1, [r2, #32]
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10f      	bne.n	800a3e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e000      	b.n	800a3ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3ec:	2302      	movs	r3, #2
  }
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a410:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff fe5a 	bl	800a0d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b08c      	sub	sp, #48	; 0x30
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b22      	cmp	r3, #34	; 0x22
 800a43c:	f040 80ab 	bne.w	800a596 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a448:	d117      	bne.n	800a47a <UART_Receive_IT+0x50>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d113      	bne.n	800a47a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	b29b      	uxth	r3, r3
 800a464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a468:	b29a      	uxth	r2, r3
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	1c9a      	adds	r2, r3, #2
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	629a      	str	r2, [r3, #40]	; 0x28
 800a478:	e026      	b.n	800a4c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a480:	2300      	movs	r3, #0
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a48c:	d007      	beq.n	800a49e <UART_Receive_IT+0x74>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <UART_Receive_IT+0x82>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e008      	b.n	800a4be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d15a      	bne.n	800a592 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 0220 	bic.w	r2, r2, #32
 800a4ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d135      	bne.n	800a588 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	330c      	adds	r3, #12
 800a528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	613b      	str	r3, [r7, #16]
   return(result);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f023 0310 	bic.w	r3, r3, #16
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	330c      	adds	r3, #12
 800a540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a542:	623a      	str	r2, [r7, #32]
 800a544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	69f9      	ldr	r1, [r7, #28]
 800a548:	6a3a      	ldr	r2, [r7, #32]
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e5      	bne.n	800a522 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b10      	cmp	r3, #16
 800a562:	d10a      	bne.n	800a57a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff fdbb 	bl	800a0fc <HAL_UARTEx_RxEventCallback>
 800a586:	e002      	b.n	800a58e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7f7 fdbd 	bl	8002108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	e002      	b.n	800a598 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e000      	b.n	800a598 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a596:	2302      	movs	r3, #2
  }
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3730      	adds	r7, #48	; 0x30
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5a4:	b0c0      	sub	sp, #256	; 0x100
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5bc:	68d9      	ldr	r1, [r3, #12]
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	ea40 0301 	orr.w	r3, r0, r1
 800a5c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5f8:	f021 010c 	bic.w	r1, r1, #12
 800a5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a606:	430b      	orrs	r3, r1
 800a608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a60a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a61a:	6999      	ldr	r1, [r3, #24]
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	ea40 0301 	orr.w	r3, r0, r1
 800a626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4b8f      	ldr	r3, [pc, #572]	; (800a86c <UART_SetConfig+0x2cc>)
 800a630:	429a      	cmp	r2, r3
 800a632:	d005      	beq.n	800a640 <UART_SetConfig+0xa0>
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b8d      	ldr	r3, [pc, #564]	; (800a870 <UART_SetConfig+0x2d0>)
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d104      	bne.n	800a64a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a640:	f7fd fc9a 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800a644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a648:	e003      	b.n	800a652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a64a:	f7fd fc81 	bl	8007f50 <HAL_RCC_GetPCLK1Freq>
 800a64e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65c:	f040 810c 	bne.w	800a878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a664:	2200      	movs	r2, #0
 800a666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a66a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a66e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a672:	4622      	mov	r2, r4
 800a674:	462b      	mov	r3, r5
 800a676:	1891      	adds	r1, r2, r2
 800a678:	65b9      	str	r1, [r7, #88]	; 0x58
 800a67a:	415b      	adcs	r3, r3
 800a67c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a67e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a682:	4621      	mov	r1, r4
 800a684:	eb12 0801 	adds.w	r8, r2, r1
 800a688:	4629      	mov	r1, r5
 800a68a:	eb43 0901 	adc.w	r9, r3, r1
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a69a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a69e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6a2:	4690      	mov	r8, r2
 800a6a4:	4699      	mov	r9, r3
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	eb18 0303 	adds.w	r3, r8, r3
 800a6ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	eb49 0303 	adc.w	r3, r9, r3
 800a6b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a6ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	18db      	adds	r3, r3, r3
 800a6d2:	653b      	str	r3, [r7, #80]	; 0x50
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	eb42 0303 	adc.w	r3, r2, r3
 800a6da:	657b      	str	r3, [r7, #84]	; 0x54
 800a6dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6e4:	f7f6 f9ba 	bl	8000a5c <__aeabi_uldivmod>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4b61      	ldr	r3, [pc, #388]	; (800a874 <UART_SetConfig+0x2d4>)
 800a6ee:	fba3 2302 	umull	r2, r3, r3, r2
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	011c      	lsls	r4, r3, #4
 800a6f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	1891      	adds	r1, r2, r2
 800a70e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a710:	415b      	adcs	r3, r3
 800a712:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a718:	4641      	mov	r1, r8
 800a71a:	eb12 0a01 	adds.w	sl, r2, r1
 800a71e:	4649      	mov	r1, r9
 800a720:	eb43 0b01 	adc.w	fp, r3, r1
 800a724:	f04f 0200 	mov.w	r2, #0
 800a728:	f04f 0300 	mov.w	r3, #0
 800a72c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a738:	4692      	mov	sl, r2
 800a73a:	469b      	mov	fp, r3
 800a73c:	4643      	mov	r3, r8
 800a73e:	eb1a 0303 	adds.w	r3, sl, r3
 800a742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a746:	464b      	mov	r3, r9
 800a748:	eb4b 0303 	adc.w	r3, fp, r3
 800a74c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a75c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a764:	460b      	mov	r3, r1
 800a766:	18db      	adds	r3, r3, r3
 800a768:	643b      	str	r3, [r7, #64]	; 0x40
 800a76a:	4613      	mov	r3, r2
 800a76c:	eb42 0303 	adc.w	r3, r2, r3
 800a770:	647b      	str	r3, [r7, #68]	; 0x44
 800a772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a77a:	f7f6 f96f 	bl	8000a5c <__aeabi_uldivmod>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4611      	mov	r1, r2
 800a784:	4b3b      	ldr	r3, [pc, #236]	; (800a874 <UART_SetConfig+0x2d4>)
 800a786:	fba3 2301 	umull	r2, r3, r3, r1
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	2264      	movs	r2, #100	; 0x64
 800a78e:	fb02 f303 	mul.w	r3, r2, r3
 800a792:	1acb      	subs	r3, r1, r3
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a79a:	4b36      	ldr	r3, [pc, #216]	; (800a874 <UART_SetConfig+0x2d4>)
 800a79c:	fba3 2302 	umull	r2, r3, r3, r2
 800a7a0:	095b      	lsrs	r3, r3, #5
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7a8:	441c      	add	r4, r3
 800a7aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a7b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a7bc:	4642      	mov	r2, r8
 800a7be:	464b      	mov	r3, r9
 800a7c0:	1891      	adds	r1, r2, r2
 800a7c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7c4:	415b      	adcs	r3, r3
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	1851      	adds	r1, r2, r1
 800a7d0:	6339      	str	r1, [r7, #48]	; 0x30
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	414b      	adcs	r3, r1
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7e4:	4659      	mov	r1, fp
 800a7e6:	00cb      	lsls	r3, r1, #3
 800a7e8:	4651      	mov	r1, sl
 800a7ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7ee:	4651      	mov	r1, sl
 800a7f0:	00ca      	lsls	r2, r1, #3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	189b      	adds	r3, r3, r2
 800a7fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a800:	464b      	mov	r3, r9
 800a802:	460a      	mov	r2, r1
 800a804:	eb42 0303 	adc.w	r3, r2, r3
 800a808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a81c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a820:	460b      	mov	r3, r1
 800a822:	18db      	adds	r3, r3, r3
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
 800a826:	4613      	mov	r3, r2
 800a828:	eb42 0303 	adc.w	r3, r2, r3
 800a82c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a82e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a836:	f7f6 f911 	bl	8000a5c <__aeabi_uldivmod>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <UART_SetConfig+0x2d4>)
 800a840:	fba3 1302 	umull	r1, r3, r3, r2
 800a844:	095b      	lsrs	r3, r3, #5
 800a846:	2164      	movs	r1, #100	; 0x64
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	3332      	adds	r3, #50	; 0x32
 800a852:	4a08      	ldr	r2, [pc, #32]	; (800a874 <UART_SetConfig+0x2d4>)
 800a854:	fba2 2303 	umull	r2, r3, r2, r3
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	f003 0207 	and.w	r2, r3, #7
 800a85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4422      	add	r2, r4
 800a866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a868:	e105      	b.n	800aa76 <UART_SetConfig+0x4d6>
 800a86a:	bf00      	nop
 800a86c:	40011000 	.word	0x40011000
 800a870:	40011400 	.word	0x40011400
 800a874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a88a:	4642      	mov	r2, r8
 800a88c:	464b      	mov	r3, r9
 800a88e:	1891      	adds	r1, r2, r2
 800a890:	6239      	str	r1, [r7, #32]
 800a892:	415b      	adcs	r3, r3
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
 800a896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a89a:	4641      	mov	r1, r8
 800a89c:	1854      	adds	r4, r2, r1
 800a89e:	4649      	mov	r1, r9
 800a8a0:	eb43 0501 	adc.w	r5, r3, r1
 800a8a4:	f04f 0200 	mov.w	r2, #0
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	00eb      	lsls	r3, r5, #3
 800a8ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8b2:	00e2      	lsls	r2, r4, #3
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	4643      	mov	r3, r8
 800a8ba:	18e3      	adds	r3, r4, r3
 800a8bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	eb45 0303 	adc.w	r3, r5, r3
 800a8c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8da:	f04f 0200 	mov.w	r2, #0
 800a8de:	f04f 0300 	mov.w	r3, #0
 800a8e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	008b      	lsls	r3, r1, #2
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	008a      	lsls	r2, r1, #2
 800a8f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8f8:	f7f6 f8b0 	bl	8000a5c <__aeabi_uldivmod>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4b60      	ldr	r3, [pc, #384]	; (800aa84 <UART_SetConfig+0x4e4>)
 800a902:	fba3 2302 	umull	r2, r3, r3, r2
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	011c      	lsls	r4, r3, #4
 800a90a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a91c:	4642      	mov	r2, r8
 800a91e:	464b      	mov	r3, r9
 800a920:	1891      	adds	r1, r2, r2
 800a922:	61b9      	str	r1, [r7, #24]
 800a924:	415b      	adcs	r3, r3
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a92c:	4641      	mov	r1, r8
 800a92e:	1851      	adds	r1, r2, r1
 800a930:	6139      	str	r1, [r7, #16]
 800a932:	4649      	mov	r1, r9
 800a934:	414b      	adcs	r3, r1
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a944:	4659      	mov	r1, fp
 800a946:	00cb      	lsls	r3, r1, #3
 800a948:	4651      	mov	r1, sl
 800a94a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a94e:	4651      	mov	r1, sl
 800a950:	00ca      	lsls	r2, r1, #3
 800a952:	4610      	mov	r0, r2
 800a954:	4619      	mov	r1, r3
 800a956:	4603      	mov	r3, r0
 800a958:	4642      	mov	r2, r8
 800a95a:	189b      	adds	r3, r3, r2
 800a95c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a960:	464b      	mov	r3, r9
 800a962:	460a      	mov	r2, r1
 800a964:	eb42 0303 	adc.w	r3, r2, r3
 800a968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	67bb      	str	r3, [r7, #120]	; 0x78
 800a976:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a978:	f04f 0200 	mov.w	r2, #0
 800a97c:	f04f 0300 	mov.w	r3, #0
 800a980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a984:	4649      	mov	r1, r9
 800a986:	008b      	lsls	r3, r1, #2
 800a988:	4641      	mov	r1, r8
 800a98a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a98e:	4641      	mov	r1, r8
 800a990:	008a      	lsls	r2, r1, #2
 800a992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a996:	f7f6 f861 	bl	8000a5c <__aeabi_uldivmod>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4b39      	ldr	r3, [pc, #228]	; (800aa84 <UART_SetConfig+0x4e4>)
 800a9a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	2164      	movs	r1, #100	; 0x64
 800a9a8:	fb01 f303 	mul.w	r3, r1, r3
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	3332      	adds	r3, #50	; 0x32
 800a9b2:	4a34      	ldr	r2, [pc, #208]	; (800aa84 <UART_SetConfig+0x4e4>)
 800a9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9be:	441c      	add	r4, r3
 800a9c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	673b      	str	r3, [r7, #112]	; 0x70
 800a9c8:	677a      	str	r2, [r7, #116]	; 0x74
 800a9ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	1891      	adds	r1, r2, r2
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	415b      	adcs	r3, r3
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9de:	4641      	mov	r1, r8
 800a9e0:	1851      	adds	r1, r2, r1
 800a9e2:	6039      	str	r1, [r7, #0]
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	414b      	adcs	r3, r1
 800a9e8:	607b      	str	r3, [r7, #4]
 800a9ea:	f04f 0200 	mov.w	r2, #0
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	00cb      	lsls	r3, r1, #3
 800a9fa:	4651      	mov	r1, sl
 800a9fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa00:	4651      	mov	r1, sl
 800aa02:	00ca      	lsls	r2, r1, #3
 800aa04:	4610      	mov	r0, r2
 800aa06:	4619      	mov	r1, r3
 800aa08:	4603      	mov	r3, r0
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	189b      	adds	r3, r3, r2
 800aa0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa10:	464b      	mov	r3, r9
 800aa12:	460a      	mov	r2, r1
 800aa14:	eb42 0303 	adc.w	r3, r2, r3
 800aa18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	663b      	str	r3, [r7, #96]	; 0x60
 800aa24:	667a      	str	r2, [r7, #100]	; 0x64
 800aa26:	f04f 0200 	mov.w	r2, #0
 800aa2a:	f04f 0300 	mov.w	r3, #0
 800aa2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa32:	4649      	mov	r1, r9
 800aa34:	008b      	lsls	r3, r1, #2
 800aa36:	4641      	mov	r1, r8
 800aa38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa3c:	4641      	mov	r1, r8
 800aa3e:	008a      	lsls	r2, r1, #2
 800aa40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa44:	f7f6 f80a 	bl	8000a5c <__aeabi_uldivmod>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <UART_SetConfig+0x4e4>)
 800aa4e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa52:	095b      	lsrs	r3, r3, #5
 800aa54:	2164      	movs	r1, #100	; 0x64
 800aa56:	fb01 f303 	mul.w	r3, r1, r3
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	3332      	adds	r3, #50	; 0x32
 800aa60:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <UART_SetConfig+0x4e4>)
 800aa62:	fba2 2303 	umull	r2, r3, r2, r3
 800aa66:	095b      	lsrs	r3, r3, #5
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4422      	add	r2, r4
 800aa74:	609a      	str	r2, [r3, #8]
}
 800aa76:	bf00      	nop
 800aa78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa82:	bf00      	nop
 800aa84:	51eb851f 	.word	0x51eb851f

0800aa88 <atoi>:
 800aa88:	220a      	movs	r2, #10
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	f000 b8d4 	b.w	800ac38 <strtol>

0800aa90 <__errno>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	; (800aa98 <__errno+0x8>)
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000080 	.word	0x20000080

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d0d      	ldr	r5, [pc, #52]	; (800aad4 <__libc_init_array+0x38>)
 800aaa0:	4c0d      	ldr	r4, [pc, #52]	; (800aad8 <__libc_init_array+0x3c>)
 800aaa2:	1b64      	subs	r4, r4, r5
 800aaa4:	10a4      	asrs	r4, r4, #2
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	4d0b      	ldr	r5, [pc, #44]	; (800aadc <__libc_init_array+0x40>)
 800aaae:	4c0c      	ldr	r4, [pc, #48]	; (800aae0 <__libc_init_array+0x44>)
 800aab0:	f000 fd1a 	bl	800b4e8 <_init>
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	2600      	movs	r6, #0
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800baa8 	.word	0x0800baa8
 800aad8:	0800baa8 	.word	0x0800baa8
 800aadc:	0800baa8 	.word	0x0800baa8
 800aae0:	0800baac 	.word	0x0800baac

0800aae4 <memset>:
 800aae4:	4402      	add	r2, r0
 800aae6:	4603      	mov	r3, r0
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d100      	bne.n	800aaee <memset+0xa>
 800aaec:	4770      	bx	lr
 800aaee:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf2:	e7f9      	b.n	800aae8 <memset+0x4>

0800aaf4 <siprintf>:
 800aaf4:	b40e      	push	{r1, r2, r3}
 800aaf6:	b500      	push	{lr}
 800aaf8:	b09c      	sub	sp, #112	; 0x70
 800aafa:	ab1d      	add	r3, sp, #116	; 0x74
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	9006      	str	r0, [sp, #24]
 800ab00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab04:	4809      	ldr	r0, [pc, #36]	; (800ab2c <siprintf+0x38>)
 800ab06:	9107      	str	r1, [sp, #28]
 800ab08:	9104      	str	r1, [sp, #16]
 800ab0a:	4909      	ldr	r1, [pc, #36]	; (800ab30 <siprintf+0x3c>)
 800ab0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab10:	9105      	str	r1, [sp, #20]
 800ab12:	6800      	ldr	r0, [r0, #0]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	a902      	add	r1, sp, #8
 800ab18:	f000 f8f4 	bl	800ad04 <_svfiprintf_r>
 800ab1c:	9b02      	ldr	r3, [sp, #8]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	b01c      	add	sp, #112	; 0x70
 800ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab28:	b003      	add	sp, #12
 800ab2a:	4770      	bx	lr
 800ab2c:	20000080 	.word	0x20000080
 800ab30:	ffff0208 	.word	0xffff0208

0800ab34 <_strtol_l.constprop.0>:
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3a:	d001      	beq.n	800ab40 <_strtol_l.constprop.0+0xc>
 800ab3c:	2b24      	cmp	r3, #36	; 0x24
 800ab3e:	d906      	bls.n	800ab4e <_strtol_l.constprop.0+0x1a>
 800ab40:	f7ff ffa6 	bl	800aa90 <__errno>
 800ab44:	2316      	movs	r3, #22
 800ab46:	6003      	str	r3, [r0, #0]
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac34 <_strtol_l.constprop.0+0x100>
 800ab52:	460d      	mov	r5, r1
 800ab54:	462e      	mov	r6, r5
 800ab56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ab5e:	f017 0708 	ands.w	r7, r7, #8
 800ab62:	d1f7      	bne.n	800ab54 <_strtol_l.constprop.0+0x20>
 800ab64:	2c2d      	cmp	r4, #45	; 0x2d
 800ab66:	d132      	bne.n	800abce <_strtol_l.constprop.0+0x9a>
 800ab68:	782c      	ldrb	r4, [r5, #0]
 800ab6a:	2701      	movs	r7, #1
 800ab6c:	1cb5      	adds	r5, r6, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d05b      	beq.n	800ac2a <_strtol_l.constprop.0+0xf6>
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d109      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ab76:	2c30      	cmp	r4, #48	; 0x30
 800ab78:	d107      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ab7a:	782c      	ldrb	r4, [r5, #0]
 800ab7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab80:	2c58      	cmp	r4, #88	; 0x58
 800ab82:	d14d      	bne.n	800ac20 <_strtol_l.constprop.0+0xec>
 800ab84:	786c      	ldrb	r4, [r5, #1]
 800ab86:	2310      	movs	r3, #16
 800ab88:	3502      	adds	r5, #2
 800ab8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ab92:	f04f 0c00 	mov.w	ip, #0
 800ab96:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab9a:	4666      	mov	r6, ip
 800ab9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800aba0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aba4:	f1be 0f09 	cmp.w	lr, #9
 800aba8:	d816      	bhi.n	800abd8 <_strtol_l.constprop.0+0xa4>
 800abaa:	4674      	mov	r4, lr
 800abac:	42a3      	cmp	r3, r4
 800abae:	dd24      	ble.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abb0:	f1bc 0f00 	cmp.w	ip, #0
 800abb4:	db1e      	blt.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abb6:	45b1      	cmp	r9, r6
 800abb8:	d31c      	bcc.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abba:	d101      	bne.n	800abc0 <_strtol_l.constprop.0+0x8c>
 800abbc:	45a2      	cmp	sl, r4
 800abbe:	db19      	blt.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abc0:	fb06 4603 	mla	r6, r6, r3, r4
 800abc4:	f04f 0c01 	mov.w	ip, #1
 800abc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abcc:	e7e8      	b.n	800aba0 <_strtol_l.constprop.0+0x6c>
 800abce:	2c2b      	cmp	r4, #43	; 0x2b
 800abd0:	bf04      	itt	eq
 800abd2:	782c      	ldrbeq	r4, [r5, #0]
 800abd4:	1cb5      	addeq	r5, r6, #2
 800abd6:	e7ca      	b.n	800ab6e <_strtol_l.constprop.0+0x3a>
 800abd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800abdc:	f1be 0f19 	cmp.w	lr, #25
 800abe0:	d801      	bhi.n	800abe6 <_strtol_l.constprop.0+0xb2>
 800abe2:	3c37      	subs	r4, #55	; 0x37
 800abe4:	e7e2      	b.n	800abac <_strtol_l.constprop.0+0x78>
 800abe6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800abea:	f1be 0f19 	cmp.w	lr, #25
 800abee:	d804      	bhi.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abf0:	3c57      	subs	r4, #87	; 0x57
 800abf2:	e7db      	b.n	800abac <_strtol_l.constprop.0+0x78>
 800abf4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800abf8:	e7e6      	b.n	800abc8 <_strtol_l.constprop.0+0x94>
 800abfa:	f1bc 0f00 	cmp.w	ip, #0
 800abfe:	da05      	bge.n	800ac0c <_strtol_l.constprop.0+0xd8>
 800ac00:	2322      	movs	r3, #34	; 0x22
 800ac02:	6003      	str	r3, [r0, #0]
 800ac04:	4646      	mov	r6, r8
 800ac06:	b942      	cbnz	r2, 800ac1a <_strtol_l.constprop.0+0xe6>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	e79e      	b.n	800ab4a <_strtol_l.constprop.0+0x16>
 800ac0c:	b107      	cbz	r7, 800ac10 <_strtol_l.constprop.0+0xdc>
 800ac0e:	4276      	negs	r6, r6
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d0f9      	beq.n	800ac08 <_strtol_l.constprop.0+0xd4>
 800ac14:	f1bc 0f00 	cmp.w	ip, #0
 800ac18:	d000      	beq.n	800ac1c <_strtol_l.constprop.0+0xe8>
 800ac1a:	1e69      	subs	r1, r5, #1
 800ac1c:	6011      	str	r1, [r2, #0]
 800ac1e:	e7f3      	b.n	800ac08 <_strtol_l.constprop.0+0xd4>
 800ac20:	2430      	movs	r4, #48	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1b1      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac26:	2308      	movs	r3, #8
 800ac28:	e7af      	b.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac2a:	2c30      	cmp	r4, #48	; 0x30
 800ac2c:	d0a5      	beq.n	800ab7a <_strtol_l.constprop.0+0x46>
 800ac2e:	230a      	movs	r3, #10
 800ac30:	e7ab      	b.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac32:	bf00      	nop
 800ac34:	0800b96d 	.word	0x0800b96d

0800ac38 <strtol>:
 800ac38:	4613      	mov	r3, r2
 800ac3a:	460a      	mov	r2, r1
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4802      	ldr	r0, [pc, #8]	; (800ac48 <strtol+0x10>)
 800ac40:	6800      	ldr	r0, [r0, #0]
 800ac42:	f7ff bf77 	b.w	800ab34 <_strtol_l.constprop.0>
 800ac46:	bf00      	nop
 800ac48:	20000080 	.word	0x20000080

0800ac4c <__ssputs_r>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	688e      	ldr	r6, [r1, #8]
 800ac52:	429e      	cmp	r6, r3
 800ac54:	4682      	mov	sl, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	4690      	mov	r8, r2
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	d838      	bhi.n	800acd0 <__ssputs_r+0x84>
 800ac5e:	898a      	ldrh	r2, [r1, #12]
 800ac60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac64:	d032      	beq.n	800accc <__ssputs_r+0x80>
 800ac66:	6825      	ldr	r5, [r4, #0]
 800ac68:	6909      	ldr	r1, [r1, #16]
 800ac6a:	eba5 0901 	sub.w	r9, r5, r1
 800ac6e:	6965      	ldr	r5, [r4, #20]
 800ac70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac78:	3301      	adds	r3, #1
 800ac7a:	444b      	add	r3, r9
 800ac7c:	106d      	asrs	r5, r5, #1
 800ac7e:	429d      	cmp	r5, r3
 800ac80:	bf38      	it	cc
 800ac82:	461d      	movcc	r5, r3
 800ac84:	0553      	lsls	r3, r2, #21
 800ac86:	d531      	bpl.n	800acec <__ssputs_r+0xa0>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f000 fb63 	bl	800b354 <_malloc_r>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	b950      	cbnz	r0, 800aca8 <__ssputs_r+0x5c>
 800ac92:	230c      	movs	r3, #12
 800ac94:	f8ca 3000 	str.w	r3, [sl]
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca8:	6921      	ldr	r1, [r4, #16]
 800acaa:	464a      	mov	r2, r9
 800acac:	f000 fabe 	bl	800b22c <memcpy>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	6126      	str	r6, [r4, #16]
 800acbe:	6165      	str	r5, [r4, #20]
 800acc0:	444e      	add	r6, r9
 800acc2:	eba5 0509 	sub.w	r5, r5, r9
 800acc6:	6026      	str	r6, [r4, #0]
 800acc8:	60a5      	str	r5, [r4, #8]
 800acca:	463e      	mov	r6, r7
 800accc:	42be      	cmp	r6, r7
 800acce:	d900      	bls.n	800acd2 <__ssputs_r+0x86>
 800acd0:	463e      	mov	r6, r7
 800acd2:	6820      	ldr	r0, [r4, #0]
 800acd4:	4632      	mov	r2, r6
 800acd6:	4641      	mov	r1, r8
 800acd8:	f000 fab6 	bl	800b248 <memmove>
 800acdc:	68a3      	ldr	r3, [r4, #8]
 800acde:	1b9b      	subs	r3, r3, r6
 800ace0:	60a3      	str	r3, [r4, #8]
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	4433      	add	r3, r6
 800ace6:	6023      	str	r3, [r4, #0]
 800ace8:	2000      	movs	r0, #0
 800acea:	e7db      	b.n	800aca4 <__ssputs_r+0x58>
 800acec:	462a      	mov	r2, r5
 800acee:	f000 fba5 	bl	800b43c <_realloc_r>
 800acf2:	4606      	mov	r6, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1e1      	bne.n	800acbc <__ssputs_r+0x70>
 800acf8:	6921      	ldr	r1, [r4, #16]
 800acfa:	4650      	mov	r0, sl
 800acfc:	f000 fabe 	bl	800b27c <_free_r>
 800ad00:	e7c7      	b.n	800ac92 <__ssputs_r+0x46>
	...

0800ad04 <_svfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4698      	mov	r8, r3
 800ad0a:	898b      	ldrh	r3, [r1, #12]
 800ad0c:	061b      	lsls	r3, r3, #24
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	4607      	mov	r7, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	d50e      	bpl.n	800ad36 <_svfiprintf_r+0x32>
 800ad18:	690b      	ldr	r3, [r1, #16]
 800ad1a:	b963      	cbnz	r3, 800ad36 <_svfiprintf_r+0x32>
 800ad1c:	2140      	movs	r1, #64	; 0x40
 800ad1e:	f000 fb19 	bl	800b354 <_malloc_r>
 800ad22:	6028      	str	r0, [r5, #0]
 800ad24:	6128      	str	r0, [r5, #16]
 800ad26:	b920      	cbnz	r0, 800ad32 <_svfiprintf_r+0x2e>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad30:	e0d1      	b.n	800aed6 <_svfiprintf_r+0x1d2>
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	616b      	str	r3, [r5, #20]
 800ad36:	2300      	movs	r3, #0
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	2320      	movs	r3, #32
 800ad3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad44:	2330      	movs	r3, #48	; 0x30
 800ad46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aef0 <_svfiprintf_r+0x1ec>
 800ad4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad4e:	f04f 0901 	mov.w	r9, #1
 800ad52:	4623      	mov	r3, r4
 800ad54:	469a      	mov	sl, r3
 800ad56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad5a:	b10a      	cbz	r2, 800ad60 <_svfiprintf_r+0x5c>
 800ad5c:	2a25      	cmp	r2, #37	; 0x25
 800ad5e:	d1f9      	bne.n	800ad54 <_svfiprintf_r+0x50>
 800ad60:	ebba 0b04 	subs.w	fp, sl, r4
 800ad64:	d00b      	beq.n	800ad7e <_svfiprintf_r+0x7a>
 800ad66:	465b      	mov	r3, fp
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff ff6d 	bl	800ac4c <__ssputs_r>
 800ad72:	3001      	adds	r0, #1
 800ad74:	f000 80aa 	beq.w	800aecc <_svfiprintf_r+0x1c8>
 800ad78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad7a:	445a      	add	r2, fp
 800ad7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 80a2 	beq.w	800aecc <_svfiprintf_r+0x1c8>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad92:	f10a 0a01 	add.w	sl, sl, #1
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	9307      	str	r3, [sp, #28]
 800ad9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9e:	931a      	str	r3, [sp, #104]	; 0x68
 800ada0:	4654      	mov	r4, sl
 800ada2:	2205      	movs	r2, #5
 800ada4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada8:	4851      	ldr	r0, [pc, #324]	; (800aef0 <_svfiprintf_r+0x1ec>)
 800adaa:	f7f5 fa19 	bl	80001e0 <memchr>
 800adae:	9a04      	ldr	r2, [sp, #16]
 800adb0:	b9d8      	cbnz	r0, 800adea <_svfiprintf_r+0xe6>
 800adb2:	06d0      	lsls	r0, r2, #27
 800adb4:	bf44      	itt	mi
 800adb6:	2320      	movmi	r3, #32
 800adb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adbc:	0711      	lsls	r1, r2, #28
 800adbe:	bf44      	itt	mi
 800adc0:	232b      	movmi	r3, #43	; 0x2b
 800adc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc6:	f89a 3000 	ldrb.w	r3, [sl]
 800adca:	2b2a      	cmp	r3, #42	; 0x2a
 800adcc:	d015      	beq.n	800adfa <_svfiprintf_r+0xf6>
 800adce:	9a07      	ldr	r2, [sp, #28]
 800add0:	4654      	mov	r4, sl
 800add2:	2000      	movs	r0, #0
 800add4:	f04f 0c0a 	mov.w	ip, #10
 800add8:	4621      	mov	r1, r4
 800adda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adde:	3b30      	subs	r3, #48	; 0x30
 800ade0:	2b09      	cmp	r3, #9
 800ade2:	d94e      	bls.n	800ae82 <_svfiprintf_r+0x17e>
 800ade4:	b1b0      	cbz	r0, 800ae14 <_svfiprintf_r+0x110>
 800ade6:	9207      	str	r2, [sp, #28]
 800ade8:	e014      	b.n	800ae14 <_svfiprintf_r+0x110>
 800adea:	eba0 0308 	sub.w	r3, r0, r8
 800adee:	fa09 f303 	lsl.w	r3, r9, r3
 800adf2:	4313      	orrs	r3, r2
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	46a2      	mov	sl, r4
 800adf8:	e7d2      	b.n	800ada0 <_svfiprintf_r+0x9c>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	1d19      	adds	r1, r3, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	9103      	str	r1, [sp, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfbb      	ittet	lt
 800ae06:	425b      	neglt	r3, r3
 800ae08:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0c:	9307      	strge	r3, [sp, #28]
 800ae0e:	9307      	strlt	r3, [sp, #28]
 800ae10:	bfb8      	it	lt
 800ae12:	9204      	strlt	r2, [sp, #16]
 800ae14:	7823      	ldrb	r3, [r4, #0]
 800ae16:	2b2e      	cmp	r3, #46	; 0x2e
 800ae18:	d10c      	bne.n	800ae34 <_svfiprintf_r+0x130>
 800ae1a:	7863      	ldrb	r3, [r4, #1]
 800ae1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1e:	d135      	bne.n	800ae8c <_svfiprintf_r+0x188>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9203      	str	r2, [sp, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfb8      	it	lt
 800ae2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae30:	3402      	adds	r4, #2
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af00 <_svfiprintf_r+0x1fc>
 800ae38:	7821      	ldrb	r1, [r4, #0]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	f7f5 f9cf 	bl	80001e0 <memchr>
 800ae42:	b140      	cbz	r0, 800ae56 <_svfiprintf_r+0x152>
 800ae44:	2340      	movs	r3, #64	; 0x40
 800ae46:	eba0 000a 	sub.w	r0, r0, sl
 800ae4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	4303      	orrs	r3, r0
 800ae52:	3401      	adds	r4, #1
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5a:	4826      	ldr	r0, [pc, #152]	; (800aef4 <_svfiprintf_r+0x1f0>)
 800ae5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae60:	2206      	movs	r2, #6
 800ae62:	f7f5 f9bd 	bl	80001e0 <memchr>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d038      	beq.n	800aedc <_svfiprintf_r+0x1d8>
 800ae6a:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <_svfiprintf_r+0x1f4>)
 800ae6c:	bb1b      	cbnz	r3, 800aeb6 <_svfiprintf_r+0x1b2>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	3307      	adds	r3, #7
 800ae72:	f023 0307 	bic.w	r3, r3, #7
 800ae76:	3308      	adds	r3, #8
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	4433      	add	r3, r6
 800ae7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae80:	e767      	b.n	800ad52 <_svfiprintf_r+0x4e>
 800ae82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae86:	460c      	mov	r4, r1
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e7a5      	b.n	800add8 <_svfiprintf_r+0xd4>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	3401      	adds	r4, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	4619      	mov	r1, r3
 800ae94:	f04f 0c0a 	mov.w	ip, #10
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9e:	3a30      	subs	r2, #48	; 0x30
 800aea0:	2a09      	cmp	r2, #9
 800aea2:	d903      	bls.n	800aeac <_svfiprintf_r+0x1a8>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0c5      	beq.n	800ae34 <_svfiprintf_r+0x130>
 800aea8:	9105      	str	r1, [sp, #20]
 800aeaa:	e7c3      	b.n	800ae34 <_svfiprintf_r+0x130>
 800aeac:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e7f0      	b.n	800ae98 <_svfiprintf_r+0x194>
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	462a      	mov	r2, r5
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	4638      	mov	r0, r7
 800aec2:	f3af 8000 	nop.w
 800aec6:	1c42      	adds	r2, r0, #1
 800aec8:	4606      	mov	r6, r0
 800aeca:	d1d6      	bne.n	800ae7a <_svfiprintf_r+0x176>
 800aecc:	89ab      	ldrh	r3, [r5, #12]
 800aece:	065b      	lsls	r3, r3, #25
 800aed0:	f53f af2c 	bmi.w	800ad2c <_svfiprintf_r+0x28>
 800aed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed6:	b01d      	add	sp, #116	; 0x74
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	462a      	mov	r2, r5
 800aee2:	4b06      	ldr	r3, [pc, #24]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4638      	mov	r0, r7
 800aee8:	f000 f87a 	bl	800afe0 <_printf_i>
 800aeec:	e7eb      	b.n	800aec6 <_svfiprintf_r+0x1c2>
 800aeee:	bf00      	nop
 800aef0:	0800ba6d 	.word	0x0800ba6d
 800aef4:	0800ba77 	.word	0x0800ba77
 800aef8:	00000000 	.word	0x00000000
 800aefc:	0800ac4d 	.word	0x0800ac4d
 800af00:	0800ba73 	.word	0x0800ba73

0800af04 <_printf_common>:
 800af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af08:	4616      	mov	r6, r2
 800af0a:	4699      	mov	r9, r3
 800af0c:	688a      	ldr	r2, [r1, #8]
 800af0e:	690b      	ldr	r3, [r1, #16]
 800af10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af14:	4293      	cmp	r3, r2
 800af16:	bfb8      	it	lt
 800af18:	4613      	movlt	r3, r2
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af20:	4607      	mov	r7, r0
 800af22:	460c      	mov	r4, r1
 800af24:	b10a      	cbz	r2, 800af2a <_printf_common+0x26>
 800af26:	3301      	adds	r3, #1
 800af28:	6033      	str	r3, [r6, #0]
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	0699      	lsls	r1, r3, #26
 800af2e:	bf42      	ittt	mi
 800af30:	6833      	ldrmi	r3, [r6, #0]
 800af32:	3302      	addmi	r3, #2
 800af34:	6033      	strmi	r3, [r6, #0]
 800af36:	6825      	ldr	r5, [r4, #0]
 800af38:	f015 0506 	ands.w	r5, r5, #6
 800af3c:	d106      	bne.n	800af4c <_printf_common+0x48>
 800af3e:	f104 0a19 	add.w	sl, r4, #25
 800af42:	68e3      	ldr	r3, [r4, #12]
 800af44:	6832      	ldr	r2, [r6, #0]
 800af46:	1a9b      	subs	r3, r3, r2
 800af48:	42ab      	cmp	r3, r5
 800af4a:	dc26      	bgt.n	800af9a <_printf_common+0x96>
 800af4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af50:	1e13      	subs	r3, r2, #0
 800af52:	6822      	ldr	r2, [r4, #0]
 800af54:	bf18      	it	ne
 800af56:	2301      	movne	r3, #1
 800af58:	0692      	lsls	r2, r2, #26
 800af5a:	d42b      	bmi.n	800afb4 <_printf_common+0xb0>
 800af5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af60:	4649      	mov	r1, r9
 800af62:	4638      	mov	r0, r7
 800af64:	47c0      	blx	r8
 800af66:	3001      	adds	r0, #1
 800af68:	d01e      	beq.n	800afa8 <_printf_common+0xa4>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	68e5      	ldr	r5, [r4, #12]
 800af6e:	6832      	ldr	r2, [r6, #0]
 800af70:	f003 0306 	and.w	r3, r3, #6
 800af74:	2b04      	cmp	r3, #4
 800af76:	bf08      	it	eq
 800af78:	1aad      	subeq	r5, r5, r2
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	6922      	ldr	r2, [r4, #16]
 800af7e:	bf0c      	ite	eq
 800af80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af84:	2500      	movne	r5, #0
 800af86:	4293      	cmp	r3, r2
 800af88:	bfc4      	itt	gt
 800af8a:	1a9b      	subgt	r3, r3, r2
 800af8c:	18ed      	addgt	r5, r5, r3
 800af8e:	2600      	movs	r6, #0
 800af90:	341a      	adds	r4, #26
 800af92:	42b5      	cmp	r5, r6
 800af94:	d11a      	bne.n	800afcc <_printf_common+0xc8>
 800af96:	2000      	movs	r0, #0
 800af98:	e008      	b.n	800afac <_printf_common+0xa8>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4652      	mov	r2, sl
 800af9e:	4649      	mov	r1, r9
 800afa0:	4638      	mov	r0, r7
 800afa2:	47c0      	blx	r8
 800afa4:	3001      	adds	r0, #1
 800afa6:	d103      	bne.n	800afb0 <_printf_common+0xac>
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb0:	3501      	adds	r5, #1
 800afb2:	e7c6      	b.n	800af42 <_printf_common+0x3e>
 800afb4:	18e1      	adds	r1, r4, r3
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	2030      	movs	r0, #48	; 0x30
 800afba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afbe:	4422      	add	r2, r4
 800afc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afc8:	3302      	adds	r3, #2
 800afca:	e7c7      	b.n	800af5c <_printf_common+0x58>
 800afcc:	2301      	movs	r3, #1
 800afce:	4622      	mov	r2, r4
 800afd0:	4649      	mov	r1, r9
 800afd2:	4638      	mov	r0, r7
 800afd4:	47c0      	blx	r8
 800afd6:	3001      	adds	r0, #1
 800afd8:	d0e6      	beq.n	800afa8 <_printf_common+0xa4>
 800afda:	3601      	adds	r6, #1
 800afdc:	e7d9      	b.n	800af92 <_printf_common+0x8e>
	...

0800afe0 <_printf_i>:
 800afe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe4:	7e0f      	ldrb	r7, [r1, #24]
 800afe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afe8:	2f78      	cmp	r7, #120	; 0x78
 800afea:	4691      	mov	r9, r2
 800afec:	4680      	mov	r8, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	469a      	mov	sl, r3
 800aff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aff6:	d807      	bhi.n	800b008 <_printf_i+0x28>
 800aff8:	2f62      	cmp	r7, #98	; 0x62
 800affa:	d80a      	bhi.n	800b012 <_printf_i+0x32>
 800affc:	2f00      	cmp	r7, #0
 800affe:	f000 80d8 	beq.w	800b1b2 <_printf_i+0x1d2>
 800b002:	2f58      	cmp	r7, #88	; 0x58
 800b004:	f000 80a3 	beq.w	800b14e <_printf_i+0x16e>
 800b008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b00c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b010:	e03a      	b.n	800b088 <_printf_i+0xa8>
 800b012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b016:	2b15      	cmp	r3, #21
 800b018:	d8f6      	bhi.n	800b008 <_printf_i+0x28>
 800b01a:	a101      	add	r1, pc, #4	; (adr r1, 800b020 <_printf_i+0x40>)
 800b01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b020:	0800b079 	.word	0x0800b079
 800b024:	0800b08d 	.word	0x0800b08d
 800b028:	0800b009 	.word	0x0800b009
 800b02c:	0800b009 	.word	0x0800b009
 800b030:	0800b009 	.word	0x0800b009
 800b034:	0800b009 	.word	0x0800b009
 800b038:	0800b08d 	.word	0x0800b08d
 800b03c:	0800b009 	.word	0x0800b009
 800b040:	0800b009 	.word	0x0800b009
 800b044:	0800b009 	.word	0x0800b009
 800b048:	0800b009 	.word	0x0800b009
 800b04c:	0800b199 	.word	0x0800b199
 800b050:	0800b0bd 	.word	0x0800b0bd
 800b054:	0800b17b 	.word	0x0800b17b
 800b058:	0800b009 	.word	0x0800b009
 800b05c:	0800b009 	.word	0x0800b009
 800b060:	0800b1bb 	.word	0x0800b1bb
 800b064:	0800b009 	.word	0x0800b009
 800b068:	0800b0bd 	.word	0x0800b0bd
 800b06c:	0800b009 	.word	0x0800b009
 800b070:	0800b009 	.word	0x0800b009
 800b074:	0800b183 	.word	0x0800b183
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	1d1a      	adds	r2, r3, #4
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	602a      	str	r2, [r5, #0]
 800b080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b088:	2301      	movs	r3, #1
 800b08a:	e0a3      	b.n	800b1d4 <_printf_i+0x1f4>
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	6829      	ldr	r1, [r5, #0]
 800b090:	0606      	lsls	r6, r0, #24
 800b092:	f101 0304 	add.w	r3, r1, #4
 800b096:	d50a      	bpl.n	800b0ae <_printf_i+0xce>
 800b098:	680e      	ldr	r6, [r1, #0]
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	2e00      	cmp	r6, #0
 800b09e:	da03      	bge.n	800b0a8 <_printf_i+0xc8>
 800b0a0:	232d      	movs	r3, #45	; 0x2d
 800b0a2:	4276      	negs	r6, r6
 800b0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a8:	485e      	ldr	r0, [pc, #376]	; (800b224 <_printf_i+0x244>)
 800b0aa:	230a      	movs	r3, #10
 800b0ac:	e019      	b.n	800b0e2 <_printf_i+0x102>
 800b0ae:	680e      	ldr	r6, [r1, #0]
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0b6:	bf18      	it	ne
 800b0b8:	b236      	sxthne	r6, r6
 800b0ba:	e7ef      	b.n	800b09c <_printf_i+0xbc>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	6820      	ldr	r0, [r4, #0]
 800b0c0:	1d19      	adds	r1, r3, #4
 800b0c2:	6029      	str	r1, [r5, #0]
 800b0c4:	0601      	lsls	r1, r0, #24
 800b0c6:	d501      	bpl.n	800b0cc <_printf_i+0xec>
 800b0c8:	681e      	ldr	r6, [r3, #0]
 800b0ca:	e002      	b.n	800b0d2 <_printf_i+0xf2>
 800b0cc:	0646      	lsls	r6, r0, #25
 800b0ce:	d5fb      	bpl.n	800b0c8 <_printf_i+0xe8>
 800b0d0:	881e      	ldrh	r6, [r3, #0]
 800b0d2:	4854      	ldr	r0, [pc, #336]	; (800b224 <_printf_i+0x244>)
 800b0d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2308      	moveq	r3, #8
 800b0da:	230a      	movne	r3, #10
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e2:	6865      	ldr	r5, [r4, #4]
 800b0e4:	60a5      	str	r5, [r4, #8]
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	bfa2      	ittt	ge
 800b0ea:	6821      	ldrge	r1, [r4, #0]
 800b0ec:	f021 0104 	bicge.w	r1, r1, #4
 800b0f0:	6021      	strge	r1, [r4, #0]
 800b0f2:	b90e      	cbnz	r6, 800b0f8 <_printf_i+0x118>
 800b0f4:	2d00      	cmp	r5, #0
 800b0f6:	d04d      	beq.n	800b194 <_printf_i+0x1b4>
 800b0f8:	4615      	mov	r5, r2
 800b0fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b102:	5dc7      	ldrb	r7, [r0, r7]
 800b104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b108:	4637      	mov	r7, r6
 800b10a:	42bb      	cmp	r3, r7
 800b10c:	460e      	mov	r6, r1
 800b10e:	d9f4      	bls.n	800b0fa <_printf_i+0x11a>
 800b110:	2b08      	cmp	r3, #8
 800b112:	d10b      	bne.n	800b12c <_printf_i+0x14c>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	07de      	lsls	r6, r3, #31
 800b118:	d508      	bpl.n	800b12c <_printf_i+0x14c>
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	4299      	cmp	r1, r3
 800b120:	bfde      	ittt	le
 800b122:	2330      	movle	r3, #48	; 0x30
 800b124:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b128:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b12c:	1b52      	subs	r2, r2, r5
 800b12e:	6122      	str	r2, [r4, #16]
 800b130:	f8cd a000 	str.w	sl, [sp]
 800b134:	464b      	mov	r3, r9
 800b136:	aa03      	add	r2, sp, #12
 800b138:	4621      	mov	r1, r4
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7ff fee2 	bl	800af04 <_printf_common>
 800b140:	3001      	adds	r0, #1
 800b142:	d14c      	bne.n	800b1de <_printf_i+0x1fe>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b148:	b004      	add	sp, #16
 800b14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14e:	4835      	ldr	r0, [pc, #212]	; (800b224 <_printf_i+0x244>)
 800b150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b154:	6829      	ldr	r1, [r5, #0]
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	f851 6b04 	ldr.w	r6, [r1], #4
 800b15c:	6029      	str	r1, [r5, #0]
 800b15e:	061d      	lsls	r5, r3, #24
 800b160:	d514      	bpl.n	800b18c <_printf_i+0x1ac>
 800b162:	07df      	lsls	r7, r3, #31
 800b164:	bf44      	itt	mi
 800b166:	f043 0320 	orrmi.w	r3, r3, #32
 800b16a:	6023      	strmi	r3, [r4, #0]
 800b16c:	b91e      	cbnz	r6, 800b176 <_printf_i+0x196>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	f023 0320 	bic.w	r3, r3, #32
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	2310      	movs	r3, #16
 800b178:	e7b0      	b.n	800b0dc <_printf_i+0xfc>
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	f043 0320 	orr.w	r3, r3, #32
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	2378      	movs	r3, #120	; 0x78
 800b184:	4828      	ldr	r0, [pc, #160]	; (800b228 <_printf_i+0x248>)
 800b186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b18a:	e7e3      	b.n	800b154 <_printf_i+0x174>
 800b18c:	0659      	lsls	r1, r3, #25
 800b18e:	bf48      	it	mi
 800b190:	b2b6      	uxthmi	r6, r6
 800b192:	e7e6      	b.n	800b162 <_printf_i+0x182>
 800b194:	4615      	mov	r5, r2
 800b196:	e7bb      	b.n	800b110 <_printf_i+0x130>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	6826      	ldr	r6, [r4, #0]
 800b19c:	6961      	ldr	r1, [r4, #20]
 800b19e:	1d18      	adds	r0, r3, #4
 800b1a0:	6028      	str	r0, [r5, #0]
 800b1a2:	0635      	lsls	r5, r6, #24
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	d501      	bpl.n	800b1ac <_printf_i+0x1cc>
 800b1a8:	6019      	str	r1, [r3, #0]
 800b1aa:	e002      	b.n	800b1b2 <_printf_i+0x1d2>
 800b1ac:	0670      	lsls	r0, r6, #25
 800b1ae:	d5fb      	bpl.n	800b1a8 <_printf_i+0x1c8>
 800b1b0:	8019      	strh	r1, [r3, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	4615      	mov	r5, r2
 800b1b8:	e7ba      	b.n	800b130 <_printf_i+0x150>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	1d1a      	adds	r2, r3, #4
 800b1be:	602a      	str	r2, [r5, #0]
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	6862      	ldr	r2, [r4, #4]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f7f5 f80a 	bl	80001e0 <memchr>
 800b1cc:	b108      	cbz	r0, 800b1d2 <_printf_i+0x1f2>
 800b1ce:	1b40      	subs	r0, r0, r5
 800b1d0:	6060      	str	r0, [r4, #4]
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1dc:	e7a8      	b.n	800b130 <_printf_i+0x150>
 800b1de:	6923      	ldr	r3, [r4, #16]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	47d0      	blx	sl
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d0ab      	beq.n	800b144 <_printf_i+0x164>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	079b      	lsls	r3, r3, #30
 800b1f0:	d413      	bmi.n	800b21a <_printf_i+0x23a>
 800b1f2:	68e0      	ldr	r0, [r4, #12]
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	bfb8      	it	lt
 800b1fa:	4618      	movlt	r0, r3
 800b1fc:	e7a4      	b.n	800b148 <_printf_i+0x168>
 800b1fe:	2301      	movs	r3, #1
 800b200:	4632      	mov	r2, r6
 800b202:	4649      	mov	r1, r9
 800b204:	4640      	mov	r0, r8
 800b206:	47d0      	blx	sl
 800b208:	3001      	adds	r0, #1
 800b20a:	d09b      	beq.n	800b144 <_printf_i+0x164>
 800b20c:	3501      	adds	r5, #1
 800b20e:	68e3      	ldr	r3, [r4, #12]
 800b210:	9903      	ldr	r1, [sp, #12]
 800b212:	1a5b      	subs	r3, r3, r1
 800b214:	42ab      	cmp	r3, r5
 800b216:	dcf2      	bgt.n	800b1fe <_printf_i+0x21e>
 800b218:	e7eb      	b.n	800b1f2 <_printf_i+0x212>
 800b21a:	2500      	movs	r5, #0
 800b21c:	f104 0619 	add.w	r6, r4, #25
 800b220:	e7f5      	b.n	800b20e <_printf_i+0x22e>
 800b222:	bf00      	nop
 800b224:	0800ba7e 	.word	0x0800ba7e
 800b228:	0800ba8f 	.word	0x0800ba8f

0800b22c <memcpy>:
 800b22c:	440a      	add	r2, r1
 800b22e:	4291      	cmp	r1, r2
 800b230:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b234:	d100      	bne.n	800b238 <memcpy+0xc>
 800b236:	4770      	bx	lr
 800b238:	b510      	push	{r4, lr}
 800b23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b242:	4291      	cmp	r1, r2
 800b244:	d1f9      	bne.n	800b23a <memcpy+0xe>
 800b246:	bd10      	pop	{r4, pc}

0800b248 <memmove>:
 800b248:	4288      	cmp	r0, r1
 800b24a:	b510      	push	{r4, lr}
 800b24c:	eb01 0402 	add.w	r4, r1, r2
 800b250:	d902      	bls.n	800b258 <memmove+0x10>
 800b252:	4284      	cmp	r4, r0
 800b254:	4623      	mov	r3, r4
 800b256:	d807      	bhi.n	800b268 <memmove+0x20>
 800b258:	1e43      	subs	r3, r0, #1
 800b25a:	42a1      	cmp	r1, r4
 800b25c:	d008      	beq.n	800b270 <memmove+0x28>
 800b25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b266:	e7f8      	b.n	800b25a <memmove+0x12>
 800b268:	4402      	add	r2, r0
 800b26a:	4601      	mov	r1, r0
 800b26c:	428a      	cmp	r2, r1
 800b26e:	d100      	bne.n	800b272 <memmove+0x2a>
 800b270:	bd10      	pop	{r4, pc}
 800b272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b27a:	e7f7      	b.n	800b26c <memmove+0x24>

0800b27c <_free_r>:
 800b27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b27e:	2900      	cmp	r1, #0
 800b280:	d044      	beq.n	800b30c <_free_r+0x90>
 800b282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b286:	9001      	str	r0, [sp, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f1a1 0404 	sub.w	r4, r1, #4
 800b28e:	bfb8      	it	lt
 800b290:	18e4      	addlt	r4, r4, r3
 800b292:	f000 f913 	bl	800b4bc <__malloc_lock>
 800b296:	4a1e      	ldr	r2, [pc, #120]	; (800b310 <_free_r+0x94>)
 800b298:	9801      	ldr	r0, [sp, #4]
 800b29a:	6813      	ldr	r3, [r2, #0]
 800b29c:	b933      	cbnz	r3, 800b2ac <_free_r+0x30>
 800b29e:	6063      	str	r3, [r4, #4]
 800b2a0:	6014      	str	r4, [r2, #0]
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2a8:	f000 b90e 	b.w	800b4c8 <__malloc_unlock>
 800b2ac:	42a3      	cmp	r3, r4
 800b2ae:	d908      	bls.n	800b2c2 <_free_r+0x46>
 800b2b0:	6825      	ldr	r5, [r4, #0]
 800b2b2:	1961      	adds	r1, r4, r5
 800b2b4:	428b      	cmp	r3, r1
 800b2b6:	bf01      	itttt	eq
 800b2b8:	6819      	ldreq	r1, [r3, #0]
 800b2ba:	685b      	ldreq	r3, [r3, #4]
 800b2bc:	1949      	addeq	r1, r1, r5
 800b2be:	6021      	streq	r1, [r4, #0]
 800b2c0:	e7ed      	b.n	800b29e <_free_r+0x22>
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	b10b      	cbz	r3, 800b2cc <_free_r+0x50>
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d9fa      	bls.n	800b2c2 <_free_r+0x46>
 800b2cc:	6811      	ldr	r1, [r2, #0]
 800b2ce:	1855      	adds	r5, r2, r1
 800b2d0:	42a5      	cmp	r5, r4
 800b2d2:	d10b      	bne.n	800b2ec <_free_r+0x70>
 800b2d4:	6824      	ldr	r4, [r4, #0]
 800b2d6:	4421      	add	r1, r4
 800b2d8:	1854      	adds	r4, r2, r1
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	6011      	str	r1, [r2, #0]
 800b2de:	d1e0      	bne.n	800b2a2 <_free_r+0x26>
 800b2e0:	681c      	ldr	r4, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	6053      	str	r3, [r2, #4]
 800b2e6:	4421      	add	r1, r4
 800b2e8:	6011      	str	r1, [r2, #0]
 800b2ea:	e7da      	b.n	800b2a2 <_free_r+0x26>
 800b2ec:	d902      	bls.n	800b2f4 <_free_r+0x78>
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	6003      	str	r3, [r0, #0]
 800b2f2:	e7d6      	b.n	800b2a2 <_free_r+0x26>
 800b2f4:	6825      	ldr	r5, [r4, #0]
 800b2f6:	1961      	adds	r1, r4, r5
 800b2f8:	428b      	cmp	r3, r1
 800b2fa:	bf04      	itt	eq
 800b2fc:	6819      	ldreq	r1, [r3, #0]
 800b2fe:	685b      	ldreq	r3, [r3, #4]
 800b300:	6063      	str	r3, [r4, #4]
 800b302:	bf04      	itt	eq
 800b304:	1949      	addeq	r1, r1, r5
 800b306:	6021      	streq	r1, [r4, #0]
 800b308:	6054      	str	r4, [r2, #4]
 800b30a:	e7ca      	b.n	800b2a2 <_free_r+0x26>
 800b30c:	b003      	add	sp, #12
 800b30e:	bd30      	pop	{r4, r5, pc}
 800b310:	20000cf0 	.word	0x20000cf0

0800b314 <sbrk_aligned>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	4e0e      	ldr	r6, [pc, #56]	; (800b350 <sbrk_aligned+0x3c>)
 800b318:	460c      	mov	r4, r1
 800b31a:	6831      	ldr	r1, [r6, #0]
 800b31c:	4605      	mov	r5, r0
 800b31e:	b911      	cbnz	r1, 800b326 <sbrk_aligned+0x12>
 800b320:	f000 f8bc 	bl	800b49c <_sbrk_r>
 800b324:	6030      	str	r0, [r6, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f8b7 	bl	800b49c <_sbrk_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d00a      	beq.n	800b348 <sbrk_aligned+0x34>
 800b332:	1cc4      	adds	r4, r0, #3
 800b334:	f024 0403 	bic.w	r4, r4, #3
 800b338:	42a0      	cmp	r0, r4
 800b33a:	d007      	beq.n	800b34c <sbrk_aligned+0x38>
 800b33c:	1a21      	subs	r1, r4, r0
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f8ac 	bl	800b49c <_sbrk_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d101      	bne.n	800b34c <sbrk_aligned+0x38>
 800b348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	20000cf4 	.word	0x20000cf4

0800b354 <_malloc_r>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	1ccd      	adds	r5, r1, #3
 800b35a:	f025 0503 	bic.w	r5, r5, #3
 800b35e:	3508      	adds	r5, #8
 800b360:	2d0c      	cmp	r5, #12
 800b362:	bf38      	it	cc
 800b364:	250c      	movcc	r5, #12
 800b366:	2d00      	cmp	r5, #0
 800b368:	4607      	mov	r7, r0
 800b36a:	db01      	blt.n	800b370 <_malloc_r+0x1c>
 800b36c:	42a9      	cmp	r1, r5
 800b36e:	d905      	bls.n	800b37c <_malloc_r+0x28>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	2600      	movs	r6, #0
 800b376:	4630      	mov	r0, r6
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	4e2e      	ldr	r6, [pc, #184]	; (800b438 <_malloc_r+0xe4>)
 800b37e:	f000 f89d 	bl	800b4bc <__malloc_lock>
 800b382:	6833      	ldr	r3, [r6, #0]
 800b384:	461c      	mov	r4, r3
 800b386:	bb34      	cbnz	r4, 800b3d6 <_malloc_r+0x82>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	f7ff ffc2 	bl	800b314 <sbrk_aligned>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	4604      	mov	r4, r0
 800b394:	d14d      	bne.n	800b432 <_malloc_r+0xde>
 800b396:	6834      	ldr	r4, [r6, #0]
 800b398:	4626      	mov	r6, r4
 800b39a:	2e00      	cmp	r6, #0
 800b39c:	d140      	bne.n	800b420 <_malloc_r+0xcc>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	eb04 0803 	add.w	r8, r4, r3
 800b3a8:	f000 f878 	bl	800b49c <_sbrk_r>
 800b3ac:	4580      	cmp	r8, r0
 800b3ae:	d13a      	bne.n	800b426 <_malloc_r+0xd2>
 800b3b0:	6821      	ldr	r1, [r4, #0]
 800b3b2:	3503      	adds	r5, #3
 800b3b4:	1a6d      	subs	r5, r5, r1
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff ffa5 	bl	800b314 <sbrk_aligned>
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d02b      	beq.n	800b426 <_malloc_r+0xd2>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	442b      	add	r3, r5
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	e00e      	b.n	800b3f4 <_malloc_r+0xa0>
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	1b52      	subs	r2, r2, r5
 800b3da:	d41e      	bmi.n	800b41a <_malloc_r+0xc6>
 800b3dc:	2a0b      	cmp	r2, #11
 800b3de:	d916      	bls.n	800b40e <_malloc_r+0xba>
 800b3e0:	1961      	adds	r1, r4, r5
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	6025      	str	r5, [r4, #0]
 800b3e6:	bf18      	it	ne
 800b3e8:	6059      	strne	r1, [r3, #4]
 800b3ea:	6863      	ldr	r3, [r4, #4]
 800b3ec:	bf08      	it	eq
 800b3ee:	6031      	streq	r1, [r6, #0]
 800b3f0:	5162      	str	r2, [r4, r5]
 800b3f2:	604b      	str	r3, [r1, #4]
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f104 060b 	add.w	r6, r4, #11
 800b3fa:	f000 f865 	bl	800b4c8 <__malloc_unlock>
 800b3fe:	f026 0607 	bic.w	r6, r6, #7
 800b402:	1d23      	adds	r3, r4, #4
 800b404:	1af2      	subs	r2, r6, r3
 800b406:	d0b6      	beq.n	800b376 <_malloc_r+0x22>
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	50a3      	str	r3, [r4, r2]
 800b40c:	e7b3      	b.n	800b376 <_malloc_r+0x22>
 800b40e:	6862      	ldr	r2, [r4, #4]
 800b410:	42a3      	cmp	r3, r4
 800b412:	bf0c      	ite	eq
 800b414:	6032      	streq	r2, [r6, #0]
 800b416:	605a      	strne	r2, [r3, #4]
 800b418:	e7ec      	b.n	800b3f4 <_malloc_r+0xa0>
 800b41a:	4623      	mov	r3, r4
 800b41c:	6864      	ldr	r4, [r4, #4]
 800b41e:	e7b2      	b.n	800b386 <_malloc_r+0x32>
 800b420:	4634      	mov	r4, r6
 800b422:	6876      	ldr	r6, [r6, #4]
 800b424:	e7b9      	b.n	800b39a <_malloc_r+0x46>
 800b426:	230c      	movs	r3, #12
 800b428:	603b      	str	r3, [r7, #0]
 800b42a:	4638      	mov	r0, r7
 800b42c:	f000 f84c 	bl	800b4c8 <__malloc_unlock>
 800b430:	e7a1      	b.n	800b376 <_malloc_r+0x22>
 800b432:	6025      	str	r5, [r4, #0]
 800b434:	e7de      	b.n	800b3f4 <_malloc_r+0xa0>
 800b436:	bf00      	nop
 800b438:	20000cf0 	.word	0x20000cf0

0800b43c <_realloc_r>:
 800b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b440:	4680      	mov	r8, r0
 800b442:	4614      	mov	r4, r2
 800b444:	460e      	mov	r6, r1
 800b446:	b921      	cbnz	r1, 800b452 <_realloc_r+0x16>
 800b448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b44c:	4611      	mov	r1, r2
 800b44e:	f7ff bf81 	b.w	800b354 <_malloc_r>
 800b452:	b92a      	cbnz	r2, 800b460 <_realloc_r+0x24>
 800b454:	f7ff ff12 	bl	800b27c <_free_r>
 800b458:	4625      	mov	r5, r4
 800b45a:	4628      	mov	r0, r5
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	f000 f838 	bl	800b4d4 <_malloc_usable_size_r>
 800b464:	4284      	cmp	r4, r0
 800b466:	4607      	mov	r7, r0
 800b468:	d802      	bhi.n	800b470 <_realloc_r+0x34>
 800b46a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b46e:	d812      	bhi.n	800b496 <_realloc_r+0x5a>
 800b470:	4621      	mov	r1, r4
 800b472:	4640      	mov	r0, r8
 800b474:	f7ff ff6e 	bl	800b354 <_malloc_r>
 800b478:	4605      	mov	r5, r0
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d0ed      	beq.n	800b45a <_realloc_r+0x1e>
 800b47e:	42bc      	cmp	r4, r7
 800b480:	4622      	mov	r2, r4
 800b482:	4631      	mov	r1, r6
 800b484:	bf28      	it	cs
 800b486:	463a      	movcs	r2, r7
 800b488:	f7ff fed0 	bl	800b22c <memcpy>
 800b48c:	4631      	mov	r1, r6
 800b48e:	4640      	mov	r0, r8
 800b490:	f7ff fef4 	bl	800b27c <_free_r>
 800b494:	e7e1      	b.n	800b45a <_realloc_r+0x1e>
 800b496:	4635      	mov	r5, r6
 800b498:	e7df      	b.n	800b45a <_realloc_r+0x1e>
	...

0800b49c <_sbrk_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d06      	ldr	r5, [pc, #24]	; (800b4b8 <_sbrk_r+0x1c>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	602b      	str	r3, [r5, #0]
 800b4a8:	f7f7 ff62 	bl	8003370 <_sbrk>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_sbrk_r+0x1a>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_sbrk_r+0x1a>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20000cf8 	.word	0x20000cf8

0800b4bc <__malloc_lock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__malloc_lock+0x8>)
 800b4be:	f000 b811 	b.w	800b4e4 <__retarget_lock_acquire_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20000cfc 	.word	0x20000cfc

0800b4c8 <__malloc_unlock>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__malloc_unlock+0x8>)
 800b4ca:	f000 b80c 	b.w	800b4e6 <__retarget_lock_release_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	20000cfc 	.word	0x20000cfc

0800b4d4 <_malloc_usable_size_r>:
 800b4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d8:	1f18      	subs	r0, r3, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfbc      	itt	lt
 800b4de:	580b      	ldrlt	r3, [r1, r0]
 800b4e0:	18c0      	addlt	r0, r0, r3
 800b4e2:	4770      	bx	lr

0800b4e4 <__retarget_lock_acquire_recursive>:
 800b4e4:	4770      	bx	lr

0800b4e6 <__retarget_lock_release_recursive>:
 800b4e6:	4770      	bx	lr

0800b4e8 <_init>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr

0800b4f4 <_fini>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	bf00      	nop
 800b4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fa:	bc08      	pop	{r3}
 800b4fc:	469e      	mov	lr, r3
 800b4fe:	4770      	bx	lr
