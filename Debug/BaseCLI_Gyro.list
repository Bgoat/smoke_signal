
BaseCLI_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a62c  0800a62c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a634  0800a634  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800a63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200000dc  0800a718  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800a718  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de9a  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b8a  00000000  00000000  0003dfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00042b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  000445d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfe7  00000000  00000000  00045e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224fc  00000000  00000000  00061e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6bb  00000000  00000000  00084363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e8  00000000  00000000  00121a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0c0 	.word	0x0800a0c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	0800a0c0 	.word	0x0800a0c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	440b      	add	r3, r1
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d114      	bne.n	8000db0 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
		i++;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 8000d90:	e00e      	b.n	8000db0 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	440b      	add	r3, r1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d001      	beq.n	8000daa <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d11a      	bne.n	8000dec <ConsoleCommandMatch+0x8c>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d817      	bhi.n	8000dec <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000dc4:	2b20      	cmp	r3, #32
 8000dc6:	d011      	beq.n	8000dec <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000dd0:	2b0a      	cmp	r3, #10
 8000dd2:	d00b      	beq.n	8000dec <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b0d      	cmp	r3, #13
 8000dde:	d005      	beq.n	8000dec <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1d2      	bne.n	8000d92 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000dec:	68bb      	ldr	r3, [r7, #8]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b087      	sub	sp, #28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000e12:	e00d      	b.n	8000e30 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	441a      	add	r2, r3
 8000e1a:	68f9      	ldr	r1, [r7, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	440b      	add	r3, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	701a      	strb	r2, [r3, #0]
		i++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3ed      	bcc.n	8000e14 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000e38:	e007      	b.n	8000e4a <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4413      	add	r3, r2
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d9f4      	bls.n	8000e3a <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000e50:	693b      	ldr	r3, [r7, #16]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e70:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000e72:	e002      	b.n	8000e7a <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b0d      	cmp	r3, #13
 8000e84:	d009      	beq.n	8000e9a <ConsoleCommandEndline+0x3c>
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d003      	beq.n	8000e9a <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3ec      	bcc.n	8000e74 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d201      	bcs.n	8000ea6 <ConsoleCommandEndline+0x48>
	{
		result = i;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000eba:	f000 fcdd 	bl	8001878 <ConsoleIoInit>
	ConsoleIoSendString("Welcome your gateway to testing code and hardware.");
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <ConsoleInit+0x48>)
 8000ec0:	f000 fd0e 	bl	80018e0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ec4:	480e      	ldr	r0, [pc, #56]	; (8000f00 <ConsoleInit+0x4c>)
 8000ec6:	f000 fd0b 	bl	80018e0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <ConsoleInit+0x50>)
 8000ecc:	f000 fd08 	bl	80018e0 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <ConsoleInit+0x54>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e007      	b.n	8000eec <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <ConsoleInit+0x58>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d9f4      	bls.n	8000edc <ConsoleInit+0x28>
	}

}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0800a0d8 	.word	0x0800a0d8
 8000f00:	0800a10c 	.word	0x0800a10c
 8000f04:	0800a110 	.word	0x0800a110
 8000f08:	200001f8 	.word	0x200001f8
 8000f0c:	200000f8 	.word	0x200000f8

08000f10 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <ConsoleProcess+0x158>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a54      	ldr	r2, [pc, #336]	; (800106c <ConsoleProcess+0x15c>)
 8000f1c:	1898      	adds	r0, r3, r2
 8000f1e:	4b52      	ldr	r3, [pc, #328]	; (8001068 <ConsoleProcess+0x158>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f26:	463a      	mov	r2, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f000 fcad 	bl	8001888 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <ConsoleProcess+0x2e>
 8000f34:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <ConsoleProcess+0x160>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8091 	beq.w	8001060 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <ConsoleProcess+0x160>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000f44:	4b48      	ldr	r3, [pc, #288]	; (8001068 <ConsoleProcess+0x158>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <ConsoleProcess+0x158>)
 8000f4e:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <ConsoleProcess+0x158>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	; (800106c <ConsoleProcess+0x15c>)
 8000f58:	f7ff ff81 	bl	8000e5e <ConsoleCommandEndline>
 8000f5c:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db7d      	blt.n	8001060 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000f64:	f000 fc7e 	bl	8001864 <ConsoleCommandsGetTable>
 8000f68:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f72:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000f74:	e03d      	b.n	8000ff2 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4938      	ldr	r1, [pc, #224]	; (800106c <ConsoleProcess+0x15c>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fee8 	bl	8000d60 <ConsoleCommandMatch>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d02a      	beq.n	8000fec <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4830      	ldr	r0, [pc, #192]	; (800106c <ConsoleProcess+0x15c>)
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d017      	beq.n	8000fe6 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000fb6:	482f      	ldr	r0, [pc, #188]	; (8001074 <ConsoleProcess+0x164>)
 8000fb8:	f000 fc92 	bl	80018e0 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <ConsoleProcess+0x15c>)
 8000fbe:	f000 fc8f 	bl	80018e0 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8000fc2:	482d      	ldr	r0, [pc, #180]	; (8001078 <ConsoleProcess+0x168>)
 8000fc4:	f000 fc8c 	bl	80018e0 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3308      	adds	r3, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fc80 	bl	80018e0 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000fe0:	4826      	ldr	r0, [pc, #152]	; (800107c <ConsoleProcess+0x16c>)
 8000fe2:	f000 fc7d 	bl	80018e0 <ConsoleIoSendString>

					}
					found = cmdIndex;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e002      	b.n	8000ff2 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <ConsoleProcess+0x100>
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800100e:	d0b2      	beq.n	8000f76 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00d      	beq.n	8001032 <ConsoleProcess+0x122>
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d109      	bne.n	8001032 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <ConsoleProcess+0x158>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d905      	bls.n	8001032 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 8001026:	4816      	ldr	r0, [pc, #88]	; (8001080 <ConsoleProcess+0x170>)
 8001028:	f000 fc5a 	bl	80018e0 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <ConsoleProcess+0x16c>)
 800102e:	f000 fc57 	bl	80018e0 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <ConsoleProcess+0x158>)
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	461a      	mov	r2, r3
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <ConsoleProcess+0x15c>)
 800103e:	f7ff fedc 	bl	8000dfa <ConsoleResetBuffer>
 8001042:	4603      	mov	r3, r0
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <ConsoleProcess+0x158>)
 8001046:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <ConsoleProcess+0x158>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <ConsoleProcess+0x160>)
 8001058:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <ConsoleProcess+0x174>)
 800105c:	f000 fc40 	bl	80018e0 <ConsoleIoSendString>
		}
	}
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001f8 	.word	0x200001f8
 800106c:	200000f8 	.word	0x200000f8
 8001070:	200001fc 	.word	0x200001fc
 8001074:	0800a114 	.word	0x0800a114
 8001078:	0800a11c 	.word	0x0800a11c
 800107c:	0800a10c 	.word	0x0800a10c
 8001080:	0800a124 	.word	0x0800a124
 8001084:	0800a110 	.word	0x0800a110

08001088 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	460b      	mov	r3, r1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80010a2:	e00b      	b.n	80010bc <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d102      	bne.n	80010b6 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d002      	beq.n	80010ca <ConsoleParamFindN+0x42>
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d9ec      	bls.n	80010a4 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d102      	bne.n	80010d8 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80010d2:	2310      	movs	r3, #16
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	e002      	b.n	80010de <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	601a      	str	r2, [r3, #0]
	}
	return result;
 80010de:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	460b      	mov	r3, r1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80010fe:	f107 021c 	add.w	r2, r7, #28
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	4619      	mov	r1, r3
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff ffbe 	bl	8001088 <ConsoleParamFindN>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	4413      	add	r3, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8001126:	e011      	b.n	800114c <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001128:	f107 0214 	add.w	r2, r7, #20
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	4413      	add	r3, r2
 8001130:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001134:	701a      	strb	r2, [r3, #0]
		i++;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	3301      	adds	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	4413      	add	r3, r2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800114c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d00a      	beq.n	800116a <ConsoleReceiveParamInt16+0x7e>
 8001154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001158:	2b0d      	cmp	r3, #13
 800115a:	d006      	beq.n	800116a <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 800115c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001160:	2b20      	cmp	r3, #32
 8001162:	d002      	beq.n	800116a <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	2b07      	cmp	r3, #7
 8001168:	d9de      	bls.n	8001128 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	2b08      	cmp	r3, #8
 800116e:	d102      	bne.n	8001176 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001170:	2310      	movs	r3, #16
 8001172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10e      	bne.n	800119c <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800117e:	f107 0214 	add.w	r2, r7, #20
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f008 fa66 	bl	8009660 <atoi>
 8001194:	4603      	mov	r3, r0
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800119c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	460b      	mov	r3, r1
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80011be:	f107 0218 	add.w	r2, r7, #24
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	4619      	mov	r1, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ff5e 	bl	8001088 <ConsoleParamFindN>
 80011cc:	4603      	mov	r3, r0
 80011ce:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d12c      	bne.n	8001230 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	e01e      	b.n	800121a <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	4413      	add	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f107 0217 	add.w	r2, r7, #23
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f8e1 	bl	80013bc <ConsoleUtilHexCharToInt>
 80011fa:	4603      	mov	r3, r0
 80011fc:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8001204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	b29a      	uxth	r2, r3
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001210:	4413      	add	r3, r2
 8001212:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	3301      	adds	r3, #1
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d9dd      	bls.n	80011dc <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	2b11      	cmp	r3, #17
 8001224:	d101      	bne.n	800122a <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001226:	2300      	movs	r3, #0
 8001228:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800122e:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8001230:	7ffb      	ldrb	r3, [r7, #31]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8001244:	2300      	movs	r3, #0
 8001246:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e01b      	b.n	8001286 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d115      	bne.n	8001280 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f1c3 0303 	rsb	r3, r3, #3
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fa42 f303 	asr.w	r3, r2, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	441a      	add	r2, r3
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8e1 	bl	800143e <ConsoleUtilsIntToHexChar>
 800127c:	4603      	mov	r3, r0
 800127e:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d9e0      	bls.n	800124e <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 800128c:	f107 020c 	add.w	r2, r7, #12
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fb1f 	bl	80018e0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da07      	bge.n	80012d6 <smallItoa+0x2a>
		isNegative = true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
		in = -in;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	425b      	negs	r3, r3
 80012ce:	60fb      	str	r3, [r7, #12]
		stringLen++;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 80012da:	e007      	b.n	80012ec <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	61bb      	str	r3, [r7, #24]
		stringLen++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f1      	bne.n	80012dc <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3b01      	subs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	fb93 f2f2 	sdiv	r2, r3, r2
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	fb01 f202 	mul.w	r2, r1, r2
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	b2da      	uxtb	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	440b      	add	r3, r1
 8001324:	3230      	adds	r2, #48	; 0x30
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001332:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1e5a      	subs	r2, r3, #1
 8001338:	617a      	str	r2, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1e6      	bne.n	800130c <smallItoa+0x60>

	if (isNegative) {
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <smallItoa+0x9e>
		*(outBuffer) = '-';
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	222d      	movs	r2, #45	; 0x2d
 8001348:	701a      	strb	r2, [r3, #0]
	}
}
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	f107 0108 	add.w	r1, r7, #8
 8001368:	220a      	movs	r2, #10
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff9e 	bl	80012ac <smallItoa>
	ConsoleIoSendString(out);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fab3 	bl	80018e0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <ConsoleSendParamInt32>:

// ConsoleSendParamInt32
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt32(int32_t parameterInt)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	char out[INT32_MAX_STR_LENGTH];
	memset(out, 0, sizeof(out));
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2210      	movs	r2, #16
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f008 f991 	bl	80096bc <memset>

	itoa (parameterInt, out, 10);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	220a      	movs	r2, #10
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff82 	bl	80012ac <smallItoa>
	ConsoleIoSendString(out);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fa97 	bl	80018e0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ConsoleUtilHexCharToInt>:
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b2f      	cmp	r3, #47	; 0x2f
 80013d0:	d908      	bls.n	80013e4 <ConsoleUtilHexCharToInt+0x28>
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b39      	cmp	r3, #57	; 0x39
 80013d6:	d805      	bhi.n	80013e4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3b30      	subs	r3, #48	; 0x30
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e025      	b.n	8001430 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b40      	cmp	r3, #64	; 0x40
 80013e8:	d908      	bls.n	80013fc <ConsoleUtilHexCharToInt+0x40>
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b46      	cmp	r3, #70	; 0x46
 80013ee:	d805      	bhi.n	80013fc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	3b37      	subs	r3, #55	; 0x37
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e019      	b.n	8001430 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b60      	cmp	r3, #96	; 0x60
 8001400:	d908      	bls.n	8001414 <ConsoleUtilHexCharToInt+0x58>
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b66      	cmp	r3, #102	; 0x66
 8001406:	d805      	bhi.n	8001414 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	3b57      	subs	r3, #87	; 0x57
 800140c:	b2da      	uxtb	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e00d      	b.n	8001430 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d105      	bne.n	8001426 <ConsoleUtilHexCharToInt+0x6a>
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	d102      	bne.n	8001426 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b20      	cmp	r3, #32
 8001424:	d102      	bne.n	800142c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8001426:	2311      	movs	r3, #17
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e001      	b.n	8001430 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 800142c:	2310      	movs	r3, #16
 800142e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	6039      	str	r1, [r7, #0]
 8001448:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b09      	cmp	r3, #9
 8001452:	d805      	bhi.n	8001460 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	b2da      	uxtb	r2, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	e00d      	b.n	800147c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b09      	cmp	r3, #9
 8001464:	d908      	bls.n	8001478 <ConsoleUtilsIntToHexChar+0x3a>
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d805      	bhi.n	8001478 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	3337      	adds	r3, #55	; 0x37
 8001470:	b2da      	uxtb	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e001      	b.n	800147c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001478:	2310      	movs	r3, #16
 800147a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80014a8:	2300      	movs	r3, #0
 80014aa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80014ac:	230a      	movs	r3, #10
 80014ae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e01e      	b.n	80014f4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80014b6:	4914      	ldr	r1, [pc, #80]	; (8001508 <ConsoleCommandHelp+0x68>)
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fa0a 	bl	80018e0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <ConsoleCommandHelp+0x6c>)
 80014ce:	f000 fa07 	bl	80018e0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	3308      	adds	r3, #8
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <ConsoleCommandHelp+0x68>)
 80014e0:	4413      	add	r3, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f9fc 	bl	80018e0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <ConsoleCommandHelp+0x70>)
 80014ea:	f000 f9f9 	bl	80018e0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3db      	bcc.n	80014b6 <ConsoleCommandHelp+0x16>
	}
	return result;
 80014fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800a210 	.word	0x0800a210
 800150c:	0800a174 	.word	0x0800a174
 8001510:	0800a178 	.word	0x0800a178

08001514 <ConsoleCommandAccel>:
static eCommandResult_T ConsoleCommandAccel(const char buffer[])
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_ACCELERO_GetXYZ(&data_xyz);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fa5d 	bl	80039e0 <BSP_ACCELERO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11d      	bne.n	800156c <ConsoleCommandAccel+0x58>
	{
		ConsoleIoSendString("X is ");
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <ConsoleCommandAccel+0x64>)
 8001532:	f000 f9d5 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8001536:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff0b 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <ConsoleCommandAccel+0x68>)
 8001542:	f000 f9cd 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8001546:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff03 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <ConsoleCommandAccel+0x6c>)
 8001552:	f000 f9c5 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8001556:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fefb 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <ConsoleCommandAccel+0x70>)
 8001562:	f000 f9bd 	bl	80018e0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <ConsoleCommandAccel+0x74>)
 8001568:	f000 f9ba 	bl	80018e0 <ConsoleIoSendString>
	}
	return result;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	0800a17c 	.word	0x0800a17c
 800157c:	0800a184 	.word	0x0800a184
 8001580:	0800a18c 	.word	0x0800a18c
 8001584:	0800a194 	.word	0x0800a194
 8001588:	0800a178 	.word	0x0800a178

0800158c <ConsoleCommandGyro>:
static eCommandResult_T ConsoleCommandGyro(const char buffer[])
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_GYRO_GetXYZ(&data_xyz);
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fa9f 	bl	8003adc <BSP_GYRO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11d      	bne.n	80015e4 <ConsoleCommandGyro+0x58>
	{
		ConsoleIoSendString("X is ");
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <ConsoleCommandGyro+0x64>)
 80015aa:	f000 f999 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 80015ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fecf 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <ConsoleCommandGyro+0x68>)
 80015ba:	f000 f991 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 80015be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fec7 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <ConsoleCommandGyro+0x6c>)
 80015ca:	f000 f989 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 80015ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff febf 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <ConsoleCommandGyro+0x70>)
 80015da:	f000 f981 	bl	80018e0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <ConsoleCommandGyro+0x74>)
 80015e0:	f000 f97e 	bl	80018e0 <ConsoleIoSendString>
	}
	return result;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	0800a17c 	.word	0x0800a17c
 80015f4:	0800a184 	.word	0x0800a184
 80015f8:	0800a18c 	.word	0x0800a18c
 80015fc:	0800a194 	.word	0x0800a194
 8001600:	0800a178 	.word	0x0800a178

08001604 <ConsoleCommandFlashRW>:
static eCommandResult_T ConsoleCommandFlashRW(const char buffer[])
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	#define FLASH_FREE_LOCATION 0x08020000
	//read first to make sure we are good
	uint64_t *RDAddr = (uint64_t *) FLASH_FREE_LOCATION;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <ConsoleCommandFlashRW+0x100>)
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t RData = *RDAddr;
 8001610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint32_t Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 800161e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	000a      	movs	r2, r1
 800162c:	2300      	movs	r3, #0
 800162e:	4613      	mov	r3, r2
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is ");
 8001632:	4835      	ldr	r0, [pc, #212]	; (8001708 <ConsoleCommandFlashRW+0x104>)
 8001634:	f000 f954 	bl	80018e0 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fea2 	bl	8001384 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe9e 	bl	8001384 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8001648:	4830      	ldr	r0, [pc, #192]	; (800170c <ConsoleCommandFlashRW+0x108>)
 800164a:	f000 f949 	bl	80018e0 <ConsoleIoSendString>


 	HAL_FLASH_Unlock();
 800164e:	f002 fce7 	bl	8004020 <HAL_FLASH_Unlock>
 	//HAL_FLASH_OB_Unlock();
 	// Erase
 	//Instantiate the FLASH_EraseInitTypeDef struct needed for the HAL_FLASHEx_Erase() function
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  //Erase type set to sectors
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
	FLASH_EraseInitStruct.Sector = 5;            				//sector 0x0800 C000
 8001666:	2305      	movs	r3, #5
 8001668:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbSectors = 1;                        //The number of sectors
 800166a:	2301      	movs	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]

	uint32_t  errorStatus = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 8001676:	f107 020c 	add.w	r2, r7, #12
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fe3f 	bl	8004304 <HAL_FLASHEx_Erase>
	HAL_Delay(10);
 8001686:	200a      	movs	r0, #10
 8001688:	f002 faae 	bl	8003be8 <HAL_Delay>

 	uint8_t FData = 0xAA;
 800168c:	23aa      	movs	r3, #170	; 0xaa
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	// FLASH->CR &= (FLASH_CR_PG);

 	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,0x08020000, FData);
 8001692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001696:	2200      	movs	r2, #0
 8001698:	461c      	mov	r4, r3
 800169a:	4615      	mov	r5, r2
 800169c:	4622      	mov	r2, r4
 800169e:	462b      	mov	r3, r5
 80016a0:	4918      	ldr	r1, [pc, #96]	; (8001704 <ConsoleCommandFlashRW+0x100>)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f002 fc68 	bl	8003f78 <HAL_FLASH_Program>
 	HAL_Delay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f002 fa9d 	bl	8003be8 <HAL_Delay>
 	HAL_FLASH_Lock();
 80016ae:	f002 fcd9 	bl	8004064 <HAL_FLASH_Lock>

 	RData = *RDAddr;
 80016b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 80016bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
	Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 80016c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	000a      	movs	r2, r1
 80016ce:	2300      	movs	r3, #0
 80016d0:	4613      	mov	r3, r2
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is now ");
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <ConsoleCommandFlashRW+0x10c>)
 80016d6:	f000 f903 	bl	80018e0 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe51 	bl	8001384 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe4d 	bl	8001384 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <ConsoleCommandFlashRW+0x108>)
 80016ec:	f000 f8f8 	bl	80018e0 <ConsoleIoSendString>
 	eCommandResult_T result = COMMAND_SUCCESS;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	return result;
 80016f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3740      	adds	r7, #64	; 0x40
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}
 8001702:	bf00      	nop
 8001704:	08020000 	.word	0x08020000
 8001708:	0800a198 	.word	0x0800a198
 800170c:	0800a178 	.word	0x0800a178
 8001710:	0800a1a4 	.word	0x0800a1a4

08001714 <ConsoleCommandSonar>:

static eCommandResult_T ConsoleCommandSonar(const char buffer[])
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint8_t Distance = 200;
 800171c:	23c8      	movs	r3, #200	; 0xc8
 800171e:	73fb      	strb	r3, [r7, #15]
	ConsoleIoSendString("Distance is ");
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <ConsoleCommandSonar+0x64>)
 8001722:	f000 f8dd 	bl	80018e0 <ConsoleIoSendString>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <ConsoleCommandSonar+0x68>)
 800172e:	f003 f98b 	bl	8004a48 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8001732:	200a      	movs	r0, #10
 8001734:	f000 ff44 	bl	80025c0 <delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	480f      	ldr	r0, [pc, #60]	; (800177c <ConsoleCommandSonar+0x68>)
 8001740:	f003 f982 	bl	8004a48 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <ConsoleCommandSonar+0x6c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <ConsoleCommandSonar+0x6c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0202 	orr.w	r2, r2, #2
 8001752:	60da      	str	r2, [r3, #12]
	HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f002 fa47 	bl	8003be8 <HAL_Delay>
	ConsoleSendParamInt16(Distance);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fdf9 	bl	8001356 <ConsoleSendParamInt16>
	ConsoleIoSendString(STR_ENDLINE);
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <ConsoleCommandSonar+0x70>)
 8001766:	f000 f8bb 	bl	80018e0 <ConsoleIoSendString>

 	eCommandResult_T result = COMMAND_SUCCESS;
 800176a:	2300      	movs	r3, #0
 800176c:	73bb      	strb	r3, [r7, #14]

	return result;
 800176e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800a1b4 	.word	0x0800a1b4
 800177c:	40021000 	.word	0x40021000
 8001780:	200003f8 	.word	0x200003f8
 8001784:	0800a178 	.word	0x0800a178

08001788 <ConsoleCommandParamExampleInt16>:



static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	461a      	mov	r2, r3
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fca7 	bl	80010ec <ConsoleReceiveParamInt16>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d116      	bne.n	80017d6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <ConsoleCommandParamExampleInt16+0x58>)
 80017aa:	f000 f899 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 80017ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fdcf 	bl	8001356 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <ConsoleCommandParamExampleInt16+0x5c>)
 80017ba:	f000 f891 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 80017be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd38 	bl	800123a <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <ConsoleCommandParamExampleInt16+0x60>)
 80017cc:	f000 f888 	bl	80018e0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <ConsoleCommandParamExampleInt16+0x64>)
 80017d2:	f000 f885 	bl	80018e0 <ConsoleIoSendString>
	}
	return result;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800a1c4 	.word	0x0800a1c4
 80017e4:	0800a1d4 	.word	0x0800a1d4
 80017e8:	0800a1dc 	.word	0x0800a1dc
 80017ec:	0800a178 	.word	0x0800a178

080017f0 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	461a      	mov	r2, r3
 80017fe:	2101      	movs	r1, #1
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fcd1 	bl	80011a8 <ConsoleReceiveParamHexUint16>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <ConsoleCommandParamExampleHexUint16+0x40>)
 8001812:	f000 f865 	bl	80018e0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8001816:	89bb      	ldrh	r3, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fd0e 	bl	800123a <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <ConsoleCommandParamExampleHexUint16+0x44>)
 8001820:	f000 f85e 	bl	80018e0 <ConsoleIoSendString>
	}
	return result;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0800a1e0 	.word	0x0800a1e0
 8001834:	0800a178 	.word	0x0800a178

08001838 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <ConsoleCommandVer+0x24>)
 8001846:	f000 f84b 	bl	80018e0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <ConsoleCommandVer+0x28>)
 800184c:	f000 f848 	bl	80018e0 <ConsoleIoSendString>
	return result;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800a1f0 	.word	0x0800a1f0
 8001860:	0800a178 	.word	0x0800a178

08001864 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <ConsoleCommandsGetTable+0x10>)
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	0800a210 	.word	0x0800a210

08001878 <ConsoleIoInit>:

#include "consoleIo.h"
#include <stdio.h>

eConsoleError ConsoleIoInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]

	// ------- modified ----------
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) {
 8001894:	2300      	movs	r3, #0
 8001896:	82fb      	strh	r3, [r7, #22]
 8001898:	e010      	b.n	80018bc <ConsoleIoReceive+0x34>
		if(uart_buf.buf[i] == 0) break;
 800189a:	8afb      	ldrh	r3, [r7, #22]
 800189c:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <ConsoleIoReceive+0x54>)
 800189e:	4413      	add	r3, r2
 80018a0:	789b      	ldrb	r3, [r3, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00e      	beq.n	80018c4 <ConsoleIoReceive+0x3c>
		buffer[i] = (uint8_t)uart_buf.buf[i];
 80018a6:	8afa      	ldrh	r2, [r7, #22]
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	68f9      	ldr	r1, [r7, #12]
 80018ac:	440b      	add	r3, r1
 80018ae:	490b      	ldr	r1, [pc, #44]	; (80018dc <ConsoleIoReceive+0x54>)
 80018b0:	440a      	add	r2, r1
 80018b2:	7892      	ldrb	r2, [r2, #2]
 80018b4:	701a      	strb	r2, [r3, #0]
	for(i=0; i<BUF_SIZE; i++) {
 80018b6:	8afb      	ldrh	r3, [r7, #22]
 80018b8:	3301      	adds	r3, #1
 80018ba:	82fb      	strh	r3, [r7, #22]
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	2b7f      	cmp	r3, #127	; 0x7f
 80018c0:	d9eb      	bls.n	800189a <ConsoleIoReceive+0x12>
 80018c2:	e000      	b.n	80018c6 <ConsoleIoReceive+0x3e>
		if(uart_buf.buf[i] == 0) break;
 80018c4:	bf00      	nop
	}
	// -----------------

	*readLength = i;
 80018c6:	8afa      	ldrh	r2, [r7, #22]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
	//		i++;
	//	}
	//	*readLength = i;
	// ---

	return CONSOLE_SUCCESS;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002e8 	.word	0x200002e8

080018e0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

	// --------- modified ---------

	// count the size (sizeof didn't work for me, so manually counting)
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 80018e8:	2300      	movs	r3, #0
 80018ea:	81fb      	strh	r3, [r7, #14]
 80018ec:	e008      	b.n	8001900 <ConsoleIoSendString+0x20>
		if(buffer[i] == '\0') break;
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <ConsoleIoSendString+0x28>
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	81fb      	strh	r3, [r7, #14]
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d9f3      	bls.n	80018ee <ConsoleIoSendString+0xe>
 8001906:	e000      	b.n	800190a <ConsoleIoSendString+0x2a>
		if(buffer[i] == '\0') break;
 8001908:	bf00      	nop
	}

	// send it
	uint16_t the_size = i;
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buffer, the_size, HAL_MAX_DELAY); // TODO: resolve this warning
 800190e:	89ba      	ldrh	r2, [r7, #12]
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <ConsoleIoSendString+0x48>)
 8001918:	f006 fe77 	bl	800860a <HAL_UART_Transmit>
	// ---------------------------

	return CONSOLE_SUCCESS;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200004d0 	.word	0x200004d0

0800192c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	4b74      	ldr	r3, [pc, #464]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a73      	ldr	r2, [pc, #460]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a6c      	ldr	r2, [pc, #432]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a65      	ldr	r2, [pc, #404]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 8001984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a5e      	ldr	r2, [pc, #376]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <MX_GPIO_Init+0x1ec>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2108      	movs	r1, #8
 80019ee:	484b      	ldr	r0, [pc, #300]	; (8001b1c <MX_GPIO_Init+0x1f0>)
 80019f0:	f003 f82a 	bl	8004a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2101      	movs	r1, #1
 80019f8:	4849      	ldr	r0, [pc, #292]	; (8001b20 <MX_GPIO_Init+0x1f4>)
 80019fa:	f003 f825 	bl	8004a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80019fe:	2200      	movs	r2, #0
 8001a00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001a04:	4847      	ldr	r0, [pc, #284]	; (8001b24 <MX_GPIO_Init+0x1f8>)
 8001a06:	f003 f81f 	bl	8004a48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	483f      	ldr	r0, [pc, #252]	; (8001b1c <MX_GPIO_Init+0x1f0>)
 8001a1e:	f002 fd93 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a22:	2308      	movs	r3, #8
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4838      	ldr	r0, [pc, #224]	; (8001b1c <MX_GPIO_Init+0x1f0>)
 8001a3a:	f002 fd85 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001a3e:	2332      	movs	r3, #50	; 0x32
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4832      	ldr	r0, [pc, #200]	; (8001b1c <MX_GPIO_Init+0x1f0>)
 8001a54:	f002 fd78 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	482c      	ldr	r0, [pc, #176]	; (8001b20 <MX_GPIO_Init+0x1f4>)
 8001a70:	f002 fd6a 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4827      	ldr	r0, [pc, #156]	; (8001b28 <MX_GPIO_Init+0x1fc>)
 8001a8a:	f002 fd5d 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a8e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481f      	ldr	r0, [pc, #124]	; (8001b24 <MX_GPIO_Init+0x1f8>)
 8001aa8:	f002 fd4e 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <MX_GPIO_Init+0x1fc>)
 8001ac2:	f002 fd41 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001ac6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ad8:	230a      	movs	r3, #10
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4811      	ldr	r0, [pc, #68]	; (8001b28 <MX_GPIO_Init+0x1fc>)
 8001ae4:	f002 fd30 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <MX_GPIO_Init+0x1f8>)
 8001afc:	f002 fd24 	bl	8004548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2006      	movs	r0, #6
 8001b06:	f002 f96e 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0a:	2006      	movs	r0, #6
 8001b0c:	f002 f987 	bl	8003e1e <HAL_NVIC_EnableIRQ>

}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40020000 	.word	0x40020000

08001b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f002 ff9f 	bl	8004aac <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 fd7c 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000200 	.word	0x20000200
 8001b80:	40005400 	.word	0x40005400
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001bc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be4:	f002 fcb0 	bl	8004548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_I2C_MspDeInit+0x38>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10e      	bne.n	8001c48 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_I2C_MspDeInit+0x3c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_I2C_MspDeInit+0x3c>)
 8001c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <HAL_I2C_MspDeInit+0x40>)
 8001c3a:	f002 fe09 	bl	8004850 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_I2C_MspDeInit+0x40>)
 8001c44:	f002 fe04 	bl	8004850 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400

08001c5c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <MX_I2S2_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <MX_I2S2_Init+0x58>)
 8001c84:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_I2S2_Init+0x50>)
 8001c9a:	f003 ff05 	bl	8005aa8 <HAL_I2S_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 fce4 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000254 	.word	0x20000254
 8001cb0:	40003800 	.word	0x40003800
 8001cb4:	00017700 	.word	0x00017700

08001cb8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <MX_I2S3_Init+0x58>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <MX_I2S3_Init+0x5c>)
 8001ce2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cf8:	f003 fed6 	bl	8005aa8 <HAL_I2S_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001d02:	f000 fcb5 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000029c 	.word	0x2000029c
 8001d10:	40003c00 	.word	0x40003c00
 8001d14:	00017700 	.word	0x00017700

08001d18 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a59      	ldr	r2, [pc, #356]	; (8001e9c <HAL_I2S_MspInit+0x184>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d15b      	bne.n	8001df2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001d9e:	2306      	movs	r3, #6
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	483e      	ldr	r0, [pc, #248]	; (8001ea4 <HAL_I2S_MspInit+0x18c>)
 8001daa:	f002 fbcd 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001dae:	2308      	movs	r3, #8
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4836      	ldr	r0, [pc, #216]	; (8001ea4 <HAL_I2S_MspInit+0x18c>)
 8001dca:	f002 fbbd 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001dce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001de0:	2305      	movs	r3, #5
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	482f      	ldr	r0, [pc, #188]	; (8001ea8 <HAL_I2S_MspInit+0x190>)
 8001dec:	f002 fbac 	bl	8004548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001df0:	e04f      	b.n	8001e92 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_I2S_MspInit+0x194>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d14a      	bne.n	8001e92 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_I2S_MspInit+0x188>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e50:	2310      	movs	r3, #16
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e60:	2306      	movs	r3, #6
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <HAL_I2S_MspInit+0x198>)
 8001e6c:	f002 fb6c 	bl	8004548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e82:	2306      	movs	r3, #6
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_I2S_MspInit+0x18c>)
 8001e8e:	f002 fb5b 	bl	8004548 <HAL_GPIO_Init>
}
 8001e92:	bf00      	nop
 8001e94:	3738      	adds	r7, #56	; 0x38
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40003800 	.word	0x40003800
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <input_buf_reset>:
// https://github.com/dekuNukem/STM32_tutorials/tree/master/lesson3_serial_recv_interrupt

#include "input_buf.h"
#include <string.h> // memset is declared here

void input_buf_reset(input_buf *ib) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <input_buf_reset+0x24>
	ib->curr_index = 0;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
	memset(ib->buf, 0, BUF_SIZE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 fbf3 	bl	80096bc <memset>
 8001ed6:	e000      	b.n	8001eda <input_buf_reset+0x26>
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001ed8:	bf00      	nop
}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <input_buf_add>:

void input_buf_add(input_buf *ib, uint8_t c) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
	if(NULL == ib) return;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01a      	beq.n	8001f28 <input_buf_add+0x48>
	ib->buf[ib->curr_index] = c;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	709a      	strb	r2, [r3, #2]
	if(ib->curr_index < BUF_SIZE-1) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	2b7e      	cmp	r3, #126	; 0x7e
 8001f0a:	dc09      	bgt.n	8001f20 <input_buf_add+0x40>
		ib->curr_index = ib->curr_index+1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e004      	b.n	8001f2a <input_buf_add+0x4a>
	} else {
		input_buf_reset(ib);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffc7 	bl	8001eb4 <input_buf_reset>
 8001f26:	e000      	b.n	8001f2a <input_buf_add+0x4a>
	if(NULL == ib) return;
 8001f28:	bf00      	nop
	}
}
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <input_buf_ready>:

uint8_t input_buf_ready(input_buf *ib) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <input_buf_ready+0x12>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e014      	b.n	8001f6c <input_buf_ready+0x3c>
	if(ib->buf[ib->curr_index-1] == '\n' || ib->buf[ib->curr_index-1] == '\r') {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	789b      	ldrb	r3, [r3, #2]
 8001f50:	2b0a      	cmp	r3, #10
 8001f52:	d008      	beq.n	8001f66 <input_buf_ready+0x36>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	2b0d      	cmp	r3, #13
 8001f64:	d101      	bne.n	8001f6a <input_buf_ready+0x3a>
		return 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <input_buf_ready+0x3c>
	}
	return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// uart interrupt callback
// huart2 defined in usart.c, generated from cubemx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	c = uart_byte_buf[0];
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_UART_RxCpltCallback+0x34>)
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_UART_RxCpltCallback+0x38>)
 8001f86:	701a      	strb	r2, [r3, #0]
	echo = true;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_UART_RxCpltCallback+0x3c>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
	input_buf_add(&uart_buf, uart_byte_buf[0]);
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_UART_RxCpltCallback+0x34>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <HAL_UART_RxCpltCallback+0x40>)
 8001f96:	f7ff ffa3 	bl	8001ee0 <input_buf_add>
	HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_UART_RxCpltCallback+0x34>)
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <HAL_UART_RxCpltCallback+0x44>)
 8001fa0:	f006 fbc5 	bl	800872e <HAL_UART_Receive_IT>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200002e4 	.word	0x200002e4
 8001fb0:	2000036a 	.word	0x2000036a
 8001fb4:	2000036b 	.word	0x2000036b
 8001fb8:	200002e8 	.word	0x200002e8
 8001fbc:	200004d0 	.word	0x200004d0

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc4:	f001 fd9e 	bl	8003b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f856 	bl	8002078 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fcc:	f000 f8bc 	bl	8002148 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_ACCELERO_Init();
 8001fd0:	f001 fc44 	bl	800385c <BSP_ACCELERO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f7ff fcaa 	bl	800192c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fd8:	f7ff fda8 	bl	8001b2c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001fdc:	f7ff fe3e 	bl	8001c5c <MX_I2S2_Init>
  MX_I2S3_Init();
 8001fe0:	f7ff fe6a 	bl	8001cb8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001fe4:	f000 fb4a 	bl	800267c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001fe8:	f000 fe8c 	bl	8002d04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001fec:	f000 fc7a 	bl	80028e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ff0:	f000 fcda 	bl	80029a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ff4:	f000 fd24 	bl	8002a40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 8001ff8:	f7fe ff5c 	bl	8000eb4 <ConsoleInit>
  input_buf_reset(&uart_buf);
 8001ffc:	4817      	ldr	r0, [pc, #92]	; (800205c <main+0x9c>)
 8001ffe:	f7ff ff59 	bl	8001eb4 <input_buf_reset>
  HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8002002:	2201      	movs	r2, #1
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <main+0xa0>)
 8002006:	4817      	ldr	r0, [pc, #92]	; (8002064 <main+0xa4>)
 8002008:	f006 fb91 	bl	800872e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim2);
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <main+0xa8>)
 800200e:	f005 f88d 	bl	800712c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002012:	2100      	movs	r1, #0
 8002014:	4815      	ldr	r0, [pc, #84]	; (800206c <main+0xac>)
 8002016:	f005 f98b 	bl	8007330 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (op_mode == mode_cli)
 800201a:	e008      	b.n	800202e <main+0x6e>
  {
	cli_check();
 800201c:	f000 f8b4 	bl	8002188 <cli_check>

	if(button_pressed != 0)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <main+0xb0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <main+0x6e>
	{
		op_mode = mode_local;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <main+0xb4>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
  while (op_mode == mode_cli)
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <main+0xb4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f2      	beq.n	800201c <main+0x5c>
    /* USER CODE BEGIN 3 */
  }
  // infinite loop
  while(1)
  {
	  switch(op_mode)
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <main+0xb4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d8fb      	bhi.n	8002036 <main+0x76>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <main+0x84>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	08002037 	.word	0x08002037
 800204c:	08002037 	.word	0x08002037
 8002050:	08002037 	.word	0x08002037
	  {
	  case mode_cli:
		  Error_Handler();
 8002054:	f000 fb0c 	bl	8002670 <Error_Handler>
		  break;
 8002058:	bf00      	nop
	  switch(op_mode)
 800205a:	e7ec      	b.n	8002036 <main+0x76>
 800205c:	200002e8 	.word	0x200002e8
 8002060:	200002e4 	.word	0x200002e4
 8002064:	200004d0 	.word	0x200004d0
 8002068:	20000440 	.word	0x20000440
 800206c:	200003f8 	.word	0x200003f8
 8002070:	20000381 	.word	0x20000381
 8002074:	20000380 	.word	0x20000380

08002078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b094      	sub	sp, #80	; 0x50
 800207c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	2230      	movs	r2, #48	; 0x30
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f007 fb18 	bl	80096bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <SystemClock_Config+0xc8>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <SystemClock_Config+0xc8>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <SystemClock_Config+0xc8>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <SystemClock_Config+0xcc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <SystemClock_Config+0xcc>)
 80020c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <SystemClock_Config+0xcc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020de:	2302      	movs	r3, #2
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020e8:	2304      	movs	r3, #4
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020f0:	2304      	movs	r3, #4
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80020f4:	2308      	movs	r3, #8
 80020f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 f955 	bl	80063ac <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002108:	f000 fab2 	bl	8002670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800210c:	230f      	movs	r3, #15
 800210e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800211c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2103      	movs	r1, #3
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fbb7 	bl	800689c <HAL_RCC_ClockConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002134:	f000 fa9c 	bl	8002670 <Error_Handler>
  }
}
 8002138:	bf00      	nop
 800213a:	3750      	adds	r7, #80	; 0x50
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	40007000 	.word	0x40007000

08002148 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800214e:	463b      	mov	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800215e:	2301      	movs	r3, #1
 8002160:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002162:	23c8      	movs	r3, #200	; 0xc8
 8002164:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002166:	2305      	movs	r3, #5
 8002168:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800216a:	2302      	movs	r3, #2
 800216c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800216e:	463b      	mov	r3, r7
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fdb3 	bl	8006cdc <HAL_RCCEx_PeriphCLKConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800217c:	f000 fa78 	bl	8002670 <Error_Handler>
  }
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <cli_check>:

/* USER CODE BEGIN 4 */
void cli_check(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 	if(echo) {
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <cli_check+0x8c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <cli_check+0x30>
		sprintf((char*)buf, "%c", c);
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <cli_check+0x90>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	491f      	ldr	r1, [pc, #124]	; (800221c <cli_check+0x94>)
 800219e:	4820      	ldr	r0, [pc, #128]	; (8002220 <cli_check+0x98>)
 80021a0:	f007 fa94 	bl	80096cc <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a8:	2201      	movs	r2, #1
 80021aa:	491d      	ldr	r1, [pc, #116]	; (8002220 <cli_check+0x98>)
 80021ac:	481d      	ldr	r0, [pc, #116]	; (8002224 <cli_check+0x9c>)
 80021ae:	f006 fa2c 	bl	800860a <HAL_UART_Transmit>
  		echo = false;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <cli_check+0x8c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  	}

  	if(input_buf_ready(&uart_buf)) {
 80021b8:	481b      	ldr	r0, [pc, #108]	; (8002228 <cli_check+0xa0>)
 80021ba:	f7ff feb9 	bl	8001f30 <input_buf_ready>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d022      	beq.n	800220a <cli_check+0x82>
  		// remove the c in sprintf((char*)buf, "\r\n", c);
  		sprintf((char*)buf, "\r\n", c);
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <cli_check+0x90>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4918      	ldr	r1, [pc, #96]	; (800222c <cli_check+0xa4>)
 80021cc:	4814      	ldr	r0, [pc, #80]	; (8002220 <cli_check+0x98>)
 80021ce:	f007 fa7d 	bl	80096cc <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY);
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	2202      	movs	r2, #2
 80021d8:	4911      	ldr	r1, [pc, #68]	; (8002220 <cli_check+0x98>)
 80021da:	4812      	ldr	r0, [pc, #72]	; (8002224 <cli_check+0x9c>)
 80021dc:	f006 fa15 	bl	800860a <HAL_UART_Transmit>
			ConsoleProcess();
 80021e0:	f7fe fe96 	bl	8000f10 <ConsoleProcess>
			input_buf_reset(&uart_buf);
 80021e4:	4810      	ldr	r0, [pc, #64]	; (8002228 <cli_check+0xa0>)
 80021e6:	f7ff fe65 	bl	8001eb4 <input_buf_reset>
			// unsure why console.c doesn't clear, so let's clear it here
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 80021ea:	2300      	movs	r3, #0
 80021ec:	80fb      	strh	r3, [r7, #6]
 80021ee:	e006      	b.n	80021fe <cli_check+0x76>
				mReceiveBuffer[i] = 0;
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <cli_check+0xa8>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	3301      	adds	r3, #1
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d9f5      	bls.n	80021f0 <cli_check+0x68>
			}
			mReceivedSoFar = 0;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <cli_check+0xac>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
		}
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000036b 	.word	0x2000036b
 8002218:	2000036a 	.word	0x2000036a
 800221c:	0800a208 	.word	0x0800a208
 8002220:	2000036c 	.word	0x2000036c
 8002224:	200004d0 	.word	0x200004d0
 8002228:	200002e8 	.word	0x200002e8
 800222c:	0800a20c 	.word	0x0800a20c
 8002230:	200000f8 	.word	0x200000f8
 8002234:	200001f8 	.word	0x200001f8

08002238 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7f1b      	ldrb	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 8083 	bne.w	8002350 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800224a:	4b99      	ldr	r3, [pc, #612]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11a      	bne.n	8002288 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f005 fcb3 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 800225a:	4603      	mov	r3, r0
 800225c:	4a95      	ldr	r2, [pc, #596]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800225e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002260:	4b93      	ldr	r3, [pc, #588]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020a 	bic.w	r2, r2, #10
 8002274:	621a      	str	r2, [r3, #32]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0202 	orr.w	r2, r2, #2
 8002284:	621a      	str	r2, [r3, #32]
 8002286:	e063      	b.n	8002350 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d15f      	bne.n	8002350 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fc94 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 8002298:	4603      	mov	r3, r0
 800229a:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 800229c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 80022a6:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d907      	bls.n	80022c2 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference = IC_Val2-IC_Val1;
 80022b2:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e00f      	b.n	80022e2 <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2)
 80022c2:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d909      	bls.n	80022e2 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80022ce:	4b7a      	ldr	r3, [pc, #488]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80022dc:	33ff      	adds	r3, #255	; 0xff
 80022de:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80022e0:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f90c 	bl	8000504 <__aeabi_ui2d>
 80022ec:	a36e      	add	r3, pc, #440	; (adr r3, 80024a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f981 	bl	80005f8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002306:	f7fe faa1 	bl	800084c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fb83 	bl	8000a1c <__aeabi_d2uiz>
 8002316:	4603      	mov	r3, r0
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b69      	ldr	r3, [pc, #420]	; (80024c0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800231c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800231e:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020a 	bic.w	r2, r2, #10
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a12      	ldr	r2, [r2, #32]
 800233e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8002340:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0202 	bic.w	r2, r2, #2
 800234e:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7f1b      	ldrb	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f040 8083 	bne.w	8002460 <HAL_TIM_IC_CaptureCallback+0x228>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800235a:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11a      	bne.n	8002398 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8002362:	2104      	movs	r1, #4
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f005 fc2b 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 800236a:	4603      	mov	r3, r0
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800236e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a1a      	ldr	r2, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002384:	621a      	str	r2, [r3, #32]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	e063      	b.n	8002460 <HAL_TIM_IC_CaptureCallback+0x228>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8002398:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d15f      	bne.n	8002460 <HAL_TIM_IC_CaptureCallback+0x228>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80023a0:	2104      	movs	r1, #4
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f005 fc0c 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a43      	ldr	r2, [pc, #268]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80023ac:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 80023b6:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d907      	bls.n	80023d2 <HAL_TIM_IC_CaptureCallback+0x19a>
			{
				Difference = IC_Val2-IC_Val1;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e00f      	b.n	80023f2 <HAL_TIM_IC_CaptureCallback+0x1ba>
			}

			else if (IC_Val1 > IC_Val2)
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d909      	bls.n	80023f2 <HAL_TIM_IC_CaptureCallback+0x1ba>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80023ec:	33ff      	adds	r3, #255	; 0xff
 80023ee:	4a33      	ldr	r2, [pc, #204]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80023f0:	6013      	str	r3, [r2, #0]
			}

			DistanceR = Difference * .034/2;
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x284>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f884 	bl	8000504 <__aeabi_ui2d>
 80023fc:	a32a      	add	r3, pc, #168	; (adr r3, 80024a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f8f9 	bl	80005f8 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002416:	f7fe fa19 	bl	800084c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f7fe fafb 	bl	8000a1c <__aeabi_d2uiz>
 8002426:	4603      	mov	r3, r0
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0x290>)
 800242c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a12      	ldr	r2, [r2, #32]
 800244e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0204 	bic.w	r2, r2, #4
 800245e:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	2b04      	cmp	r3, #4
 8002466:	f040 8095 	bne.w	8002594 <HAL_TIM_IC_CaptureCallback+0x35c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d12c      	bne.n	80024cc <HAL_TIM_IC_CaptureCallback+0x294>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8002472:	2108      	movs	r1, #8
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f005 fba3 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 800247a:	4603      	mov	r3, r0
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800247e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002494:	621a      	str	r2, [r3, #32]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
		}
	}
}
 80024a6:	e075      	b.n	8002594 <HAL_TIM_IC_CaptureCallback+0x35c>
 80024a8:	b020c49c 	.word	0xb020c49c
 80024ac:	3fa16872 	.word	0x3fa16872
 80024b0:	20000398 	.word	0x20000398
 80024b4:	2000038c 	.word	0x2000038c
 80024b8:	20000390 	.word	0x20000390
 80024bc:	20000394 	.word	0x20000394
 80024c0:	20000399 	.word	0x20000399
 80024c4:	200003f8 	.word	0x200003f8
 80024c8:	2000039a 	.word	0x2000039a
		else if (Is_First_Captured==1)   // if the first is already captured
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d15f      	bne.n	8002594 <HAL_TIM_IC_CaptureCallback+0x35c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80024d4:	2108      	movs	r1, #8
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 fb72 	bl	8007bc0 <HAL_TIM_ReadCapturedValue>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x374>)
 80024e0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x374>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d907      	bls.n	8002506 <HAL_TIM_IC_CaptureCallback+0x2ce>
				Difference = IC_Val2-IC_Val1;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x374>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e00f      	b.n	8002526 <HAL_TIM_IC_CaptureCallback+0x2ee>
			else if (IC_Val1 > IC_Val2)
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x374>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d909      	bls.n	8002526 <HAL_TIM_IC_CaptureCallback+0x2ee>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x374>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002520:	33ff      	adds	r3, #255	; 0xff
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002524:	6013      	str	r3, [r2, #0]
			DistanceL = Difference * .034/2;
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ffea 	bl	8000504 <__aeabi_ui2d>
 8002530:	a31b      	add	r3, pc, #108	; (adr r3, 80025a0 <HAL_TIM_IC_CaptureCallback+0x368>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f85f 	bl	80005f8 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800254a:	f7fe f97f 	bl	800084c <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fa61 	bl	8000a1c <__aeabi_d2uiz>
 800255a:	4603      	mov	r3, r0
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8002560:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002576:	621a      	str	r2, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a12      	ldr	r2, [r2, #32]
 8002582:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x384>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x384>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	60da      	str	r2, [r3, #12]
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	f3af 8000 	nop.w
 80025a0:	b020c49c 	.word	0xb020c49c
 80025a4:	3fa16872 	.word	0x3fa16872
 80025a8:	20000398 	.word	0x20000398
 80025ac:	20000390 	.word	0x20000390
 80025b0:	2000038c 	.word	0x2000038c
 80025b4:	20000394 	.word	0x20000394
 80025b8:	2000039b 	.word	0x2000039b
 80025bc:	200003f8 	.word	0x200003f8

080025c0 <delay_us>:
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);

}

void delay_us(uint16_t us)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <delay_us+0x30>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80025d2:	bf00      	nop
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <delay_us+0x30>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3f9      	bcc.n	80025d4 <delay_us+0x14>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000440 	.word	0x20000440

080025f4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
	currentMs = HAL_GetTick();
 80025fe:	f001 fae7 	bl	8003bd0 <HAL_GetTick>
 8002602:	4603      	mov	r3, r0
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_GPIO_EXTI_Callback+0x68>)
 8002606:	6013      	str	r3, [r2, #0]
	if((GPIO_Pin == GPIO_PIN_0) && (currentMs - previousMs > 10) ){
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11e      	bne.n	800264c <HAL_GPIO_EXTI_Callback+0x58>
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_GPIO_EXTI_Callback+0x68>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b0a      	cmp	r3, #10
 800261a:	d917      	bls.n	800264c <HAL_GPIO_EXTI_Callback+0x58>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)){
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	4619      	mov	r1, r3
 8002620:	4810      	ldr	r0, [pc, #64]	; (8002664 <HAL_GPIO_EXTI_Callback+0x70>)
 8002622:	f002 f9f9 	bl	8004a18 <HAL_GPIO_ReadPin>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_GPIO_EXTI_Callback+0x4c>
			// Rising
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 800262c:	2201      	movs	r2, #1
 800262e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <HAL_GPIO_EXTI_Callback+0x74>)
 8002634:	f002 fa08 	bl	8004a48 <HAL_GPIO_WritePin>
			button_pressed = true; // exit cli mode
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_GPIO_EXTI_Callback+0x78>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e005      	b.n	800264c <HAL_GPIO_EXTI_Callback+0x58>
		}
		else{
			// Falling
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <HAL_GPIO_EXTI_Callback+0x74>)
 8002648:	f002 f9fe 	bl	8004a48 <HAL_GPIO_WritePin>
		}
	}
	previousMs = currentMs;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GPIO_EXTI_Callback+0x68>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000388 	.word	0x20000388
 8002660:	20000384 	.word	0x20000384
 8002664:	40020000 	.word	0x40020000
 8002668:	40020c00 	.word	0x40020c00
 800266c:	20000381 	.word	0x20000381

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002678:	e7fe      	b.n	8002678 <Error_Handler+0x8>
	...

0800267c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_SPI1_Init+0x64>)
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <MX_SPI1_Init+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <MX_SPI1_Init+0x64>)
 8002688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800268c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_SPI1_Init+0x64>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <MX_SPI1_Init+0x64>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_SPI1_Init+0x64>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026bc:	2200      	movs	r2, #0
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026c8:	220a      	movs	r2, #10
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <MX_SPI1_Init+0x64>)
 80026ce:	f004 fc55 	bl	8006f7c <HAL_SPI_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026d8:	f7ff ffca 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000039c 	.word	0x2000039c
 80026e4:	40013000 	.word	0x40013000

080026e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_SPI_MspInit+0x84>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12b      	bne.n	8002762 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_SPI_MspInit+0x88>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_SPI_MspInit+0x88>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002742:	23e0      	movs	r3, #224	; 0xe0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002752:	2305      	movs	r3, #5
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_SPI_MspInit+0x8c>)
 800275e:	f001 fef3 	bl	8004548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40013000 	.word	0x40013000
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_MspInit+0x4c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_MspInit+0x4c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027b6:	2007      	movs	r0, #7
 80027b8:	f001 fb0a 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <NMI_Handler+0x4>

080027ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler+0x4>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <MemManage_Handler+0x4>

080027da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <BusFault_Handler+0x4>

080027e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <UsageFault_Handler+0x4>

080027e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002814:	f001 f9c8 	bl	8003ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002820:	2001      	movs	r0, #1
 8002822:	f002 f92b 	bl	8004a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <TIM1_CC_IRQHandler+0x10>)
 8002832:	f004 fe97 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200003f8 	.word	0x200003f8

08002840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <USART2_IRQHandler+0x10>)
 8002846:	f005 ffa3 	bl	8008790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200004d0 	.word	0x200004d0

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f006 fef0 	bl	8009668 <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20020000 	.word	0x20020000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	200003f4 	.word	0x200003f4
 80028bc:	200005a8 	.word	0x200005a8

080028c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <SystemInit+0x20>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <SystemInit+0x20>)
 80028cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028f4:	463b      	mov	r3, r7
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <MX_TIM1_Init+0xc0>)
 8002904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002908:	225f      	movs	r2, #95	; 0x5f
 800290a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <MX_TIM1_Init+0xbc>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <MX_TIM1_Init+0xbc>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800292c:	481c      	ldr	r0, [pc, #112]	; (80029a0 <MX_TIM1_Init+0xbc>)
 800292e:	f004 fcb0 	bl	8007292 <HAL_TIM_IC_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002938:	f7ff fe9a 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	4619      	mov	r1, r3
 800294a:	4815      	ldr	r0, [pc, #84]	; (80029a0 <MX_TIM1_Init+0xbc>)
 800294c:	f005 fd8e 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002956:	f7ff fe8b 	bl	8002670 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800295e:	2301      	movs	r3, #1
 8002960:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800296a:	463b      	mov	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002972:	f004 feff 	bl	8007774 <HAL_TIM_IC_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800297c:	f7ff fe78 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002980:	463b      	mov	r3, r7
 8002982:	2204      	movs	r2, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4806      	ldr	r0, [pc, #24]	; (80029a0 <MX_TIM1_Init+0xbc>)
 8002988:	f004 fef4 	bl	8007774 <HAL_TIM_IC_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002992:	f7ff fe6d 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200003f8 	.word	0x200003f8
 80029a4:	40010000 	.word	0x40010000

080029a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	463b      	mov	r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029ce:	225f      	movs	r2, #95	; 0x5f
 80029d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <MX_TIM2_Init+0x94>)
 80029ee:	f004 fb4e 	bl	800708e <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029f8:	f7ff fe3a 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <MX_TIM2_Init+0x94>)
 8002a0a:	f005 f811 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a14:	f7ff fe2c 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_TIM2_Init+0x94>)
 8002a26:	f005 fd21 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a30:	f7ff fe1e 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000440 	.word	0x20000440

08002a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	f107 0320 	add.w	r3, r7, #32
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
 8002a6c:	615a      	str	r2, [r3, #20]
 8002a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a72:	4a33      	ldr	r2, [pc, #204]	; (8002b40 <MX_TIM3_Init+0x100>)
 8002a74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a90:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a96:	4829      	ldr	r0, [pc, #164]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002a98:	f004 faf9 	bl	800708e <HAL_TIM_Base_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002aa2:	f7ff fde5 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4822      	ldr	r0, [pc, #136]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002ab4:	f004 ffbc 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002abe:	f7ff fdd7 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ac2:	481e      	ldr	r0, [pc, #120]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002ac4:	f004 fb8c 	bl	80071e0 <HAL_TIM_PWM_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ace:	f7ff fdcf 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4816      	ldr	r0, [pc, #88]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002ae2:	f005 fcc3 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002aec:	f7ff fdc0 	bl	8002670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af0:	2360      	movs	r3, #96	; 0x60
 8002af2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002b08:	f004 fed0 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b12:	f7ff fdad 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4807      	ldr	r0, [pc, #28]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002b1e:	f004 fec5 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002b28:	f7ff fda2 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <MX_TIM3_Init+0xfc>)
 8002b2e:	f000 f88f 	bl	8002c50 <HAL_TIM_MspPostInit>

}
 8002b32:	bf00      	nop
 8002b34:	3738      	adds	r7, #56	; 0x38
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000488 	.word	0x20000488
 8002b40:	40000400 	.word	0x40000400

08002b44 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_TIM_IC_MspInit+0x94>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d134      	bne.n	8002bd0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6453      	str	r3, [r2, #68]	; 0x44
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_TIM_IC_MspInit+0x98>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b9e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4809      	ldr	r0, [pc, #36]	; (8002be0 <HAL_TIM_IC_MspInit+0x9c>)
 8002bbc:	f001 fcc4 	bl	8004548 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	201b      	movs	r0, #27
 8002bc6:	f001 f90e 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bca:	201b      	movs	r0, #27
 8002bcc:	f001 f927 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c12:	e012      	b.n	8002c3a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_TIM_Base_MspInit+0x68>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_TIM_Base_MspInit+0x64>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40000400 	.word	0x40000400

08002c50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <HAL_TIM_MspPostInit+0xa4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d13b      	bne.n	8002cea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_TIM_MspPostInit+0xa8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <HAL_TIM_MspPostInit+0xac>)
 8002cc6:	f001 fc3f 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <HAL_TIM_MspPostInit+0xb0>)
 8002ce6:	f001 fc2f 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	; 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020400 	.word	0x40020400

08002d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <MX_USART2_UART_Init+0x50>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d3c:	f005 fc18 	bl	8008570 <HAL_UART_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d46:	f7ff fc93 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200004d0 	.word	0x200004d0
 8002d54:	40004400 	.word	0x40004400

08002d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_UART_MspInit+0x94>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d133      	bne.n	8002de2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_UART_MspInit+0x98>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db2:	230c      	movs	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <HAL_UART_MspInit+0x9c>)
 8002dce:	f001 fbbb 	bl	8004548 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2026      	movs	r0, #38	; 0x26
 8002dd8:	f001 f805 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ddc:	2026      	movs	r0, #38	; 0x26
 8002dde:	f001 f81e 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40004400 	.word	0x40004400
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000

08002df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dfe:	490e      	ldr	r1, [pc, #56]	; (8002e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e14:	4c0b      	ldr	r4, [pc, #44]	; (8002e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e22:	f7ff fd4d 	bl	80028c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f006 fc25 	bl	8009674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2a:	f7ff f8c9 	bl	8001fc0 <main>
  bx  lr    
 8002e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e38:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002e3c:	0800a63c 	.word	0x0800a63c
  ldr r2, =_sbss
 8002e40:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002e44:	200005a4 	.word	0x200005a4

08002e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e48:	e7fe      	b.n	8002e48 <ADC_IRQHandler>

08002e4a <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8002e58:	f000 fc82 	bl	8003760 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	461a      	mov	r2, r3
 8002e64:	2120      	movs	r1, #32
 8002e66:	2032      	movs	r0, #50	; 0x32
 8002e68:	f000 fcd2 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	461a      	mov	r2, r3
 8002e74:	2123      	movs	r1, #35	; 0x23
 8002e76:	2032      	movs	r0, #50	; 0x32
 8002e78:	f000 fcca 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8002e9c:	f000 fc60 	bl	8003760 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8002ea0:	210f      	movs	r1, #15
 8002ea2:	2032      	movs	r0, #50	; 0x32
 8002ea4:	f000 fcc7 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8002eac:	79fb      	ldrb	r3, [r7, #7]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8002ebc:	2124      	movs	r1, #36	; 0x24
 8002ebe:	2032      	movs	r0, #50	; 0x32
 8002ec0:	f000 fcb9 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ece:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2124      	movs	r1, #36	; 0x24
 8002ed6:	2032      	movs	r0, #50	; 0x32
 8002ed8:	f000 fc9a 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002eee:	2121      	movs	r1, #33	; 0x21
 8002ef0:	2032      	movs	r0, #50	; 0x32
 8002ef2:	f000 fca0 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2121      	movs	r1, #33	; 0x21
 8002f10:	2032      	movs	r0, #50	; 0x32
 8002f12:	f000 fc7d 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002f28:	2121      	movs	r1, #33	; 0x21
 8002f2a:	2032      	movs	r0, #50	; 0x32
 8002f2c:	f000 fc83 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	f023 0308 	bic.w	r3, r3, #8
 8002f3a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	461a      	mov	r2, r3
 8002f48:	2121      	movs	r1, #33	; 0x21
 8002f4a:	2032      	movs	r0, #50	; 0x32
 8002f4c:	f000 fc60 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8002f60:	2300      	movs	r3, #0
 8002f62:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8002f6c:	2123      	movs	r1, #35	; 0x23
 8002f6e:	2032      	movs	r0, #50	; 0x32
 8002f70:	f000 fc61 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002f74:	4603      	mov	r3, r0
 8002f76:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8002f78:	2124      	movs	r1, #36	; 0x24
 8002f7a:	2032      	movs	r0, #50	; 0x32
 8002f7c:	f000 fc5b 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002f80:	4603      	mov	r3, r0
 8002f82:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8002f84:	2128      	movs	r1, #40	; 0x28
 8002f86:	2032      	movs	r0, #50	; 0x32
 8002f88:	f000 fc55 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	b25b      	sxtb	r3, r3
 8002f90:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8002f92:	2129      	movs	r1, #41	; 0x29
 8002f94:	2032      	movs	r0, #50	; 0x32
 8002f96:	f000 fc4e 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8002fa0:	212a      	movs	r1, #42	; 0x2a
 8002fa2:	2032      	movs	r0, #50	; 0x32
 8002fa4:	f000 fc47 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8002fae:	212b      	movs	r1, #43	; 0x2b
 8002fb0:	2032      	movs	r0, #50	; 0x32
 8002fb2:	f000 fc40 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	2032      	movs	r0, #50	; 0x32
 8002fc0:	f000 fc39 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8002fca:	212d      	movs	r1, #45	; 0x2d
 8002fcc:	2032      	movs	r0, #50	; 0x32
 8002fce:	f000 fc32 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8002fd8:	7d3b      	ldrb	r3, [r7, #20]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d123      	bne.n	800302a <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e01c      	b.n	8003022 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	3301      	adds	r3, #1
 8002fee:	3320      	adds	r3, #32
 8002ff0:	443b      	add	r3, r7
 8002ff2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	3320      	adds	r3, #32
 8003002:	443b      	add	r3, r7
 8003004:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4413      	add	r3, r2
 800300c:	b29a      	uxth	r2, r3
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	b212      	sxth	r2, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	3320      	adds	r3, #32
 8003016:	443b      	add	r3, r7
 8003018:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	3301      	adds	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d9df      	bls.n	8002fe8 <LSM303AGR_AccReadXYZ+0x90>
 8003028:	e022      	b.n	8003070 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e01c      	b.n	800306a <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	3320      	adds	r3, #32
 8003036:	443b      	add	r3, r7
 8003038:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800303c:	b29b      	uxth	r3, r3
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	b29a      	uxth	r2, r3
 8003042:	7ffb      	ldrb	r3, [r7, #31]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	3301      	adds	r3, #1
 8003048:	3320      	adds	r3, #32
 800304a:	443b      	add	r3, r7
 800304c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4413      	add	r3, r2
 8003054:	b29a      	uxth	r2, r3
 8003056:	7ffb      	ldrb	r3, [r7, #31]
 8003058:	b212      	sxth	r2, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	3320      	adds	r3, #32
 800305e:	443b      	add	r3, r7
 8003060:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	3301      	adds	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d9df      	bls.n	8003030 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8003070:	7d3b      	ldrb	r3, [r7, #20]
 8003072:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d013      	beq.n	80030a2 <LSM303AGR_AccReadXYZ+0x14a>
 800307a:	2b30      	cmp	r3, #48	; 0x30
 800307c:	dc14      	bgt.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
 800307e:	2b20      	cmp	r3, #32
 8003080:	d00c      	beq.n	800309c <LSM303AGR_AccReadXYZ+0x144>
 8003082:	2b20      	cmp	r3, #32
 8003084:	dc10      	bgt.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <LSM303AGR_AccReadXYZ+0x138>
 800308a:	2b10      	cmp	r3, #16
 800308c:	d003      	beq.n	8003096 <LSM303AGR_AccReadXYZ+0x13e>
 800308e:	e00b      	b.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8003090:	2301      	movs	r3, #1
 8003092:	77bb      	strb	r3, [r7, #30]
    break;
 8003094:	e008      	b.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8003096:	2302      	movs	r3, #2
 8003098:	77bb      	strb	r3, [r7, #30]
    break;
 800309a:	e005      	b.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800309c:	2304      	movs	r3, #4
 800309e:	77bb      	strb	r3, [r7, #30]
    break;
 80030a0:	e002      	b.n	80030a8 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80030a2:	230c      	movs	r3, #12
 80030a4:	77bb      	strb	r3, [r7, #30]
    break;
 80030a6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e014      	b.n	80030d8 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	3320      	adds	r3, #32
 80030b4:	443b      	add	r3, r7
 80030b6:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	7fbb      	ldrb	r3, [r7, #30]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	fb12 f303 	smulbb	r3, r2, r3
 80030c4:	b299      	uxth	r1, r3
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	b20a      	sxth	r2, r1
 80030d0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80030d2:	7ffb      	ldrb	r3, [r7, #31]
 80030d4:	3301      	adds	r3, #1
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d9e7      	bls.n	80030ae <LSM303AGR_AccReadXYZ+0x156>
  }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80030f6:	2121      	movs	r1, #33	; 0x21
 80030f8:	2032      	movs	r0, #50	; 0x32
 80030fa:	f000 fb9c 	bl	8003836 <COMPASSACCELERO_IO_Read>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4313      	orrs	r3, r2
 8003110:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	461a      	mov	r2, r3
 8003116:	2121      	movs	r1, #33	; 0x21
 8003118:	2032      	movs	r0, #50	; 0x32
 800311a:	f000 fb79 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8003134:	2122      	movs	r1, #34	; 0x22
 8003136:	2032      	movs	r0, #50	; 0x32
 8003138:	f000 fb7d 	bl	8003836 <COMPASSACCELERO_IO_Read>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4313      	orrs	r3, r2
 8003146:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	461a      	mov	r2, r3
 800314c:	2122      	movs	r1, #34	; 0x22
 800314e:	2032      	movs	r0, #50	; 0x32
 8003150:	f000 fb5e 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800316a:	2138      	movs	r1, #56	; 0x38
 800316c:	2032      	movs	r0, #50	; 0x32
 800316e:	f000 fb62 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4313      	orrs	r3, r2
 800317c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	461a      	mov	r2, r3
 8003182:	2138      	movs	r1, #56	; 0x38
 8003184:	2032      	movs	r0, #50	; 0x32
 8003186:	f000 fb43 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800318a:	230a      	movs	r3, #10
 800318c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	461a      	mov	r2, r3
 8003192:	213a      	movs	r1, #58	; 0x3a
 8003194:	2032      	movs	r0, #50	; 0x32
 8003196:	f000 fb3b 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800319a:	2305      	movs	r3, #5
 800319c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	461a      	mov	r2, r3
 80031a2:	213b      	movs	r1, #59	; 0x3b
 80031a4:	2032      	movs	r0, #50	; 0x32
 80031a6:	f000 fb33 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	461a      	mov	r2, r3
 80031ae:	213c      	movs	r1, #60	; 0x3c
 80031b0:	2032      	movs	r0, #50	; 0x32
 80031b2:	f000 fb2d 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80031b6:	2332      	movs	r3, #50	; 0x32
 80031b8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	461a      	mov	r2, r3
 80031be:	213d      	movs	r1, #61	; 0x3d
 80031c0:	2032      	movs	r0, #50	; 0x32
 80031c2:	f000 fb25 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80031d2:	f000 faed 	bl	80037b0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80031d6:	2080      	movs	r0, #128	; 0x80
 80031d8:	f7ff ffa5 	bl	8003126 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80031dc:	2004      	movs	r0, #4
 80031de:	f7ff ff83 	bl	80030e8 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80031e2:	2010      	movs	r0, #16
 80031e4:	f7ff ffba 	bl	800315c <LSM303AGR_AccClickITEnable>
}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}

080031ec <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80031fa:	f000 fab1 	bl	8003760 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	461a      	mov	r2, r3
 8003206:	2120      	movs	r1, #32
 8003208:	2032      	movs	r0, #50	; 0x32
 800320a:	f000 fb01 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	461a      	mov	r2, r3
 8003216:	2123      	movs	r1, #35	; 0x23
 8003218:	2032      	movs	r0, #50	; 0x32
 800321a:	f000 faf9 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800323a:	2300      	movs	r3, #0
 800323c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800323e:	f000 fa8f 	bl	8003760 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8003242:	210f      	movs	r1, #15
 8003244:	2032      	movs	r0, #50	; 0x32
 8003246:	f000 faf6 	bl	8003836 <COMPASSACCELERO_IO_Read>
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800324e:	79fb      	ldrb	r3, [r7, #7]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800325e:	2124      	movs	r1, #36	; 0x24
 8003260:	2032      	movs	r0, #50	; 0x32
 8003262:	f000 fae8 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003270:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	461a      	mov	r2, r3
 8003276:	2124      	movs	r1, #36	; 0x24
 8003278:	2032      	movs	r0, #50	; 0x32
 800327a:	f000 fac9 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8003290:	2121      	movs	r1, #33	; 0x21
 8003292:	2032      	movs	r0, #50	; 0x32
 8003294:	f000 facf 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	461a      	mov	r2, r3
 80032b0:	2121      	movs	r1, #33	; 0x21
 80032b2:	2032      	movs	r0, #50	; 0x32
 80032b4:	f000 faac 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80032ca:	2121      	movs	r1, #33	; 0x21
 80032cc:	2032      	movs	r0, #50	; 0x32
 80032ce:	f000 fab2 	bl	8003836 <COMPASSACCELERO_IO_Read>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	f023 0308 	bic.w	r3, r3, #8
 80032dc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	461a      	mov	r2, r3
 80032ea:	2121      	movs	r1, #33	; 0x21
 80032ec:	2032      	movs	r0, #50	; 0x32
 80032ee:	f000 fa8f 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8003302:	2300      	movs	r3, #0
 8003304:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800330a:	2301      	movs	r3, #1
 800330c:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800330e:	2123      	movs	r1, #35	; 0x23
 8003310:	2032      	movs	r0, #50	; 0x32
 8003312:	f000 fa90 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003316:	4603      	mov	r3, r0
 8003318:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800331a:	2124      	movs	r1, #36	; 0x24
 800331c:	2032      	movs	r0, #50	; 0x32
 800331e:	f000 fa8a 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003322:	4603      	mov	r3, r0
 8003324:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8003326:	2128      	movs	r1, #40	; 0x28
 8003328:	2032      	movs	r0, #50	; 0x32
 800332a:	f000 fa84 	bl	8003836 <COMPASSACCELERO_IO_Read>
 800332e:	4603      	mov	r3, r0
 8003330:	b25b      	sxtb	r3, r3
 8003332:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8003334:	2129      	movs	r1, #41	; 0x29
 8003336:	2032      	movs	r0, #50	; 0x32
 8003338:	f000 fa7d 	bl	8003836 <COMPASSACCELERO_IO_Read>
 800333c:	4603      	mov	r3, r0
 800333e:	b25b      	sxtb	r3, r3
 8003340:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8003342:	212a      	movs	r1, #42	; 0x2a
 8003344:	2032      	movs	r0, #50	; 0x32
 8003346:	f000 fa76 	bl	8003836 <COMPASSACCELERO_IO_Read>
 800334a:	4603      	mov	r3, r0
 800334c:	b25b      	sxtb	r3, r3
 800334e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8003350:	212b      	movs	r1, #43	; 0x2b
 8003352:	2032      	movs	r0, #50	; 0x32
 8003354:	f000 fa6f 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003358:	4603      	mov	r3, r0
 800335a:	b25b      	sxtb	r3, r3
 800335c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	2032      	movs	r0, #50	; 0x32
 8003362:	f000 fa68 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003366:	4603      	mov	r3, r0
 8003368:	b25b      	sxtb	r3, r3
 800336a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800336c:	212d      	movs	r1, #45	; 0x2d
 800336e:	2032      	movs	r0, #50	; 0x32
 8003370:	f000 fa61 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003374:	4603      	mov	r3, r0
 8003376:	b25b      	sxtb	r3, r3
 8003378:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800337a:	7d3b      	ldrb	r3, [r7, #20]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d123      	bne.n	80033cc <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e01c      	b.n	80033c4 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	3301      	adds	r3, #1
 8003390:	3320      	adds	r3, #32
 8003392:	443b      	add	r3, r7
 8003394:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003398:	b29b      	uxth	r3, r3
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b29a      	uxth	r2, r3
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	3320      	adds	r3, #32
 80033a4:	443b      	add	r3, r7
 80033a6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
 80033b2:	b212      	sxth	r2, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	3320      	adds	r3, #32
 80033b8:	443b      	add	r3, r7
 80033ba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80033be:	7ffb      	ldrb	r3, [r7, #31]
 80033c0:	3301      	adds	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d9df      	bls.n	800338a <LSM303DLHC_AccReadXYZ+0x90>
 80033ca:	e022      	b.n	8003412 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e01c      	b.n	800340c <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	3320      	adds	r3, #32
 80033d8:	443b      	add	r3, r7
 80033da:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	3301      	adds	r3, #1
 80033ea:	3320      	adds	r3, #32
 80033ec:	443b      	add	r3, r7
 80033ee:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	b212      	sxth	r2, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	3320      	adds	r3, #32
 8003400:	443b      	add	r3, r7
 8003402:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	3301      	adds	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	7ffb      	ldrb	r3, [r7, #31]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d9df      	bls.n	80033d2 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8003412:	7d3b      	ldrb	r3, [r7, #20]
 8003414:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003418:	2b30      	cmp	r3, #48	; 0x30
 800341a:	d013      	beq.n	8003444 <LSM303DLHC_AccReadXYZ+0x14a>
 800341c:	2b30      	cmp	r3, #48	; 0x30
 800341e:	dc14      	bgt.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
 8003420:	2b20      	cmp	r3, #32
 8003422:	d00c      	beq.n	800343e <LSM303DLHC_AccReadXYZ+0x144>
 8003424:	2b20      	cmp	r3, #32
 8003426:	dc10      	bgt.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <LSM303DLHC_AccReadXYZ+0x138>
 800342c:	2b10      	cmp	r3, #16
 800342e:	d003      	beq.n	8003438 <LSM303DLHC_AccReadXYZ+0x13e>
 8003430:	e00b      	b.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8003432:	2301      	movs	r3, #1
 8003434:	77bb      	strb	r3, [r7, #30]
    break;
 8003436:	e008      	b.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8003438:	2302      	movs	r3, #2
 800343a:	77bb      	strb	r3, [r7, #30]
    break;
 800343c:	e005      	b.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800343e:	2304      	movs	r3, #4
 8003440:	77bb      	strb	r3, [r7, #30]
    break;
 8003442:	e002      	b.n	800344a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8003444:	230c      	movs	r3, #12
 8003446:	77bb      	strb	r3, [r7, #30]
    break;
 8003448:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e014      	b.n	800347a <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8003450:	7ffb      	ldrb	r3, [r7, #31]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	3320      	adds	r3, #32
 8003456:	443b      	add	r3, r7
 8003458:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800345c:	b29a      	uxth	r2, r3
 800345e:	7fbb      	ldrb	r3, [r7, #30]
 8003460:	b29b      	uxth	r3, r3
 8003462:	fb12 f303 	smulbb	r3, r2, r3
 8003466:	b299      	uxth	r1, r3
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	b20a      	sxth	r2, r1
 8003472:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003474:	7ffb      	ldrb	r3, [r7, #31]
 8003476:	3301      	adds	r3, #1
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d9e7      	bls.n	8003450 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8003498:	2121      	movs	r1, #33	; 0x21
 800349a:	2032      	movs	r0, #50	; 0x32
 800349c:	f000 f9cb 	bl	8003836 <COMPASSACCELERO_IO_Read>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	461a      	mov	r2, r3
 80034b8:	2121      	movs	r1, #33	; 0x21
 80034ba:	2032      	movs	r0, #50	; 0x32
 80034bc:	f000 f9a8 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80034d6:	2122      	movs	r1, #34	; 0x22
 80034d8:	2032      	movs	r0, #50	; 0x32
 80034da:	f000 f9ac 	bl	8003836 <COMPASSACCELERO_IO_Read>
 80034de:	4603      	mov	r3, r0
 80034e0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	461a      	mov	r2, r3
 80034ee:	2122      	movs	r1, #34	; 0x22
 80034f0:	2032      	movs	r0, #50	; 0x32
 80034f2:	f000 f98d 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800350c:	2138      	movs	r1, #56	; 0x38
 800350e:	2032      	movs	r0, #50	; 0x32
 8003510:	f000 f991 	bl	8003836 <COMPASSACCELERO_IO_Read>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4313      	orrs	r3, r2
 800351e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	461a      	mov	r2, r3
 8003524:	2138      	movs	r1, #56	; 0x38
 8003526:	2032      	movs	r0, #50	; 0x32
 8003528:	f000 f972 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800352c:	230a      	movs	r3, #10
 800352e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	461a      	mov	r2, r3
 8003534:	213a      	movs	r1, #58	; 0x3a
 8003536:	2032      	movs	r0, #50	; 0x32
 8003538:	f000 f96a 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800353c:	2305      	movs	r3, #5
 800353e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	461a      	mov	r2, r3
 8003544:	213b      	movs	r1, #59	; 0x3b
 8003546:	2032      	movs	r0, #50	; 0x32
 8003548:	f000 f962 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	461a      	mov	r2, r3
 8003550:	213c      	movs	r1, #60	; 0x3c
 8003552:	2032      	movs	r0, #50	; 0x32
 8003554:	f000 f95c 	bl	8003810 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8003558:	2332      	movs	r3, #50	; 0x32
 800355a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	461a      	mov	r2, r3
 8003560:	213d      	movs	r1, #61	; 0x3d
 8003562:	2032      	movs	r0, #50	; 0x32
 8003564:	f000 f954 	bl	8003810 <COMPASSACCELERO_IO_Write>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8003574:	f000 f91c 	bl	80037b0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8003578:	2080      	movs	r0, #128	; 0x80
 800357a:	f7ff ffa5 	bl	80034c8 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800357e:	2004      	movs	r0, #4
 8003580:	f7ff ff83 	bl	800348a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8003584:	2010      	movs	r0, #16
 8003586:	f7ff ffba 	bl	80034fe <LSM303DLHC_AccClickITEnable>
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003594:	4814      	ldr	r0, [pc, #80]	; (80035e8 <I2Cx_Init+0x58>)
 8003596:	f001 ff1d 	bl	80053d4 <HAL_I2C_GetState>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d121      	bne.n	80035e4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <I2Cx_Init+0x58>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <I2Cx_Init+0x5c>)
 80035a4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <I2Cx_Init+0x58>)
 80035a8:	2243      	movs	r2, #67	; 0x43
 80035aa:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <I2Cx_Init+0x58>)
 80035ae:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <I2Cx_Init+0x60>)
 80035b0:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <I2Cx_Init+0x58>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <I2Cx_Init+0x58>)
 80035ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035be:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <I2Cx_Init+0x58>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <I2Cx_Init+0x58>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <I2Cx_Init+0x58>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <I2Cx_Init+0x58>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <I2Cx_Init+0x58>)
 80035da:	f000 f86b 	bl	80036b4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80035de:	4802      	ldr	r0, [pc, #8]	; (80035e8 <I2Cx_Init+0x58>)
 80035e0:	f001 fa64 	bl	8004aac <HAL_I2C_Init>
  }
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000514 	.word	0x20000514
 80035ec:	40005400 	.word	0x40005400
 80035f0:	000186a0 	.word	0x000186a0

080035f4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
 80035fe:	460b      	mov	r3, r1
 8003600:	717b      	strb	r3, [r7, #5]
 8003602:	4613      	mov	r3, r2
 8003604:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800360a:	797b      	ldrb	r3, [r7, #5]
 800360c:	b29a      	uxth	r2, r3
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <I2Cx_WriteData+0x48>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	88f9      	ldrh	r1, [r7, #6]
 8003614:	9302      	str	r3, [sp, #8]
 8003616:	2301      	movs	r3, #1
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2301      	movs	r3, #1
 8003620:	4807      	ldr	r0, [pc, #28]	; (8003640 <I2Cx_WriteData+0x4c>)
 8003622:	f001 fbb7 	bl	8004d94 <HAL_I2C_Mem_Write>
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003630:	f000 f834 	bl	800369c <I2Cx_Error>
  }
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2000006c 	.word	0x2000006c
 8003640:	20000514 	.word	0x20000514

08003644 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af04      	add	r7, sp, #16
 800364a:	4603      	mov	r3, r0
 800364c:	460a      	mov	r2, r1
 800364e:	80fb      	strh	r3, [r7, #6]
 8003650:	4613      	mov	r3, r2
 8003652:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800365c:	797b      	ldrb	r3, [r7, #5]
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <I2Cx_ReadData+0x50>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	88f9      	ldrh	r1, [r7, #6]
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	2301      	movs	r3, #1
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	f107 030e 	add.w	r3, r7, #14
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2301      	movs	r3, #1
 8003674:	4808      	ldr	r0, [pc, #32]	; (8003698 <I2Cx_ReadData+0x54>)
 8003676:	f001 fc87 	bl	8004f88 <HAL_I2C_Mem_Read>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003684:	f000 f80a 	bl	800369c <I2Cx_Error>
  }
  return value;
 8003688:	7bbb      	ldrb	r3, [r7, #14]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000006c 	.word	0x2000006c
 8003698:	20000514 	.word	0x20000514

0800369c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <I2Cx_Error+0x14>)
 80036a2:	f001 fb47 	bl	8004d34 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80036a6:	f7ff ff73 	bl	8003590 <I2Cx_Init>
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000514 	.word	0x20000514

080036b4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ca:	6413      	str	r3, [r2, #64]	; 0x40
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <I2Cx_MspInit+0xa4>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80036f4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80036f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80036fa:	2312      	movs	r3, #18
 80036fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003702:	2302      	movs	r3, #2
 8003704:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8003706:	2304      	movs	r3, #4
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	4812      	ldr	r0, [pc, #72]	; (800375c <I2Cx_MspInit+0xa8>)
 8003712:	f000 ff19 	bl	8004548 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <I2Cx_MspInit+0xa4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <I2Cx_MspInit+0xa4>)
 800371c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003720:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <I2Cx_MspInit+0xa4>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <I2Cx_MspInit+0xa4>)
 8003728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800372c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	210f      	movs	r1, #15
 8003732:	201f      	movs	r0, #31
 8003734:	f000 fb57 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003738:	201f      	movs	r0, #31
 800373a:	f000 fb70 	bl	8003e1e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	210f      	movs	r1, #15
 8003742:	2020      	movs	r0, #32
 8003744:	f000 fb4f 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003748:	2020      	movs	r0, #32
 800374a:	f000 fb68 	bl	8003e1e <HAL_NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	40020400 	.word	0x40020400

08003760 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <COMPASSACCELERO_IO_Init+0x48>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <COMPASSACCELERO_IO_Init+0x48>)
 8003770:	f043 0310 	orr.w	r3, r3, #16
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <COMPASSACCELERO_IO_Init+0x48>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003782:	2304      	movs	r3, #4
 8003784:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800378e:	2302      	movs	r3, #2
 8003790:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <COMPASSACCELERO_IO_Init+0x4c>)
 8003798:	f000 fed6 	bl	8004548 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800379c:	f7ff fef8 	bl	8003590 <I2Cx_Init>
}
 80037a0:	bf00      	nop
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40021000 	.word	0x40021000

080037b0 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80037d2:	2330      	movs	r3, #48	; 0x30
 80037d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80037d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80037dc:	2302      	movs	r3, #2
 80037de:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4808      	ldr	r0, [pc, #32]	; (800380c <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80037ea:	f000 fead 	bl	8004548 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80037ee:	2200      	movs	r2, #0
 80037f0:	210f      	movs	r1, #15
 80037f2:	200a      	movs	r0, #10
 80037f4:	f000 faf7 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80037f8:	200a      	movs	r0, #10
 80037fa:	f000 fb10 	bl	8003e1e <HAL_NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	40021000 	.word	0x40021000

08003810 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
 800381a:	460b      	mov	r3, r1
 800381c:	717b      	strb	r3, [r7, #5]
 800381e:	4613      	mov	r3, r2
 8003820:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8003822:	793a      	ldrb	r2, [r7, #4]
 8003824:	7979      	ldrb	r1, [r7, #5]
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fee3 	bl	80035f4 <I2Cx_WriteData>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	460a      	mov	r2, r1
 8003840:	80fb      	strh	r3, [r7, #6]
 8003842:	4613      	mov	r3, r2
 8003844:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8003846:	797a      	ldrb	r2, [r7, #5]
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fef9 	bl	8003644 <I2Cx_ReadData>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003866:	2300      	movs	r3, #0
 8003868:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003872:	4b58      	ldr	r3, [pc, #352]	; (80039d4 <BSP_ACCELERO_Init+0x178>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4798      	blx	r3
 8003878:	4603      	mov	r3, r0
 800387a:	2b33      	cmp	r3, #51	; 0x33
 800387c:	d14f      	bne.n	800391e <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 8003880:	4a54      	ldr	r2, [pc, #336]	; (80039d4 <BSP_ACCELERO_Init+0x178>)
 8003882:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003884:	2300      	movs	r3, #0
 8003886:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8003888:	2340      	movs	r3, #64	; 0x40
 800388a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 800388c:	2307      	movs	r3, #7
 800388e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8003890:	2300      	movs	r3, #0
 8003892:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003894:	2300      	movs	r3, #0
 8003896:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003898:	2300      	movs	r3, #0
 800389a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 800389c:	2308      	movs	r3, #8
 800389e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80038a0:	7b3a      	ldrb	r2, [r7, #12]
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80038a8:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	8abb      	ldrh	r3, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80038b6:	7c3a      	ldrb	r2, [r7, #16]
 80038b8:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	7cbb      	ldrb	r3, [r7, #18]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80038cc:	b21a      	sxth	r2, r3
 80038ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	8aba      	ldrh	r2, [r7, #20]
 80038e0:	4610      	mov	r0, r2
 80038e2:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80038e8:	2310      	movs	r3, #16
 80038ea:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80038f4:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80038f6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80038fc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80038fe:	4313      	orrs	r3, r2
 8003900:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003902:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003904:	4313      	orrs	r3, r2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	8aba      	ldrh	r2, [r7, #20]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
 800391c:	e054      	b.n	80039c8 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800391e:	4b2f      	ldr	r3, [pc, #188]	; (80039dc <BSP_ACCELERO_Init+0x180>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4798      	blx	r3
 8003924:	4603      	mov	r3, r0
 8003926:	2b33      	cmp	r3, #51	; 0x33
 8003928:	d14e      	bne.n	80039c8 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <BSP_ACCELERO_Init+0x180>)
 800392e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003930:	2300      	movs	r3, #0
 8003932:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8003934:	2340      	movs	r3, #64	; 0x40
 8003936:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003938:	2307      	movs	r3, #7
 800393a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 800393c:	2300      	movs	r3, #0
 800393e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003940:	2300      	movs	r3, #0
 8003942:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003944:	2300      	movs	r3, #0
 8003946:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003948:	2308      	movs	r3, #8
 800394a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800394c:	7b3a      	ldrb	r2, [r7, #12]
 800394e:	7b7b      	ldrb	r3, [r7, #13]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003954:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003956:	4313      	orrs	r3, r2
 8003958:	b2db      	uxtb	r3, r3
 800395a:	b29a      	uxth	r2, r3
 800395c:	8abb      	ldrh	r3, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003962:	7c3a      	ldrb	r2, [r7, #16]
 8003964:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003966:	4313      	orrs	r3, r2
 8003968:	b2da      	uxtb	r2, r3
 800396a:	7cbb      	ldrb	r3, [r7, #18]
 800396c:	4313      	orrs	r3, r2
 800396e:	b2da      	uxtb	r2, r3
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4313      	orrs	r3, r2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003978:	b21a      	sxth	r2, r3
 800397a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	b21b      	sxth	r3, r3
 8003982:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	8aba      	ldrh	r2, [r7, #20]
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003994:	2310      	movs	r3, #16
 8003996:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80039a0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80039a2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80039a8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80039aa:	4313      	orrs	r3, r2
 80039ac:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <BSP_ACCELERO_Init+0x17c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	8aba      	ldrh	r2, [r7, #20]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000038 	.word	0x20000038
 80039d8:	20000568 	.word	0x20000568
 80039dc:	20000004 	.word	0x20000004

080039e0 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <BSP_ACCELERO_GetXYZ+0x50>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <BSP_ACCELERO_GetXYZ+0x50>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <BSP_ACCELERO_GetXYZ+0x50>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <BSP_ACCELERO_GetXYZ+0x54>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10e      	bne.n	8003a28 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3302      	adds	r3, #2
 8003a24:	b212      	sxth	r2, r2
 8003a26:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000568 	.word	0x20000568
 8003a34:	20000038 	.word	0x20000038

08003a38 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_I2S_TxCpltCallback+0x20>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8003a4a:	f000 f807 	bl	8003a5c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40003c00 	.word	0x40003c00

08003a5c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003a80:	f000 f804 	bl	8003a8c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_I2S_ErrorCallback+0x2c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003aba:	f7ff ffd6 	bl	8003a6a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <HAL_I2S_ErrorCallback+0x30>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8003ac8:	f7ff ffe7 	bl	8003a9a <BSP_AUDIO_IN_Error_Callback>
  }
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40003c00 	.word	0x40003c00
 8003ad8:	40003800 	.word	0x40003800

08003adc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <BSP_GYRO_GetXYZ+0x24>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <BSP_GYRO_GetXYZ+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000056c 	.word	0x2000056c

08003b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_Init+0x40>)
 8003b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_Init+0x40>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_Init+0x40>)
 8003b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_Init+0x40>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_Init+0x40>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f000 f94f 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f000 f808 	bl	8003b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b38:	f7fe fe1e 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_InitTick+0x54>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_InitTick+0x58>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f967 	bl	8003e3a <HAL_SYSTICK_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00e      	b.n	8003b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b0f      	cmp	r3, #15
 8003b7a:	d80a      	bhi.n	8003b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b84:	f000 f92f 	bl	8003de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b88:	4a06      	ldr	r2, [pc, #24]	; (8003ba4 <HAL_InitTick+0x5c>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	20000070 	.word	0x20000070

08003ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_IncTick+0x20>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x24>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_IncTick+0x24>)
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000074 	.word	0x20000074
 8003bcc:	20000570 	.word	0x20000570

08003bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_GetTick+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000570 	.word	0x20000570

08003be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff ffee 	bl	8003bd0 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c00:	d005      	beq.n	8003c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_Delay+0x44>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c0e:	bf00      	nop
 8003c10:	f7ff ffde 	bl	8003bd0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d8f7      	bhi.n	8003c10 <HAL_Delay+0x28>
  {
  }
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000074 	.word	0x20000074

08003c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__NVIC_GetPriorityGrouping+0x18>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0307 	and.w	r3, r3, #7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db0b      	blt.n	8003cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4907      	ldr	r1, [pc, #28]	; (8003ccc <__NVIC_EnableIRQ+0x38>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db0a      	blt.n	8003cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	490c      	ldr	r1, [pc, #48]	; (8003d1c <__NVIC_SetPriority+0x4c>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf8:	e00a      	b.n	8003d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4908      	ldr	r1, [pc, #32]	; (8003d20 <__NVIC_SetPriority+0x50>)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3b04      	subs	r3, #4
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	761a      	strb	r2, [r3, #24]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf28      	it	cs
 8003d42:	2304      	movcs	r3, #4
 8003d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d902      	bls.n	8003d54 <NVIC_EncodePriority+0x30>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3b03      	subs	r3, #3
 8003d52:	e000      	b.n	8003d56 <NVIC_EncodePriority+0x32>
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	401a      	ands	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43d9      	mvns	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	4313      	orrs	r3, r2
         );
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db0:	f7ff ff8e 	bl	8003cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff29 	bl	8003c30 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df8:	f7ff ff3e 	bl	8003c78 <__NVIC_GetPriorityGrouping>
 8003dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7ff ff8e 	bl	8003d24 <NVIC_EncodePriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff5d 	bl	8003cd0 <__NVIC_SetPriority>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff31 	bl	8003c94 <__NVIC_EnableIRQ>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffa2 	bl	8003d8c <SysTick_Config>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7ff feb6 	bl	8003bd0 <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d008      	beq.n	8003e84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e052      	b.n	8003f2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0216 	bic.w	r2, r2, #22
 8003e92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_DMA_Abort+0x62>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0208 	bic.w	r2, r2, #8
 8003ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed4:	e013      	b.n	8003efe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed6:	f7ff fe7b 	bl	8003bd0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d90c      	bls.n	8003efe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e015      	b.n	8003f2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e4      	bne.n	8003ed6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	223f      	movs	r2, #63	; 0x3f
 8003f12:	409a      	lsls	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d004      	beq.n	8003f50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e00c      	b.n	8003f6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2205      	movs	r2, #5
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_FLASH_Program+0xa0>)
 8003f8c:	7e1b      	ldrb	r3, [r3, #24]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_FLASH_Program+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e03b      	b.n	800400e <HAL_FLASH_Program+0x96>
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_FLASH_Program+0xa0>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fa0:	f000 f870 	bl	8004084 <FLASH_WaitForLastOperation>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d12b      	bne.n	8004006 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003fb4:	783b      	ldrb	r3, [r7, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	f000 f91b 	bl	80041f4 <FLASH_Program_Byte>
 8003fbe:	e016      	b.n	8003fee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003fc6:	883b      	ldrh	r3, [r7, #0]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f000 f8ee 	bl	80041ac <FLASH_Program_HalfWord>
 8003fd0:	e00d      	b.n	8003fee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d105      	bne.n	8003fe4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	68b8      	ldr	r0, [r7, #8]
 8003fde:	f000 f8c3 	bl	8004168 <FLASH_Program_Word>
 8003fe2:	e004      	b.n	8003fee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe8:	68b8      	ldr	r0, [r7, #8]
 8003fea:	f000 f88b 	bl	8004104 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ff2:	f000 f847 	bl	8004084 <FLASH_WaitForLastOperation>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_FLASH_Program+0xa4>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_FLASH_Program+0xa4>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_FLASH_Program+0xa0>)
 8004008:	2200      	movs	r2, #0
 800400a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000574 	.word	0x20000574
 800401c:	40023c00 	.word	0x40023c00

08004020 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da0b      	bge.n	800404a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_FLASH_Unlock+0x3c>)
 8004036:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <HAL_FLASH_Unlock+0x40>)
 800403c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da01      	bge.n	800404a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800404a:	79fb      	ldrb	r3, [r7, #7]
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40023c00 	.word	0x40023c00
 800405c:	45670123 	.word	0x45670123
 8004060:	cdef89ab 	.word	0xcdef89ab

08004064 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_FLASH_Lock+0x1c>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_FLASH_Lock+0x1c>)
 800406e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004072:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40023c00 	.word	0x40023c00

08004084 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <FLASH_WaitForLastOperation+0x78>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004096:	f7ff fd9b 	bl	8003bd0 <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800409c:	e010      	b.n	80040c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d00c      	beq.n	80040c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <FLASH_WaitForLastOperation+0x38>
 80040ac:	f7ff fd90 	bl	8003bd0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d201      	bcs.n	80040c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e019      	b.n	80040f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <FLASH_WaitForLastOperation+0x7c>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e8      	bne.n	800409e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <FLASH_WaitForLastOperation+0x7c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <FLASH_WaitForLastOperation+0x7c>)
 80040da:	2201      	movs	r2, #1
 80040dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <FLASH_WaitForLastOperation+0x7c>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80040ea:	f000 f8a5 	bl	8004238 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
  
}  
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000574 	.word	0x20000574
 8004100:	40023c00 	.word	0x40023c00

08004104 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4a10      	ldr	r2, [pc, #64]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 8004122:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004126:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <FLASH_Program_DoubleWord+0x60>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800413a:	f3bf 8f6f 	isb	sy
}
 800413e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004140:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	000a      	movs	r2, r1
 800414e:	2300      	movs	r3, #0
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	3104      	adds	r1, #4
 8004154:	4613      	mov	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40023c00 	.word	0x40023c00

08004168 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <FLASH_Program_Word+0x40>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <FLASH_Program_Word+0x40>)
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <FLASH_Program_Word+0x40>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <FLASH_Program_Word+0x40>)
 8004184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004188:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <FLASH_Program_Word+0x40>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4a06      	ldr	r2, [pc, #24]	; (80041a8 <FLASH_Program_Word+0x40>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40023c00 	.word	0x40023c00

080041ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4a06      	ldr	r2, [pc, #24]	; (80041f0 <FLASH_Program_HalfWord+0x44>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	801a      	strh	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00

080041f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <FLASH_Program_Byte+0x40>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <FLASH_Program_Byte+0x40>)
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <FLASH_Program_Byte+0x40>)
 800420e:	4a09      	ldr	r2, [pc, #36]	; (8004234 <FLASH_Program_Byte+0x40>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <FLASH_Program_Byte+0x40>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a06      	ldr	r2, [pc, #24]	; (8004234 <FLASH_Program_Byte+0x40>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	701a      	strb	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00

08004238 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800423c:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 8004252:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 8004256:	2210      	movs	r2, #16
 8004258:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800425a:	4b28      	ldr	r3, [pc, #160]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	4a24      	ldr	r2, [pc, #144]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 8004270:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 8004274:	2220      	movs	r2, #32
 8004276:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004278:	4b20      	ldr	r3, [pc, #128]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004284:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 800428e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 8004292:	2240      	movs	r2, #64	; 0x40
 8004294:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 80042ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f043 0320 	orr.w	r3, r3, #32
 80042e8:	4a05      	ldr	r2, [pc, #20]	; (8004300 <FLASH_SetErrorCode+0xc8>)
 80042ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <FLASH_SetErrorCode+0xc4>)
 80042ee:	2202      	movs	r2, #2
 80042f0:	60da      	str	r2, [r3, #12]
  }
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40023c00 	.word	0x40023c00
 8004300:	20000574 	.word	0x20000574

08004304 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_FLASHEx_Erase+0xd8>)
 8004318:	7e1b      	ldrb	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_FLASHEx_Erase+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e058      	b.n	80043d4 <HAL_FLASHEx_Erase+0xd0>
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_FLASHEx_Erase+0xd8>)
 8004324:	2201      	movs	r2, #1
 8004326:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004328:	f24c 3050 	movw	r0, #50000	; 0xc350
 800432c:	f7ff feaa 	bl	8004084 <FLASH_WaitForLastOperation>
 8004330:	4603      	mov	r3, r0
 8004332:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d148      	bne.n	80043cc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004340:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f844 	bl	80043e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800435c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004360:	f7ff fe90 	bl	8004084 <FLASH_WaitForLastOperation>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_FLASHEx_Erase+0xdc>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_FLASHEx_Erase+0xdc>)
 800436e:	f023 0304 	bic.w	r3, r3, #4
 8004372:	6113      	str	r3, [r2, #16]
 8004374:	e028      	b.n	80043c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	e01c      	b.n	80043b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	4619      	mov	r1, r3
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f000 f850 	bl	800442c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800438c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004390:	f7ff fe78 	bl	8004084 <FLASH_WaitForLastOperation>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_FLASHEx_Erase+0xdc>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <HAL_FLASHEx_Erase+0xdc>)
 800439e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80043a2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	601a      	str	r2, [r3, #0]
          break;
 80043b0:	e00a      	b.n	80043c8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3da      	bcc.n	800437e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80043c8:	f000 f878 	bl	80044bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_FLASHEx_Erase+0xd8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	761a      	strb	r2, [r3, #24]

  return status;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000574 	.word	0x20000574
 80043e0:	40023c00 	.word	0x40023c00

080043e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <FLASH_MassErase+0x44>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <FLASH_MassErase+0x44>)
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <FLASH_MassErase+0x44>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <FLASH_MassErase+0x44>)
 8004402:	f043 0304 	orr.w	r3, r3, #4
 8004406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <FLASH_MassErase+0x44>)
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	4313      	orrs	r3, r2
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <FLASH_MassErase+0x44>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6113      	str	r3, [r2, #16]
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023c00 	.word	0x40023c00

0800442c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e010      	b.n	800446a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d103      	bne.n	8004456 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800444e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e009      	b.n	800446a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d103      	bne.n	8004464 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800445c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	e002      	b.n	800446a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	490f      	ldr	r1, [pc, #60]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 8004488:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800448c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4313      	orrs	r3, r2
 8004498:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <FLASH_Erase_Sector+0x8c>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044aa:	6113      	str	r3, [r2, #16]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40023c00 	.word	0x40023c00

080044bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d017      	beq.n	80044fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <FLASH_FlushCaches+0x88>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d017      	beq.n	8004538 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <FLASH_FlushCaches+0x88>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <FLASH_FlushCaches+0x88>)
 800450e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004512:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <FLASH_FlushCaches+0x88>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <FLASH_FlushCaches+0x88>)
 800451a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <FLASH_FlushCaches+0x88>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a07      	ldr	r2, [pc, #28]	; (8004544 <FLASH_FlushCaches+0x88>)
 8004526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800452a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <FLASH_FlushCaches+0x88>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <FLASH_FlushCaches+0x88>)
 8004532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004536:	6013      	str	r3, [r2, #0]
  }
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e159      	b.n	8004818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004564:	2201      	movs	r2, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	f040 8148 	bne.w	8004812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d005      	beq.n	800459a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004596:	2b02      	cmp	r3, #2
 8004598:	d130      	bne.n	80045fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d0:	2201      	movs	r2, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 0201 	and.w	r2, r3, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b03      	cmp	r3, #3
 8004606:	d017      	beq.n	8004638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d123      	bne.n	800468c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	220f      	movs	r2, #15
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	08da      	lsrs	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3208      	adds	r2, #8
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0203 	and.w	r2, r3, #3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a2 	beq.w	8004812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	4a56      	ldr	r2, [pc, #344]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046dc:	6453      	str	r3, [r2, #68]	; 0x44
 80046de:	4b54      	ldr	r3, [pc, #336]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ea:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_GPIO_Init+0x2ec>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a49      	ldr	r2, [pc, #292]	; (8004838 <HAL_GPIO_Init+0x2f0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d019      	beq.n	800474a <HAL_GPIO_Init+0x202>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a48      	ldr	r2, [pc, #288]	; (800483c <HAL_GPIO_Init+0x2f4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x1fe>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a47      	ldr	r2, [pc, #284]	; (8004840 <HAL_GPIO_Init+0x2f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00d      	beq.n	8004742 <HAL_GPIO_Init+0x1fa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a46      	ldr	r2, [pc, #280]	; (8004844 <HAL_GPIO_Init+0x2fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <HAL_GPIO_Init+0x1f6>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a45      	ldr	r2, [pc, #276]	; (8004848 <HAL_GPIO_Init+0x300>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_GPIO_Init+0x1f2>
 8004736:	2304      	movs	r3, #4
 8004738:	e008      	b.n	800474c <HAL_GPIO_Init+0x204>
 800473a:	2307      	movs	r3, #7
 800473c:	e006      	b.n	800474c <HAL_GPIO_Init+0x204>
 800473e:	2303      	movs	r3, #3
 8004740:	e004      	b.n	800474c <HAL_GPIO_Init+0x204>
 8004742:	2302      	movs	r3, #2
 8004744:	e002      	b.n	800474c <HAL_GPIO_Init+0x204>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_GPIO_Init+0x204>
 800474a:	2300      	movs	r3, #0
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	f002 0203 	and.w	r2, r2, #3
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	4093      	lsls	r3, r2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475c:	4935      	ldr	r1, [pc, #212]	; (8004834 <HAL_GPIO_Init+0x2ec>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3302      	adds	r3, #2
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <HAL_GPIO_Init+0x304>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <HAL_GPIO_Init+0x304>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004794:	4b2d      	ldr	r3, [pc, #180]	; (800484c <HAL_GPIO_Init+0x304>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_GPIO_Init+0x304>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_GPIO_Init+0x304>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <HAL_GPIO_Init+0x304>)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_GPIO_Init+0x304>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_GPIO_Init+0x304>)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3301      	adds	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	f67f aea2 	bls.w	8004564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40013800 	.word	0x40013800
 8004838:	40020000 	.word	0x40020000
 800483c:	40020400 	.word	0x40020400
 8004840:	40020800 	.word	0x40020800
 8004844:	40020c00 	.word	0x40020c00
 8004848:	40021000 	.word	0x40021000
 800484c:	40013c00 	.word	0x40013c00

08004850 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e0bb      	b.n	80049e4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800486c:	2201      	movs	r2, #1
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	f040 80ab 	bne.w	80049de <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004888:	4a5c      	ldr	r2, [pc, #368]	; (80049fc <HAL_GPIO_DeInit+0x1ac>)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3302      	adds	r3, #2
 8004890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004894:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	220f      	movs	r2, #15
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a54      	ldr	r2, [pc, #336]	; (8004a00 <HAL_GPIO_DeInit+0x1b0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d019      	beq.n	80048e6 <HAL_GPIO_DeInit+0x96>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a53      	ldr	r2, [pc, #332]	; (8004a04 <HAL_GPIO_DeInit+0x1b4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_GPIO_DeInit+0x92>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_GPIO_DeInit+0x1b8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00d      	beq.n	80048de <HAL_GPIO_DeInit+0x8e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <HAL_GPIO_DeInit+0x1bc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <HAL_GPIO_DeInit+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a50      	ldr	r2, [pc, #320]	; (8004a10 <HAL_GPIO_DeInit+0x1c0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_GPIO_DeInit+0x86>
 80048d2:	2304      	movs	r3, #4
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_DeInit+0x98>
 80048d6:	2307      	movs	r3, #7
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_DeInit+0x98>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_DeInit+0x98>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_DeInit+0x98>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_DeInit+0x98>
 80048e6:	2300      	movs	r3, #0
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d132      	bne.n	800495e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43db      	mvns	r3, r3
 8004900:	4944      	ldr	r1, [pc, #272]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 8004902:	4013      	ands	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	43db      	mvns	r3, r3
 800490e:	4941      	ldr	r1, [pc, #260]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 8004910:	4013      	ands	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004914:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	43db      	mvns	r3, r3
 800491c:	493d      	ldr	r1, [pc, #244]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 800491e:	4013      	ands	r3, r2
 8004920:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004922:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	43db      	mvns	r3, r3
 800492a:	493a      	ldr	r1, [pc, #232]	; (8004a14 <HAL_GPIO_DeInit+0x1c4>)
 800492c:	4013      	ands	r3, r2
 800492e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <HAL_GPIO_DeInit+0x1ac>)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	3302      	adds	r3, #2
 8004948:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	43da      	mvns	r2, r3
 8004950:	482a      	ldr	r0, [pc, #168]	; (80049fc <HAL_GPIO_DeInit+0x1ac>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	400a      	ands	r2, r1
 8004958:	3302      	adds	r3, #2
 800495a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	2103      	movs	r1, #3
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	08da      	lsrs	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3208      	adds	r2, #8
 800497c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	08d2      	lsrs	r2, r2, #3
 8004994:	4019      	ands	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3208      	adds	r2, #8
 800499a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	2103      	movs	r1, #3
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	2101      	movs	r1, #1
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2103      	movs	r1, #3
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	401a      	ands	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	f67f af40 	bls.w	800486c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40013800 	.word	0x40013800
 8004a00:	40020000 	.word	0x40020000
 8004a04:	40020400 	.word	0x40020400
 8004a08:	40020800 	.word	0x40020800
 8004a0c:	40020c00 	.word	0x40020c00
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40013c00 	.word	0x40013c00

08004a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
 8004a34:	e001      	b.n	8004a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	807b      	strh	r3, [r7, #2]
 8004a54:	4613      	mov	r3, r2
 8004a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a58:	787b      	ldrb	r3, [r7, #1]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a64:	e003      	b.n	8004a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a66:	887b      	ldrh	r3, [r7, #2]
 8004a68:	041a      	lsls	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	619a      	str	r2, [r3, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd fdaa 	bl	80025f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40013c00 	.word	0x40013c00

08004aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e12b      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fd f858 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b10:	f002 f8bc 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 8004b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a81      	ldr	r2, [pc, #516]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d807      	bhi.n	8004b30 <HAL_I2C_Init+0x84>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a80      	ldr	r2, [pc, #512]	; (8004d24 <HAL_I2C_Init+0x278>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf94      	ite	ls
 8004b28:	2301      	movls	r3, #1
 8004b2a:	2300      	movhi	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e006      	b.n	8004b3e <HAL_I2C_Init+0x92>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a7d      	ldr	r2, [pc, #500]	; (8004d28 <HAL_I2C_Init+0x27c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bf94      	ite	ls
 8004b38:	2301      	movls	r3, #1
 8004b3a:	2300      	movhi	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0e7      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a78      	ldr	r2, [pc, #480]	; (8004d2c <HAL_I2C_Init+0x280>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9b      	lsrs	r3, r3, #18
 8004b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a6a      	ldr	r2, [pc, #424]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d802      	bhi.n	8004b80 <HAL_I2C_Init+0xd4>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	e009      	b.n	8004b94 <HAL_I2C_Init+0xe8>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_I2C_Init+0x284>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	3301      	adds	r3, #1
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	495c      	ldr	r1, [pc, #368]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	d819      	bhi.n	8004be8 <HAL_I2C_Init+0x13c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e59      	subs	r1, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bc8:	400b      	ands	r3, r1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_I2C_Init+0x138>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e59      	subs	r1, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	e051      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be4:	2304      	movs	r3, #4
 8004be6:	e04f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_I2C_Init+0x168>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e012      	b.n	8004c3a <HAL_I2C_Init+0x18e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Init+0x196>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10e      	bne.n	8004c68 <HAL_I2C_Init+0x1bc>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1e58      	subs	r0, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	440b      	add	r3, r1
 8004c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	e00f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e58      	subs	r0, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	0099      	lsls	r1, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	6809      	ldr	r1, [r1, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6911      	ldr	r1, [r2, #16]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	000186a0 	.word	0x000186a0
 8004d24:	001e847f 	.word	0x001e847f
 8004d28:	003d08ff 	.word	0x003d08ff
 8004d2c:	431bde83 	.word	0x431bde83
 8004d30:	10624dd3 	.word	0x10624dd3

08004d34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e021      	b.n	8004d8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	; 0x24
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc ff5a 	bl	8001c18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	817b      	strh	r3, [r7, #10]
 8004da6:	460b      	mov	r3, r1
 8004da8:	813b      	strh	r3, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dae:	f7fe ff0f 	bl	8003bd0 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	f040 80d9 	bne.w	8004f74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2319      	movs	r3, #25
 8004dc8:	2201      	movs	r2, #1
 8004dca:	496d      	ldr	r1, [pc, #436]	; (8004f80 <HAL_I2C_Mem_Write+0x1ec>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fc8d 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0cc      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_I2C_Mem_Write+0x56>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0c5      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d007      	beq.n	8004e10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2221      	movs	r2, #33	; 0x21
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a3a      	ldr	r2, [r7, #32]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a4d      	ldr	r2, [pc, #308]	; (8004f84 <HAL_I2C_Mem_Write+0x1f0>)
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e52:	88f8      	ldrh	r0, [r7, #6]
 8004e54:	893a      	ldrh	r2, [r7, #8]
 8004e56:	8979      	ldrh	r1, [r7, #10]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4603      	mov	r3, r0
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fac4 	bl	80053f0 <I2C_RequestMemoryWrite>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d052      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e081      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fd0e 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d107      	bne.n	8004e9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e06b      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d11b      	bne.n	8004f14 <HAL_I2C_Mem_Write+0x180>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1aa      	bne.n	8004e72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fcfa 	bl	800591a <I2C_WaitOnBTFFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00d      	beq.n	8004f48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d107      	bne.n	8004f44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e016      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	00100002 	.word	0x00100002
 8004f84:	ffff0000 	.word	0xffff0000

08004f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	817b      	strh	r3, [r7, #10]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	813b      	strh	r3, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fa2:	f7fe fe15 	bl	8003bd0 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	f040 8208 	bne.w	80053c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2319      	movs	r3, #25
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	497b      	ldr	r1, [pc, #492]	; (80051ac <HAL_I2C_Mem_Read+0x224>)
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb93 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e1fb      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_Mem_Read+0x56>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e1f4      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d007      	beq.n	8005004 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2222      	movs	r2, #34	; 0x22
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2240      	movs	r2, #64	; 0x40
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_I2C_Mem_Read+0x228>)
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005046:	88f8      	ldrh	r0, [r7, #6]
 8005048:	893a      	ldrh	r2, [r7, #8]
 800504a:	8979      	ldrh	r1, [r7, #10]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4603      	mov	r3, r0
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fa60 	bl	800551c <I2C_RequestMemoryRead>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e1b0      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d113      	bne.n	8005096 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	623b      	str	r3, [r7, #32]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	623b      	str	r3, [r7, #32]
 8005082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e184      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	2b01      	cmp	r3, #1
 800509c:	d11b      	bne.n	80050d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e164      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d11b      	bne.n	8005116 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	e144      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800512c:	e138      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	2b03      	cmp	r3, #3
 8005134:	f200 80f1 	bhi.w	800531a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	2b01      	cmp	r3, #1
 800513e:	d123      	bne.n	8005188 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fc29 	bl	800599c <I2C_WaitOnRXNEFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e139      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005186:	e10b      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	2b02      	cmp	r3, #2
 800518e:	d14e      	bne.n	800522e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	2200      	movs	r2, #0
 8005198:	4906      	ldr	r1, [pc, #24]	; (80051b4 <HAL_I2C_Mem_Read+0x22c>)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 faa6 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e10e      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
 80051aa:	bf00      	nop
 80051ac:	00100002 	.word	0x00100002
 80051b0:	ffff0000 	.word	0xffff0000
 80051b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800522c:	e0b8      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	4966      	ldr	r1, [pc, #408]	; (80053d0 <HAL_I2C_Mem_Read+0x448>)
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fa57 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0bf      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2200      	movs	r2, #0
 8005292:	494f      	ldr	r1, [pc, #316]	; (80053d0 <HAL_I2C_Mem_Read+0x448>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa29 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e091      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005318:	e042      	b.n	80053a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fb3c 	bl	800599c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e04c      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d118      	bne.n	80053a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f47f aec2 	bne.w	800512e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	00010004 	.word	0x00010004

080053d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2200      	movs	r2, #0
 8005422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f960 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005440:	d103      	bne.n	800544a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e05f      	b.n	800550e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800544e:	897b      	ldrh	r3, [r7, #10]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800545c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	492d      	ldr	r1, [pc, #180]	; (8005518 <I2C_RequestMemoryWrite+0x128>)
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f998 	bl	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e04c      	b.n	800550e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	6a39      	ldr	r1, [r7, #32]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fa02 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d107      	bne.n	80054b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e02b      	b.n	800550e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054bc:	893b      	ldrh	r3, [r7, #8]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	611a      	str	r2, [r3, #16]
 80054c6:	e021      	b.n	800550c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c8:	893b      	ldrh	r3, [r7, #8]
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d8:	6a39      	ldr	r1, [r7, #32]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f9dc 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d107      	bne.n	80054fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e005      	b.n	800550e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005502:	893b      	ldrh	r3, [r7, #8]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	00010002 	.word	0x00010002

0800551c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4603      	mov	r3, r0
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	460b      	mov	r3, r1
 8005530:	813b      	strh	r3, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2200      	movs	r2, #0
 800555e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f8c2 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d103      	bne.n	8005586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0aa      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	4952      	ldr	r1, [pc, #328]	; (80056e8 <I2C_RequestMemoryRead+0x1cc>)
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f8fa 	bl	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e097      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	6a39      	ldr	r1, [r7, #32]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f964 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d107      	bne.n	80055ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e076      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f8:	893b      	ldrh	r3, [r7, #8]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	611a      	str	r2, [r3, #16]
 8005602:	e021      	b.n	8005648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005604:	893b      	ldrh	r3, [r7, #8]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	b29b      	uxth	r3, r3
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	6a39      	ldr	r1, [r7, #32]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f93e 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b04      	cmp	r3, #4
 8005628:	d107      	bne.n	800563a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e050      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563e:	893b      	ldrh	r3, [r7, #8]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564a:	6a39      	ldr	r1, [r7, #32]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f923 	bl	8005898 <I2C_WaitOnTXEFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	2b04      	cmp	r3, #4
 800565e:	d107      	bne.n	8005670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e035      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	2200      	movs	r2, #0
 800568c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f82b 	bl	80056ec <I2C_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	d103      	bne.n	80056b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e013      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056b8:	897b      	ldrh	r3, [r7, #10]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	4906      	ldr	r1, [pc, #24]	; (80056e8 <I2C_RequestMemoryRead+0x1cc>)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f863 	bl	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	00010002 	.word	0x00010002

080056ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056fc:	e025      	b.n	800574a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005704:	d021      	beq.n	800574a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fe fa63 	bl	8003bd0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e023      	b.n	8005792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10d      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	e00c      	b.n	800578a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	43da      	mvns	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d0b6      	beq.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057a8:	e051      	b.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b8:	d123      	bne.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0204 	orr.w	r2, r3, #4
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e046      	b.n	8005890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005808:	d021      	beq.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fe f9e1 	bl	8003bd0 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d116      	bne.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e020      	b.n	8005890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10c      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e00b      	b.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d18d      	bne.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a4:	e02d      	b.n	8005902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8ce 	bl	8005a48 <I2C_IsAcknowledgeFailed>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e02d      	b.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058bc:	d021      	beq.n	8005902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fe f987 	bl	8003bd0 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d116      	bne.n	8005902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e007      	b.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d1ca      	bne.n	80058a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005926:	e02d      	b.n	8005984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f88d 	bl	8005a48 <I2C_IsAcknowledgeFailed>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e02d      	b.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593e:	d021      	beq.n	8005984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005940:	f7fe f946 	bl	8003bd0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	429a      	cmp	r2, r3
 800594e:	d302      	bcc.n	8005956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e007      	b.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d1ca      	bne.n	8005928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a8:	e042      	b.n	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d119      	bne.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0210 	mvn.w	r2, #16
 80059c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e029      	b.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fe f8f0 	bl	8003bd0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e007      	b.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d1b5      	bne.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5e:	d11b      	bne.n	8005a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f043 0204 	orr.w	r2, r3, #4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e128      	b.n	8005d0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a90      	ldr	r2, [pc, #576]	; (8005d14 <HAL_I2S_Init+0x26c>)
 8005ad2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fc f91f 	bl	8001d18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005af0:	f023 030f 	bic.w	r3, r3, #15
 8005af4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2202      	movs	r2, #2
 8005afc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d060      	beq.n	8005bc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b0e:	2310      	movs	r3, #16
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e001      	b.n	8005b18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d802      	bhi.n	8005b26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b26:	2001      	movs	r0, #1
 8005b28:	f001 f9c8 	bl	8006ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b36:	d125      	bne.n	8005b84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	461a      	mov	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	3305      	adds	r3, #5
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	e01f      	b.n	8005ba2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	3305      	adds	r3, #5
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e00e      	b.n	8005ba2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	3305      	adds	r3, #5
 8005ba0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4a5c      	ldr	r2, [pc, #368]	; (8005d18 <HAL_I2S_Init+0x270>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	08db      	lsrs	r3, r3, #3
 8005bac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	e003      	b.n	8005bd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d902      	bls.n	8005bdc <HAL_I2S_Init+0x134>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	d907      	bls.n	8005bec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e08f      	b.n	8005d0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	ea42 0103 	orr.w	r1, r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c0a:	f023 030f 	bic.w	r3, r3, #15
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6851      	ldr	r1, [r2, #4]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	4311      	orrs	r1, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68d2      	ldr	r2, [r2, #12]
 8005c1c:	4311      	orrs	r1, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6992      	ldr	r2, [r2, #24]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d161      	bne.n	8005cfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_I2S_Init+0x274>)
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a37      	ldr	r2, [pc, #220]	; (8005d20 <HAL_I2S_Init+0x278>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d101      	bne.n	8005c4c <HAL_I2S_Init+0x1a4>
 8005c48:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_I2S_Init+0x27c>)
 8005c4a:	e001      	b.n	8005c50 <HAL_I2S_Init+0x1a8>
 8005c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4932      	ldr	r1, [pc, #200]	; (8005d20 <HAL_I2S_Init+0x278>)
 8005c58:	428a      	cmp	r2, r1
 8005c5a:	d101      	bne.n	8005c60 <HAL_I2S_Init+0x1b8>
 8005c5c:	4a31      	ldr	r2, [pc, #196]	; (8005d24 <HAL_I2S_Init+0x27c>)
 8005c5e:	e001      	b.n	8005c64 <HAL_I2S_Init+0x1bc>
 8005c60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c68:	f023 030f 	bic.w	r3, r3, #15
 8005c6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <HAL_I2S_Init+0x278>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_I2S_Init+0x1d4>
 8005c78:	4b2a      	ldr	r3, [pc, #168]	; (8005d24 <HAL_I2S_Init+0x27c>)
 8005c7a:	e001      	b.n	8005c80 <HAL_I2S_Init+0x1d8>
 8005c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c80:	2202      	movs	r2, #2
 8005c82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <HAL_I2S_Init+0x278>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <HAL_I2S_Init+0x1ea>
 8005c8e:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <HAL_I2S_Init+0x27c>)
 8005c90:	e001      	b.n	8005c96 <HAL_I2S_Init+0x1ee>
 8005c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca2:	d003      	beq.n	8005cac <HAL_I2S_Init+0x204>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e001      	b.n	8005cb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	897b      	ldrh	r3, [r7, #10]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ce4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <HAL_I2S_Init+0x278>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_I2S_Init+0x24c>
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <HAL_I2S_Init+0x27c>)
 8005cf2:	e001      	b.n	8005cf8 <HAL_I2S_Init+0x250>
 8005cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf8:	897a      	ldrh	r2, [r7, #10]
 8005cfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	08005de3 	.word	0x08005de3
 8005d18:	cccccccd 	.word	0xcccccccd
 8005d1c:	08005ef9 	.word	0x08005ef9
 8005d20:	40003800 	.word	0x40003800
 8005d24:	40003400 	.word	0x40003400

08005d28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fd fe5e 	bl	8003a38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	b292      	uxth	r2, r2
 8005d98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10e      	bne.n	8005dda <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fd fe4f 	bl	8003a78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d13a      	bne.n	8005e74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d109      	bne.n	8005e1c <I2S_IRQHandler+0x3a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d102      	bne.n	8005e1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ffb4 	bl	8005d84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d126      	bne.n	8005e74 <I2S_IRQHandler+0x92>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d11f      	bne.n	8005e74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f043 0202 	orr.w	r2, r3, #2
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fd fe1a 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d136      	bne.n	8005eee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d109      	bne.n	8005e9e <I2S_IRQHandler+0xbc>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d102      	bne.n	8005e9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff45 	bl	8005d28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d122      	bne.n	8005eee <I2S_IRQHandler+0x10c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d11b      	bne.n	8005eee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ec4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7fd fddd 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a92      	ldr	r2, [pc, #584]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005f12:	4b92      	ldr	r3, [pc, #584]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f14:	e001      	b.n	8005f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a8b      	ldr	r2, [pc, #556]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d101      	bne.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f30:	4b8a      	ldr	r3, [pc, #552]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f32:	e001      	b.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f44:	d004      	beq.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8099 	bne.w	8006082 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d107      	bne.n	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f925 	bl	80061b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9c8 	bl	8006314 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d13a      	bne.n	8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d035      	beq.n	8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6e      	ldr	r2, [pc, #440]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005fa2:	4b6e      	ldr	r3, [pc, #440]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa4:	e001      	b.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4969      	ldr	r1, [pc, #420]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	d101      	bne.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005fb6:	4b69      	ldr	r3, [pc, #420]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb8:	e001      	b.n	8005fbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f043 0202 	orr.w	r2, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fd fd52 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	f040 80c3 	bne.w	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80bd 	beq.w	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800602a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a49      	ldr	r2, [pc, #292]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006036:	4b49      	ldr	r3, [pc, #292]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006038:	e001      	b.n	800603e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800603a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4944      	ldr	r1, [pc, #272]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006046:	428b      	cmp	r3, r1
 8006048:	d101      	bne.n	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800604a:	4b44      	ldr	r3, [pc, #272]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800604c:	e001      	b.n	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800604e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006052:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006056:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006058:	2300      	movs	r3, #0
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fd fd14 	bl	8003aa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006080:	e089      	b.n	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d107      	bne.n	800609c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8be 	bl	8006218 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d107      	bne.n	80060b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8fd 	bl	80062b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d12f      	bne.n	8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d02a      	beq.n	8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e6:	e001      	b.n	80060ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4919      	ldr	r1, [pc, #100]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f4:	428b      	cmp	r3, r1
 80060f6:	d101      	bne.n	80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060f8:	4b18      	ldr	r3, [pc, #96]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060fa:	e001      	b.n	8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006104:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f043 0202 	orr.w	r2, r3, #2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fd fcc4 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b08      	cmp	r3, #8
 8006128:	d136      	bne.n	8006198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d031      	beq.n	8006198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a07      	ldr	r2, [pc, #28]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006140:	e001      	b.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4902      	ldr	r1, [pc, #8]	; (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800614e:	428b      	cmp	r3, r1
 8006150:	d106      	bne.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006152:	4b02      	ldr	r3, [pc, #8]	; (800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006154:	e006      	b.n	8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006156:	bf00      	nop
 8006158:	40003800 	.word	0x40003800
 800615c:	40003400 	.word	0x40003400
 8006160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006164:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006168:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006178:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fd fc8a 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006194:	e000      	b.n	8006198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006196:	bf00      	nop
}
 8006198:	bf00      	nop
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c99      	adds	r1, r3, #2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6251      	str	r1, [r2, #36]	; 0x24
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d113      	bne.n	800620e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ffc9 	bl	80061a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	1c99      	adds	r1, r3, #2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6251      	str	r1, [r2, #36]	; 0x24
 800622a:	8819      	ldrh	r1, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <I2SEx_TxISR_I2SExt+0x22>
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <I2SEx_TxISR_I2SExt+0x94>)
 8006238:	e001      	b.n	800623e <I2SEx_TxISR_I2SExt+0x26>
 800623a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800623e:	460a      	mov	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d121      	bne.n	800629e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <I2SEx_TxISR_I2SExt+0x50>
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <I2SEx_TxISR_I2SExt+0x94>)
 8006266:	e001      	b.n	800626c <I2SEx_TxISR_I2SExt+0x54>
 8006268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	490d      	ldr	r1, [pc, #52]	; (80062a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006274:	428b      	cmp	r3, r1
 8006276:	d101      	bne.n	800627c <I2SEx_TxISR_I2SExt+0x64>
 8006278:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <I2SEx_TxISR_I2SExt+0x94>)
 800627a:	e001      	b.n	8006280 <I2SEx_TxISR_I2SExt+0x68>
 800627c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006284:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d106      	bne.n	800629e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ff81 	bl	80061a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40003800 	.word	0x40003800
 80062ac:	40003400 	.word	0x40003400

080062b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68d8      	ldr	r0, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	1c99      	adds	r1, r3, #2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80062c8:	b282      	uxth	r2, r0
 80062ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d113      	bne.n	800630c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ff4a 	bl	80061a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <I2SEx_RxISR_I2SExt+0x16>
 8006326:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006328:	e001      	b.n	800632e <I2SEx_RxISR_I2SExt+0x1a>
 800632a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800632e:	68d8      	ldr	r0, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	1c99      	adds	r1, r3, #2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	62d1      	str	r1, [r2, #44]	; 0x2c
 800633a:	b282      	uxth	r2, r0
 800633c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d121      	bne.n	800639a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <I2SEx_RxISR_I2SExt+0x90>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d101      	bne.n	8006364 <I2SEx_RxISR_I2SExt+0x50>
 8006360:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006362:	e001      	b.n	8006368 <I2SEx_RxISR_I2SExt+0x54>
 8006364:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	490d      	ldr	r1, [pc, #52]	; (80063a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006370:	428b      	cmp	r3, r1
 8006372:	d101      	bne.n	8006378 <I2SEx_RxISR_I2SExt+0x64>
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006376:	e001      	b.n	800637c <I2SEx_RxISR_I2SExt+0x68>
 8006378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800637c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006380:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ff03 	bl	80061a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40003800 	.word	0x40003800
 80063a8:	40003400 	.word	0x40003400

080063ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e267      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d075      	beq.n	80064b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ca:	4b88      	ldr	r3, [pc, #544]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d00c      	beq.n	80063f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d6:	4b85      	ldr	r3, [pc, #532]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d112      	bne.n	8006408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e2:	4b82      	ldr	r3, [pc, #520]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ee:	d10b      	bne.n	8006408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f0:	4b7e      	ldr	r3, [pc, #504]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d05b      	beq.n	80064b4 <HAL_RCC_OscConfig+0x108>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d157      	bne.n	80064b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e242      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006410:	d106      	bne.n	8006420 <HAL_RCC_OscConfig+0x74>
 8006412:	4b76      	ldr	r3, [pc, #472]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a75      	ldr	r2, [pc, #468]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e01d      	b.n	800645c <HAL_RCC_OscConfig+0xb0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006428:	d10c      	bne.n	8006444 <HAL_RCC_OscConfig+0x98>
 800642a:	4b70      	ldr	r3, [pc, #448]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6f      	ldr	r2, [pc, #444]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	4b6d      	ldr	r3, [pc, #436]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6c      	ldr	r2, [pc, #432]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800643c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e00b      	b.n	800645c <HAL_RCC_OscConfig+0xb0>
 8006444:	4b69      	ldr	r3, [pc, #420]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a68      	ldr	r2, [pc, #416]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800644a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	4b66      	ldr	r3, [pc, #408]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a65      	ldr	r2, [pc, #404]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800645a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d013      	beq.n	800648c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006464:	f7fd fbb4 	bl	8003bd0 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800646c:	f7fd fbb0 	bl	8003bd0 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b64      	cmp	r3, #100	; 0x64
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e207      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647e:	4b5b      	ldr	r3, [pc, #364]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0xc0>
 800648a:	e014      	b.n	80064b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fd fba0 	bl	8003bd0 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006494:	f7fd fb9c 	bl	8003bd0 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b64      	cmp	r3, #100	; 0x64
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e1f3      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a6:	4b51      	ldr	r3, [pc, #324]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0xe8>
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d063      	beq.n	800658a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064c2:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ce:	4b47      	ldr	r3, [pc, #284]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d11c      	bne.n	8006514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064da:	4b44      	ldr	r3, [pc, #272]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d116      	bne.n	8006514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e6:	4b41      	ldr	r3, [pc, #260]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_RCC_OscConfig+0x152>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e1c7      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fe:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4937      	ldr	r1, [pc, #220]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800650e:	4313      	orrs	r3, r2
 8006510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	e03a      	b.n	800658a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d020      	beq.n	800655e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800651c:	4b34      	ldr	r3, [pc, #208]	; (80065f0 <HAL_RCC_OscConfig+0x244>)
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006522:	f7fd fb55 	bl	8003bd0 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800652a:	f7fd fb51 	bl	8003bd0 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e1a8      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653c:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006548:	4b28      	ldr	r3, [pc, #160]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	4925      	ldr	r1, [pc, #148]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]
 800655c:	e015      	b.n	800658a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <HAL_RCC_OscConfig+0x244>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fd fb34 	bl	8003bd0 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800656c:	f7fd fb30 	bl	8003bd0 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e187      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657e:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d036      	beq.n	8006604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659e:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <HAL_RCC_OscConfig+0x248>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fd fb14 	bl	8003bd0 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ac:	f7fd fb10 	bl	8003bd0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e167      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <HAL_RCC_OscConfig+0x240>)
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0x200>
 80065ca:	e01b      	b.n	8006604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <HAL_RCC_OscConfig+0x248>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d2:	f7fd fafd 	bl	8003bd0 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d8:	e00e      	b.n	80065f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065da:	f7fd faf9 	bl	8003bd0 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d907      	bls.n	80065f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e150      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
 80065ec:	40023800 	.word	0x40023800
 80065f0:	42470000 	.word	0x42470000
 80065f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f8:	4b88      	ldr	r3, [pc, #544]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80065fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1ea      	bne.n	80065da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8097 	beq.w	8006740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006616:	4b81      	ldr	r3, [pc, #516]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10f      	bne.n	8006642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	4b7d      	ldr	r3, [pc, #500]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	4a7c      	ldr	r2, [pc, #496]	; (800681c <HAL_RCC_OscConfig+0x470>)
 800662c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006630:	6413      	str	r3, [r2, #64]	; 0x40
 8006632:	4b7a      	ldr	r3, [pc, #488]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006642:	4b77      	ldr	r3, [pc, #476]	; (8006820 <HAL_RCC_OscConfig+0x474>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d118      	bne.n	8006680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664e:	4b74      	ldr	r3, [pc, #464]	; (8006820 <HAL_RCC_OscConfig+0x474>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a73      	ldr	r2, [pc, #460]	; (8006820 <HAL_RCC_OscConfig+0x474>)
 8006654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800665a:	f7fd fab9 	bl	8003bd0 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006662:	f7fd fab5 	bl	8003bd0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e10c      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006674:	4b6a      	ldr	r3, [pc, #424]	; (8006820 <HAL_RCC_OscConfig+0x474>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f0      	beq.n	8006662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d106      	bne.n	8006696 <HAL_RCC_OscConfig+0x2ea>
 8006688:	4b64      	ldr	r3, [pc, #400]	; (800681c <HAL_RCC_OscConfig+0x470>)
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	4a63      	ldr	r2, [pc, #396]	; (800681c <HAL_RCC_OscConfig+0x470>)
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	6713      	str	r3, [r2, #112]	; 0x70
 8006694:	e01c      	b.n	80066d0 <HAL_RCC_OscConfig+0x324>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b05      	cmp	r3, #5
 800669c:	d10c      	bne.n	80066b8 <HAL_RCC_OscConfig+0x30c>
 800669e:	4b5f      	ldr	r3, [pc, #380]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a5e      	ldr	r2, [pc, #376]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066a4:	f043 0304 	orr.w	r3, r3, #4
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
 80066aa:	4b5c      	ldr	r3, [pc, #368]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a5b      	ldr	r2, [pc, #364]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
 80066b6:	e00b      	b.n	80066d0 <HAL_RCC_OscConfig+0x324>
 80066b8:	4b58      	ldr	r3, [pc, #352]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	4a57      	ldr	r2, [pc, #348]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	; 0x70
 80066c4:	4b55      	ldr	r3, [pc, #340]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	4a54      	ldr	r2, [pc, #336]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066ca:	f023 0304 	bic.w	r3, r3, #4
 80066ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d015      	beq.n	8006704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fd fa7a 	bl	8003bd0 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066de:	e00a      	b.n	80066f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e0:	f7fd fa76 	bl	8003bd0 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e0cb      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f6:	4b49      	ldr	r3, [pc, #292]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0ee      	beq.n	80066e0 <HAL_RCC_OscConfig+0x334>
 8006702:	e014      	b.n	800672e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006704:	f7fd fa64 	bl	8003bd0 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800670a:	e00a      	b.n	8006722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670c:	f7fd fa60 	bl	8003bd0 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e0b5      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006722:	4b3e      	ldr	r3, [pc, #248]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ee      	bne.n	800670c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d105      	bne.n	8006740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006734:	4b39      	ldr	r3, [pc, #228]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	4a38      	ldr	r2, [pc, #224]	; (800681c <HAL_RCC_OscConfig+0x470>)
 800673a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 80a1 	beq.w	800688c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800674a:	4b34      	ldr	r3, [pc, #208]	; (800681c <HAL_RCC_OscConfig+0x470>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b08      	cmp	r3, #8
 8006754:	d05c      	beq.n	8006810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d141      	bne.n	80067e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675e:	4b31      	ldr	r3, [pc, #196]	; (8006824 <HAL_RCC_OscConfig+0x478>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006764:	f7fd fa34 	bl	8003bd0 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676c:	f7fd fa30 	bl	8003bd0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e087      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677e:	4b27      	ldr	r3, [pc, #156]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	3b01      	subs	r3, #1
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	491b      	ldr	r1, [pc, #108]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x478>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fd fa09 	bl	8003bd0 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fd fa05 	bl	8003bd0 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e05c      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d4:	4b11      	ldr	r3, [pc, #68]	; (800681c <HAL_RCC_OscConfig+0x470>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x416>
 80067e0:	e054      	b.n	800688c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <HAL_RCC_OscConfig+0x478>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e8:	f7fd f9f2 	bl	8003bd0 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f0:	f7fd f9ee 	bl	8003bd0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e045      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006802:	4b06      	ldr	r3, [pc, #24]	; (800681c <HAL_RCC_OscConfig+0x470>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x444>
 800680e:	e03d      	b.n	800688c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d107      	bne.n	8006828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e038      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
 800681c:	40023800 	.word	0x40023800
 8006820:	40007000 	.word	0x40007000
 8006824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x4ec>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d028      	beq.n	8006888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d121      	bne.n	8006888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d11a      	bne.n	8006888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006858:	4013      	ands	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800685e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006860:	4293      	cmp	r3, r2
 8006862:	d111      	bne.n	8006888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	3b01      	subs	r3, #1
 8006872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d107      	bne.n	8006888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800

0800689c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0cc      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d90c      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0b8      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006908:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	494d      	ldr	r1, [pc, #308]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	4313      	orrs	r3, r2
 8006924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d044      	beq.n	80069bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d119      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d003      	beq.n	800695a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006956:	2b03      	cmp	r3, #3
 8006958:	d107      	bne.n	800696a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695a:	4b3f      	ldr	r3, [pc, #252]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e06f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696a:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e067      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800697a:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 0203 	bic.w	r2, r3, #3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4934      	ldr	r1, [pc, #208]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800698c:	f7fd f920 	bl	8003bd0 <HAL_GetTick>
 8006990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006992:	e00a      	b.n	80069aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006994:	f7fd f91c 	bl	8003bd0 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e04f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 020c 	and.w	r2, r3, #12
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d1eb      	bne.n	8006994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d20c      	bcs.n	80069e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_RCC_ClockConfig+0x1b8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e032      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4916      	ldr	r1, [pc, #88]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	490e      	ldr	r1, [pc, #56]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a22:	f000 f821 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	490a      	ldr	r1, [pc, #40]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_ClockConfig+0x1c8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd f880 	bl	8003b48 <HAL_InitTick>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40023c00 	.word	0x40023c00
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	0800a4e0 	.word	0x0800a4e0
 8006a60:	20000000 	.word	0x20000000
 8006a64:	20000070 	.word	0x20000070

08006a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a6c:	b094      	sub	sp, #80	; 0x50
 8006a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
 8006a74:	2300      	movs	r3, #0
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	2300      	movs	r3, #0
 8006a7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a80:	4b79      	ldr	r3, [pc, #484]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d00d      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	f200 80e1 	bhi.w	8006c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x34>
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d003      	beq.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a9a:	e0db      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a9c:	4b73      	ldr	r3, [pc, #460]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006aa0:	e0db      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aa2:	4b73      	ldr	r3, [pc, #460]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa6:	e0d8      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aa8:	4b6f      	ldr	r3, [pc, #444]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ab2:	4b6d      	ldr	r3, [pc, #436]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d063      	beq.n	8006b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006abe:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	099b      	lsrs	r3, r3, #6
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ada:	4622      	mov	r2, r4
 8006adc:	462b      	mov	r3, r5
 8006ade:	f04f 0000 	mov.w	r0, #0
 8006ae2:	f04f 0100 	mov.w	r1, #0
 8006ae6:	0159      	lsls	r1, r3, #5
 8006ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aec:	0150      	lsls	r0, r2, #5
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4621      	mov	r1, r4
 8006af4:	1a51      	subs	r1, r2, r1
 8006af6:	6139      	str	r1, [r7, #16]
 8006af8:	4629      	mov	r1, r5
 8006afa:	eb63 0301 	sbc.w	r3, r3, r1
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	018b      	lsls	r3, r1, #6
 8006b10:	4651      	mov	r1, sl
 8006b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b16:	4651      	mov	r1, sl
 8006b18:	018a      	lsls	r2, r1, #6
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006b20:	4659      	mov	r1, fp
 8006b22:	eb63 0901 	sbc.w	r9, r3, r1
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b3a:	4690      	mov	r8, r2
 8006b3c:	4699      	mov	r9, r3
 8006b3e:	4623      	mov	r3, r4
 8006b40:	eb18 0303 	adds.w	r3, r8, r3
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	462b      	mov	r3, r5
 8006b48:	eb49 0303 	adc.w	r3, r9, r3
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	024b      	lsls	r3, r1, #9
 8006b5e:	4621      	mov	r1, r4
 8006b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b64:	4621      	mov	r1, r4
 8006b66:	024a      	lsls	r2, r1, #9
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	2200      	movs	r2, #0
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b78:	f7f9 ff70 	bl	8000a5c <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4613      	mov	r3, r2
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b84:	e058      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b86:	4b38      	ldr	r3, [pc, #224]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	099b      	lsrs	r3, r3, #6
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	4611      	mov	r1, r2
 8006b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	0159      	lsls	r1, r3, #5
 8006bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bb2:	0150      	lsls	r0, r2, #5
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4641      	mov	r1, r8
 8006bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8006bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	00eb      	lsls	r3, r5, #3
 8006bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bee:	00e2      	lsls	r2, r4, #3
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	4643      	mov	r3, r8
 8006bf6:	18e3      	adds	r3, r4, r3
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	eb45 0303 	adc.w	r3, r5, r3
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c0e:	4629      	mov	r1, r5
 8006c10:	028b      	lsls	r3, r1, #10
 8006c12:	4621      	mov	r1, r4
 8006c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c18:	4621      	mov	r1, r4
 8006c1a:	028a      	lsls	r2, r1, #10
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c22:	2200      	movs	r2, #0
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	61fa      	str	r2, [r7, #28]
 8006c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c2c:	f7f9 ff16 	bl	8000a5c <__aeabi_uldivmod>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4613      	mov	r3, r2
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c38:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	3301      	adds	r3, #1
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c52:	e002      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3750      	adds	r7, #80	; 0x50
 8006c60:	46bd      	mov	sp, r7
 8006c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c66:	bf00      	nop
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	007a1200 	.word	0x007a1200

08006c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c78:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000000 	.word	0x20000000

08006c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c90:	f7ff fff0 	bl	8006c74 <HAL_RCC_GetHCLKFreq>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	0a9b      	lsrs	r3, r3, #10
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	4903      	ldr	r1, [pc, #12]	; (8006cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca2:	5ccb      	ldrb	r3, [r1, r3]
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	0800a4f0 	.word	0x0800a4f0

08006cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cb8:	f7ff ffdc 	bl	8006c74 <HAL_RCC_GetHCLKFreq>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	0b5b      	lsrs	r3, r3, #13
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	4903      	ldr	r1, [pc, #12]	; (8006cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cca:	5ccb      	ldrb	r3, [r1, r3]
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	0800a4f0 	.word	0x0800a4f0

08006cdc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d038      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d04:	4b68      	ldr	r3, [pc, #416]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0a:	f7fc ff61 	bl	8003bd0 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d12:	f7fc ff5d 	bl	8003bd0 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e0bd      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d24:	4b61      	ldr	r3, [pc, #388]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	019b      	lsls	r3, r3, #6
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	071b      	lsls	r3, r3, #28
 8006d42:	495a      	ldr	r1, [pc, #360]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d4a:	4b57      	ldr	r3, [pc, #348]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d50:	f7fc ff3e 	bl	8003bd0 <HAL_GetTick>
 8006d54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d58:	f7fc ff3a 	bl	8003bd0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e09a      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d6a:	4b50      	ldr	r3, [pc, #320]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8083 	beq.w	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	4b48      	ldr	r3, [pc, #288]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	4a47      	ldr	r2, [pc, #284]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d92:	6413      	str	r3, [r2, #64]	; 0x40
 8006d94:	4b45      	ldr	r3, [pc, #276]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006da0:	4b43      	ldr	r3, [pc, #268]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a42      	ldr	r2, [pc, #264]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006daa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dac:	f7fc ff10 	bl	8003bd0 <HAL_GetTick>
 8006db0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006db4:	f7fc ff0c 	bl	8003bd0 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e06c      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dd2:	4b36      	ldr	r3, [pc, #216]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dda:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d02f      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d028      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006df0:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e00:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e06:	4a29      	ldr	r2, [pc, #164]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e0c:	4b27      	ldr	r3, [pc, #156]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d114      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fc feda 	bl	8003bd0 <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fc fed6 	bl	8003bd0 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e034      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e36:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d10d      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e64:	4911      	ldr	r1, [pc, #68]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
 8006e6a:	e005      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4a0e      	ldr	r2, [pc, #56]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e76:	6093      	str	r3, [r2, #8]
 8006e78:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e84:	4909      	ldr	r1, [pc, #36]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7d1a      	ldrb	r2, [r3, #20]
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006e9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	42470068 	.word	0x42470068
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	40007000 	.word	0x40007000
 8006eb4:	42470e40 	.word	0x42470e40
 8006eb8:	424711e0 	.word	0x424711e0

08006ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d140      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d131      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ef0:	4b1f      	ldr	r3, [pc, #124]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ef2:	617b      	str	r3, [r7, #20]
          break;
 8006ef4:	e031      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f04:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f0e:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	e008      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f18:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f22:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f2a:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f30:	099b      	lsrs	r3, r3, #6
 8006f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f44:	0f1b      	lsrs	r3, r3, #28
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
          break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
          break;
 8006f58:	bf00      	nop
        }
      }
      break;
 8006f5a:	bf00      	nop
    }
  }
  return frequency;
 8006f5c:	697b      	ldr	r3, [r7, #20]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	00bb8000 	.word	0x00bb8000
 8006f74:	007a1200 	.word	0x007a1200
 8006f78:	00f42400 	.word	0x00f42400

08006f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07b      	b.n	8007086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f9e:	d009      	beq.n	8006fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	61da      	str	r2, [r3, #28]
 8006fa6:	e005      	b.n	8006fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fb fb8a 	bl	80026e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007038:	ea42 0103 	orr.w	r1, r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 0104 	and.w	r1, r3, #4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0210 	and.w	r2, r3, #16
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e041      	b.n	8007124 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fb fd95 	bl	8002be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f000 fde3 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	d001      	beq.n	8007144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e03c      	b.n	80071be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_TIM_Base_Start+0xa0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d018      	beq.n	8007188 <HAL_TIM_Base_Start+0x5c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715e:	d013      	beq.n	8007188 <HAL_TIM_Base_Start+0x5c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1a      	ldr	r2, [pc, #104]	; (80071d0 <HAL_TIM_Base_Start+0xa4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00e      	beq.n	8007188 <HAL_TIM_Base_Start+0x5c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a19      	ldr	r2, [pc, #100]	; (80071d4 <HAL_TIM_Base_Start+0xa8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d009      	beq.n	8007188 <HAL_TIM_Base_Start+0x5c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <HAL_TIM_Base_Start+0xac>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_TIM_Base_Start+0x5c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a16      	ldr	r2, [pc, #88]	; (80071dc <HAL_TIM_Base_Start+0xb0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d111      	bne.n	80071ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b06      	cmp	r3, #6
 8007198:	d010      	beq.n	80071bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0201 	orr.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	e007      	b.n	80071bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40000c00 	.word	0x40000c00
 80071dc:	40014000 	.word	0x40014000

080071e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e041      	b.n	8007276 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f839 	bl	800727e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f000 fd3a 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e041      	b.n	8007328 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fb fc43 	bl	8002b44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	4619      	mov	r1, r3
 80072d0:	4610      	mov	r0, r2
 80072d2:	f000 fce1 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <HAL_TIM_IC_Start_IT+0x1e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800734a:	b2db      	uxtb	r3, r3
 800734c:	e013      	b.n	8007376 <HAL_TIM_IC_Start_IT+0x46>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b04      	cmp	r3, #4
 8007352:	d104      	bne.n	800735e <HAL_TIM_IC_Start_IT+0x2e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800735a:	b2db      	uxtb	r3, r3
 800735c:	e00b      	b.n	8007376 <HAL_TIM_IC_Start_IT+0x46>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b08      	cmp	r3, #8
 8007362:	d104      	bne.n	800736e <HAL_TIM_IC_Start_IT+0x3e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800736a:	b2db      	uxtb	r3, r3
 800736c:	e003      	b.n	8007376 <HAL_TIM_IC_Start_IT+0x46>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007374:	b2db      	uxtb	r3, r3
 8007376:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_TIM_IC_Start_IT+0x58>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e013      	b.n	80073b0 <HAL_TIM_IC_Start_IT+0x80>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b04      	cmp	r3, #4
 800738c:	d104      	bne.n	8007398 <HAL_TIM_IC_Start_IT+0x68>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007394:	b2db      	uxtb	r3, r3
 8007396:	e00b      	b.n	80073b0 <HAL_TIM_IC_Start_IT+0x80>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b08      	cmp	r3, #8
 800739c:	d104      	bne.n	80073a8 <HAL_TIM_IC_Start_IT+0x78>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e003      	b.n	80073b0 <HAL_TIM_IC_Start_IT+0x80>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d102      	bne.n	80073be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80073b8:	7b7b      	ldrb	r3, [r7, #13]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d001      	beq.n	80073c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e0c2      	b.n	8007548 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Start_IT+0xa2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	e013      	b.n	80073fa <HAL_TIM_IC_Start_IT+0xca>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_IC_Start_IT+0xb2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e0:	e00b      	b.n	80073fa <HAL_TIM_IC_Start_IT+0xca>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_IC_Start_IT+0xc2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	e003      	b.n	80073fa <HAL_TIM_IC_Start_IT+0xca>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_TIM_IC_Start_IT+0xda>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007408:	e013      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x102>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d104      	bne.n	800741a <HAL_TIM_IC_Start_IT+0xea>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007418:	e00b      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x102>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d104      	bne.n	800742a <HAL_TIM_IC_Start_IT+0xfa>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007428:	e003      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x102>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b0c      	cmp	r3, #12
 8007436:	d841      	bhi.n	80074bc <HAL_TIM_IC_Start_IT+0x18c>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <HAL_TIM_IC_Start_IT+0x110>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007475 	.word	0x08007475
 8007444:	080074bd 	.word	0x080074bd
 8007448:	080074bd 	.word	0x080074bd
 800744c:	080074bd 	.word	0x080074bd
 8007450:	08007487 	.word	0x08007487
 8007454:	080074bd 	.word	0x080074bd
 8007458:	080074bd 	.word	0x080074bd
 800745c:	080074bd 	.word	0x080074bd
 8007460:	08007499 	.word	0x08007499
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074bd 	.word	0x080074bd
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074ab 	.word	0x080074ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0202 	orr.w	r2, r2, #2
 8007482:	60da      	str	r2, [r3, #12]
      break;
 8007484:	e01d      	b.n	80074c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0204 	orr.w	r2, r2, #4
 8007494:	60da      	str	r2, [r3, #12]
      break;
 8007496:	e014      	b.n	80074c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0208 	orr.w	r2, r2, #8
 80074a6:	60da      	str	r2, [r3, #12]
      break;
 80074a8:	e00b      	b.n	80074c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0210 	orr.w	r2, r2, #16
 80074b8:	60da      	str	r2, [r3, #12]
      break;
 80074ba:	e002      	b.n	80074c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d13e      	bne.n	8007546 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 ffa5 	bl	8008420 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <HAL_TIM_IC_Start_IT+0x220>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_TIM_IC_Start_IT+0x1e2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e8:	d013      	beq.n	8007512 <HAL_TIM_IC_Start_IT+0x1e2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a19      	ldr	r2, [pc, #100]	; (8007554 <HAL_TIM_IC_Start_IT+0x224>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_TIM_IC_Start_IT+0x1e2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a17      	ldr	r2, [pc, #92]	; (8007558 <HAL_TIM_IC_Start_IT+0x228>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_TIM_IC_Start_IT+0x1e2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a16      	ldr	r2, [pc, #88]	; (800755c <HAL_TIM_IC_Start_IT+0x22c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_TIM_IC_Start_IT+0x1e2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a14      	ldr	r2, [pc, #80]	; (8007560 <HAL_TIM_IC_Start_IT+0x230>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d111      	bne.n	8007536 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d010      	beq.n	8007546 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007534:	e007      	b.n	8007546 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40010000 	.word	0x40010000
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40014000 	.word	0x40014000

08007564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d122      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b02      	cmp	r3, #2
 8007586:	d11b      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0202 	mvn.w	r2, #2
 8007590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa fe46 	bl	8002238 <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb54 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb5b 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d122      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d11b      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0204 	mvn.w	r2, #4
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa fe1c 	bl	8002238 <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb2a 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb31 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b08      	cmp	r3, #8
 8007620:	d122      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b08      	cmp	r3, #8
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0208 	mvn.w	r2, #8
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fa fdf2 	bl	8002238 <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fb00 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb07 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b10      	cmp	r3, #16
 8007674:	d122      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b10      	cmp	r3, #16
 8007682:	d11b      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0210 	mvn.w	r2, #16
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2208      	movs	r2, #8
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fa fdc8 	bl	8002238 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fad6 	bl	8007c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fadd 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10e      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d107      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0201 	mvn.w	r2, #1
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fab0 	bl	8007c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d10e      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d107      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 ff24 	bl	800855c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d10e      	bne.n	8007740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d107      	bne.n	8007740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 faa2 	bl	8007c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b20      	cmp	r3, #32
 800774c:	d10e      	bne.n	800776c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b20      	cmp	r3, #32
 800775a:	d107      	bne.n	800776c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0220 	mvn.w	r2, #32
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 feee 	bl	8008548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_TIM_IC_ConfigChannel+0x1e>
 800778e:	2302      	movs	r3, #2
 8007790:	e088      	b.n	80078a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11b      	bne.n	80077d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6819      	ldr	r1, [r3, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f000 fc7e 	bl	80080b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 020c 	bic.w	r2, r2, #12
 80077c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6999      	ldr	r1, [r3, #24]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	619a      	str	r2, [r3, #24]
 80077d6:	e060      	b.n	800789a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d11c      	bne.n	8007818 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f000 fcf6 	bl	80081de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007800:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6999      	ldr	r1, [r3, #24]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	021a      	lsls	r2, r3, #8
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	619a      	str	r2, [r3, #24]
 8007816:	e040      	b.n	800789a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d11b      	bne.n	8007856 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6819      	ldr	r1, [r3, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f000 fd43 	bl	80082b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 020c 	bic.w	r2, r2, #12
 8007840:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69d9      	ldr	r1, [r3, #28]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	61da      	str	r2, [r3, #28]
 8007854:	e021      	b.n	800789a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d11c      	bne.n	8007896 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f000 fd60 	bl	8008330 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800787e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69d9      	ldr	r1, [r3, #28]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	021a      	lsls	r2, r3, #8
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	61da      	str	r2, [r3, #28]
 8007894:	e001      	b.n	800789a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0ae      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	f200 809f 	bhi.w	8007a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007a19 	.word	0x08007a19
 80078e8:	08007a19 	.word	0x08007a19
 80078ec:	08007a19 	.word	0x08007a19
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007a19 	.word	0x08007a19
 80078f8:	08007a19 	.word	0x08007a19
 80078fc:	08007a19 	.word	0x08007a19
 8007900:	08007997 	.word	0x08007997
 8007904:	08007a19 	.word	0x08007a19
 8007908:	08007a19 	.word	0x08007a19
 800790c:	08007a19 	.word	0x08007a19
 8007910:	080079d7 	.word	0x080079d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fa3c 	bl	8007d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0208 	orr.w	r2, r2, #8
 800792e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0204 	bic.w	r2, r2, #4
 800793e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6999      	ldr	r1, [r3, #24]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	619a      	str	r2, [r3, #24]
      break;
 8007952:	e064      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fa82 	bl	8007e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800796e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800797e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6999      	ldr	r1, [r3, #24]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	619a      	str	r2, [r3, #24]
      break;
 8007994:	e043      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 facd 	bl	8007f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0208 	orr.w	r2, r2, #8
 80079b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0204 	bic.w	r2, r2, #4
 80079c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69d9      	ldr	r1, [r3, #28]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	61da      	str	r2, [r3, #28]
      break;
 80079d4:	e023      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fb17 	bl	8008010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	021a      	lsls	r2, r3, #8
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	61da      	str	r2, [r3, #28]
      break;
 8007a16:	e002      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_ConfigClockSource+0x1c>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e0b4      	b.n	8007bb6 <HAL_TIM_ConfigClockSource+0x186>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d03e      	beq.n	8007b04 <HAL_TIM_ConfigClockSource+0xd4>
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8a:	f200 8087 	bhi.w	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a92:	f000 8086 	beq.w	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9a:	d87f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b70      	cmp	r3, #112	; 0x70
 8007a9e:	d01a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8007aa0:	2b70      	cmp	r3, #112	; 0x70
 8007aa2:	d87b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aa4:	2b60      	cmp	r3, #96	; 0x60
 8007aa6:	d050      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x11a>
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d877      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aac:	2b50      	cmp	r3, #80	; 0x50
 8007aae:	d03c      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0xfa>
 8007ab0:	2b50      	cmp	r3, #80	; 0x50
 8007ab2:	d873      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d058      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x13a>
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d86f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d064      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac0:	2b30      	cmp	r3, #48	; 0x30
 8007ac2:	d86b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d060      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d867      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d05a      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ad4:	e062      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f000 fc7b 	bl	80083e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	609a      	str	r2, [r3, #8]
      break;
 8007b02:	e04f      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6899      	ldr	r1, [r3, #8]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f000 fc64 	bl	80083e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b26:	609a      	str	r2, [r3, #8]
      break;
 8007b28:	e03c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fb22 	bl	8008180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2150      	movs	r1, #80	; 0x50
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fc31 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007b48:	e02c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 fb7e 	bl	8008258 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2160      	movs	r1, #96	; 0x60
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fc21 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007b68:	e01c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 fb02 	bl	8008180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fc11 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007b88:	e00c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f000 fc08 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007b9a:	e003      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba0:	e000      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	d831      	bhi.n	8007c38 <HAL_TIM_ReadCapturedValue+0x78>
 8007bd4:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c39 	.word	0x08007c39
 8007bec:	08007c1b 	.word	0x08007c1b
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c39 	.word	0x08007c39
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c39 	.word	0x08007c39
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007c2f 	.word	0x08007c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c16:	60fb      	str	r3, [r7, #12]

      break;
 8007c18:	e00f      	b.n	8007c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	60fb      	str	r3, [r7, #12]

      break;
 8007c22:	e00a      	b.n	8007c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	60fb      	str	r3, [r7, #12]

      break;
 8007c2c:	e005      	b.n	8007c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	60fb      	str	r3, [r7, #12]

      break;
 8007c36:	e000      	b.n	8007c3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007c38:	bf00      	nop
  }

  return tmpreg;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a34      	ldr	r2, [pc, #208]	; (8007d7c <TIM_Base_SetConfig+0xe4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00f      	beq.n	8007cd0 <TIM_Base_SetConfig+0x38>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d00b      	beq.n	8007cd0 <TIM_Base_SetConfig+0x38>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a31      	ldr	r2, [pc, #196]	; (8007d80 <TIM_Base_SetConfig+0xe8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <TIM_Base_SetConfig+0x38>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a30      	ldr	r2, [pc, #192]	; (8007d84 <TIM_Base_SetConfig+0xec>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_Base_SetConfig+0x38>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <TIM_Base_SetConfig+0xf0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d108      	bne.n	8007ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a25      	ldr	r2, [pc, #148]	; (8007d7c <TIM_Base_SetConfig+0xe4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01b      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf0:	d017      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <TIM_Base_SetConfig+0xe8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a21      	ldr	r2, [pc, #132]	; (8007d84 <TIM_Base_SetConfig+0xec>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00f      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a20      	ldr	r2, [pc, #128]	; (8007d88 <TIM_Base_SetConfig+0xf0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00b      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	; (8007d8c <TIM_Base_SetConfig+0xf4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d007      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <TIM_Base_SetConfig+0xf8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_Base_SetConfig+0x8a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <TIM_Base_SetConfig+0xfc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d108      	bne.n	8007d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <TIM_Base_SetConfig+0xe4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d103      	bne.n	8007d68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	615a      	str	r2, [r3, #20]
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	40014400 	.word	0x40014400
 8007d94:	40014800 	.word	0x40014800

08007d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f023 0302 	bic.w	r3, r3, #2
 8007de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a1c      	ldr	r2, [pc, #112]	; (8007e60 <TIM_OC1_SetConfig+0xc8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d10c      	bne.n	8007e0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0308 	bic.w	r3, r3, #8
 8007dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f023 0304 	bic.w	r3, r3, #4
 8007e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <TIM_OC1_SetConfig+0xc8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d111      	bne.n	8007e3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	621a      	str	r2, [r3, #32]
}
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40010000 	.word	0x40010000

08007e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0210 	bic.w	r2, r3, #16
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f023 0320 	bic.w	r3, r3, #32
 8007eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <TIM_OC2_SetConfig+0xd4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10d      	bne.n	8007ee0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <TIM_OC2_SetConfig+0xd4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d113      	bne.n	8007f10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000

08007f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1d      	ldr	r2, [pc, #116]	; (800800c <TIM_OC3_SetConfig+0xd0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10d      	bne.n	8007fb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a14      	ldr	r2, [pc, #80]	; (800800c <TIM_OC3_SetConfig+0xd0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d113      	bne.n	8007fe6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	621a      	str	r2, [r3, #32]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40010000 	.word	0x40010000

08008010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800805a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	031b      	lsls	r3, r3, #12
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a10      	ldr	r2, [pc, #64]	; (80080ac <TIM_OC4_SetConfig+0x9c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000

080080b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a24      	ldr	r2, [pc, #144]	; (800816c <TIM_TI1_SetConfig+0xbc>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <TIM_TI1_SetConfig+0x56>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d00f      	beq.n	8008106 <TIM_TI1_SetConfig+0x56>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a21      	ldr	r2, [pc, #132]	; (8008170 <TIM_TI1_SetConfig+0xc0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00b      	beq.n	8008106 <TIM_TI1_SetConfig+0x56>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a20      	ldr	r2, [pc, #128]	; (8008174 <TIM_TI1_SetConfig+0xc4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d007      	beq.n	8008106 <TIM_TI1_SetConfig+0x56>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <TIM_TI1_SetConfig+0xc8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d003      	beq.n	8008106 <TIM_TI1_SetConfig+0x56>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a1e      	ldr	r2, [pc, #120]	; (800817c <TIM_TI1_SetConfig+0xcc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d101      	bne.n	800810a <TIM_TI1_SetConfig+0x5a>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <TIM_TI1_SetConfig+0x5c>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d008      	beq.n	8008122 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	e003      	b.n	800812a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f043 0301 	orr.w	r3, r3, #1
 8008128:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	b2db      	uxtb	r3, r3
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f023 030a 	bic.w	r3, r3, #10
 8008144:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f003 030a 	and.w	r3, r3, #10
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40010000 	.word	0x40010000
 8008170:	40000400 	.word	0x40000400
 8008174:	40000800 	.word	0x40000800
 8008178:	40000c00 	.word	0x40000c00
 800817c:	40014000 	.word	0x40014000

08008180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f023 0201 	bic.w	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f023 030a 	bic.w	r3, r3, #10
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	621a      	str	r2, [r3, #32]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	f023 0210 	bic.w	r2, r3, #16
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800821c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	031b      	lsls	r3, r3, #12
 8008222:	b29b      	uxth	r3, r3
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	f023 0210 	bic.w	r2, r3, #16
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	031b      	lsls	r3, r3, #12
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	621a      	str	r2, [r3, #32]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	021b      	lsls	r3, r3, #8
 800830e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800835c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800836e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	031b      	lsls	r3, r3, #12
 8008374:	b29b      	uxth	r3, r3
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008382:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	031b      	lsls	r3, r3, #12
 8008388:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f043 0307 	orr.w	r3, r3, #7
 80083cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	431a      	orrs	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2201      	movs	r2, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	431a      	orrs	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
	...

0800846c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e050      	b.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1c      	ldr	r2, [pc, #112]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d013      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a18      	ldr	r2, [pc, #96]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a16      	ldr	r2, [pc, #88]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a15      	ldr	r2, [pc, #84]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a13      	ldr	r2, [pc, #76]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10c      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4313      	orrs	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40010000 	.word	0x40010000
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40014000 	.word	0x40014000

08008548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e03f      	b.n	8008602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fa fbde 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fddf 	bl	8009178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695a      	ldr	r2, [r3, #20]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b08a      	sub	sp, #40	; 0x28
 800860e:	af02      	add	r7, sp, #8
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	4613      	mov	r3, r2
 8008618:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b20      	cmp	r3, #32
 8008628:	d17c      	bne.n	8008724 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_UART_Transmit+0x2c>
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e075      	b.n	8008726 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_UART_Transmit+0x3e>
 8008644:	2302      	movs	r3, #2
 8008646:	e06e      	b.n	8008726 <HAL_UART_Transmit+0x11c>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2221      	movs	r2, #33	; 0x21
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800865e:	f7fb fab7 	bl	8003bd0 <HAL_GetTick>
 8008662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	88fa      	ldrh	r2, [r7, #6]
 8008668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d108      	bne.n	800868c <HAL_UART_Transmit+0x82>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e003      	b.n	8008694 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800869c:	e02a      	b.n	80086f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2200      	movs	r2, #0
 80086a6:	2180      	movs	r1, #128	; 0x80
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fb1f 	bl	8008cec <UART_WaitOnFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e036      	b.n	8008726 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	3302      	adds	r3, #2
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	e007      	b.n	80086e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	3301      	adds	r3, #1
 80086e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1cf      	bne.n	800869e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2200      	movs	r2, #0
 8008706:	2140      	movs	r1, #64	; 0x40
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 faef 	bl	8008cec <UART_WaitOnFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e006      	b.n	8008726 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e000      	b.n	8008726 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008724:	2302      	movs	r3, #2
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	4613      	mov	r3, r2
 800873a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b20      	cmp	r3, #32
 8008746:	d11d      	bne.n	8008784 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_UART_Receive_IT+0x26>
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e016      	b.n	8008786 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UART_Receive_IT+0x38>
 8008762:	2302      	movs	r3, #2
 8008764:	e00f      	b.n	8008786 <HAL_UART_Receive_IT+0x58>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	461a      	mov	r2, r3
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 fb24 	bl	8008dc8 <UART_Start_Receive_IT>
 8008780:	4603      	mov	r3, r0
 8008782:	e000      	b.n	8008786 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008784:	2302      	movs	r3, #2
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b0ba      	sub	sp, #232	; 0xe8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087bc:	2300      	movs	r3, #0
 80087be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10f      	bne.n	80087f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_UART_IRQHandler+0x66>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc07 	bl	8009002 <UART_Receive_IT>
      return;
 80087f4:	e256      	b.n	8008ca4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 80de 	beq.w	80089bc <HAL_UART_IRQHandler+0x22c>
 8008800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 80d1 	beq.w	80089bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00b      	beq.n	800883e <HAL_UART_IRQHandler+0xae>
 8008826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	f043 0201 	orr.w	r2, r3, #1
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <HAL_UART_IRQHandler+0xd2>
 800884a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f043 0202 	orr.w	r2, r3, #2
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <HAL_UART_IRQHandler+0xf6>
 800886e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f043 0204 	orr.w	r2, r3, #4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <HAL_UART_IRQHandler+0x126>
 8008892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800889e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	f043 0208 	orr.w	r2, r3, #8
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 81ed 	beq.w	8008c9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d008      	beq.n	80088de <HAL_UART_IRQHandler+0x14e>
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fb92 	bl	8009002 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <HAL_UART_IRQHandler+0x17a>
 8008902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008906:	2b00      	cmp	r3, #0
 8008908:	d04f      	beq.n	80089aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa9a 	bl	8008e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d141      	bne.n	80089a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3314      	adds	r3, #20
 8008924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800893c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3314      	adds	r3, #20
 8008946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800894a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800894e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1d9      	bne.n	800891e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	2b00      	cmp	r3, #0
 8008970:	d013      	beq.n	800899a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	4a7d      	ldr	r2, [pc, #500]	; (8008b6c <HAL_UART_IRQHandler+0x3dc>)
 8008978:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	4618      	mov	r0, r3
 8008980:	f7fb fad7 	bl	8003f32 <HAL_DMA_Abort_IT>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d016      	beq.n	80089b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008998:	e00e      	b.n	80089b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f990 	bl	8008cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a0:	e00a      	b.n	80089b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f98c 	bl	8008cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a8:	e006      	b.n	80089b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f988 	bl	8008cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089b6:	e170      	b.n	8008c9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	bf00      	nop
    return;
 80089ba:	e16e      	b.n	8008c9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	f040 814a 	bne.w	8008c5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ca:	f003 0310 	and.w	r3, r3, #16
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 8143 	beq.w	8008c5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d8:	f003 0310 	and.w	r3, r3, #16
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 813c 	beq.w	8008c5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	60bb      	str	r3, [r7, #8]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	60bb      	str	r3, [r7, #8]
 80089f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b40      	cmp	r3, #64	; 0x40
 8008a04:	f040 80b4 	bne.w	8008b70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8140 	beq.w	8008c9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a26:	429a      	cmp	r2, r3
 8008a28:	f080 8139 	bcs.w	8008c9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a3e:	f000 8088 	beq.w	8008b52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1d9      	bne.n	8008a42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3314      	adds	r3, #20
 8008a94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3314      	adds	r3, #20
 8008aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ab2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e1      	bne.n	8008a8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e3      	bne.n	8008aca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b22:	f023 0310 	bic.w	r3, r3, #16
 8008b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b34:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e3      	bne.n	8008b10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fb f980 	bl	8003e52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f8b6 	bl	8008cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b68:	e099      	b.n	8008c9e <HAL_UART_IRQHandler+0x50e>
 8008b6a:	bf00      	nop
 8008b6c:	08008f0b 	.word	0x08008f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 808b 	beq.w	8008ca2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8086 	beq.w	8008ca2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	330c      	adds	r3, #12
 8008b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bba:	647a      	str	r2, [r7, #68]	; 0x44
 8008bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e3      	bne.n	8008b96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3314      	adds	r3, #20
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f023 0301 	bic.w	r3, r3, #1
 8008be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3314      	adds	r3, #20
 8008bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bf2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e3      	bne.n	8008bce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	330c      	adds	r3, #12
 8008c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	330c      	adds	r3, #12
 8008c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c38:	61fa      	str	r2, [r7, #28]
 8008c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	617b      	str	r3, [r7, #20]
   return(result);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e3      	bne.n	8008c14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f83e 	bl	8008cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c58:	e023      	b.n	8008ca2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d009      	beq.n	8008c7a <HAL_UART_IRQHandler+0x4ea>
 8008c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f95d 	bl	8008f32 <UART_Transmit_IT>
    return;
 8008c78:	e014      	b.n	8008ca4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00e      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x514>
 8008c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f99d 	bl	8008fd2 <UART_EndTransmit_IT>
    return;
 8008c98:	e004      	b.n	8008ca4 <HAL_UART_IRQHandler+0x514>
    return;
 8008c9a:	bf00      	nop
 8008c9c:	e002      	b.n	8008ca4 <HAL_UART_IRQHandler+0x514>
      return;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <HAL_UART_IRQHandler+0x514>
      return;
 8008ca2:	bf00      	nop
  }
}
 8008ca4:	37e8      	adds	r7, #232	; 0xe8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop

08008cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b090      	sub	sp, #64	; 0x40
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cfc:	e050      	b.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d04:	d04c      	beq.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d007      	beq.n	8008d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d0c:	f7fa ff60 	bl	8003bd0 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d241      	bcs.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	330c      	adds	r3, #12
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d3c:	637a      	str	r2, [r7, #52]	; 0x34
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e5      	bne.n	8008d1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3314      	adds	r3, #20
 8008d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3314      	adds	r3, #20
 8008d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d70:	623a      	str	r2, [r7, #32]
 8008d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	69f9      	ldr	r1, [r7, #28]
 8008d76:	6a3a      	ldr	r2, [r7, #32]
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e5      	bne.n	8008d50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e00f      	b.n	8008dc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4013      	ands	r3, r2
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	bf0c      	ite	eq
 8008db0:	2301      	moveq	r3, #1
 8008db2:	2300      	movne	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d09f      	beq.n	8008cfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3740      	adds	r7, #64	; 0x40
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2222      	movs	r2, #34	; 0x22
 8008df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0220 	orr.w	r2, r2, #32
 8008e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b095      	sub	sp, #84	; 0x54
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	330c      	adds	r3, #12
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e5      	bne.n	8008e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3314      	adds	r3, #20
 8008e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f023 0301 	bic.w	r3, r3, #1
 8008e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e5      	bne.n	8008e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d119      	bne.n	8008ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f023 0310 	bic.w	r3, r3, #16
 8008ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	330c      	adds	r3, #12
 8008eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008edc:	61ba      	str	r2, [r7, #24]
 8008ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e5      	bne.n	8008ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008efe:	bf00      	nop
 8008f00:	3754      	adds	r7, #84	; 0x54
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fecb 	bl	8008cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b21      	cmp	r3, #33	; 0x21
 8008f44:	d13e      	bne.n	8008fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f4e:	d114      	bne.n	8008f7a <UART_Transmit_IT+0x48>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d110      	bne.n	8008f7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	1c9a      	adds	r2, r3, #2
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	621a      	str	r2, [r3, #32]
 8008f78:	e008      	b.n	8008f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	1c59      	adds	r1, r3, #1
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6211      	str	r1, [r2, #32]
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	3b01      	subs	r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10f      	bne.n	8008fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68da      	ldr	r2, [r3, #12]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e000      	b.n	8008fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fc4:	2302      	movs	r3, #2
  }
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fe8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff fe5a 	bl	8008cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b08c      	sub	sp, #48	; 0x30
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b22      	cmp	r3, #34	; 0x22
 8009014:	f040 80ab 	bne.w	800916e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009020:	d117      	bne.n	8009052 <UART_Receive_IT+0x50>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d113      	bne.n	8009052 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b29b      	uxth	r3, r3
 800903c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009040:	b29a      	uxth	r2, r3
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	1c9a      	adds	r2, r3, #2
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	629a      	str	r2, [r3, #40]	; 0x28
 8009050:	e026      	b.n	80090a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009064:	d007      	beq.n	8009076 <UART_Receive_IT+0x74>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <UART_Receive_IT+0x82>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d106      	bne.n	8009084 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	b2da      	uxtb	r2, r3
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e008      	b.n	8009096 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009090:	b2da      	uxtb	r2, r3
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4619      	mov	r1, r3
 80090ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d15a      	bne.n	800916a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0220 	bic.w	r2, r2, #32
 80090c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695a      	ldr	r2, [r3, #20]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0201 	bic.w	r2, r2, #1
 80090e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d135      	bne.n	8009160 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	330c      	adds	r3, #12
 8009100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	613b      	str	r3, [r7, #16]
   return(result);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f023 0310 	bic.w	r3, r3, #16
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911a:	623a      	str	r2, [r7, #32]
 800911c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	69f9      	ldr	r1, [r7, #28]
 8009120:	6a3a      	ldr	r2, [r7, #32]
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	61bb      	str	r3, [r7, #24]
   return(result);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e5      	bne.n	80090fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b10      	cmp	r3, #16
 800913a:	d10a      	bne.n	8009152 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff fdbb 	bl	8008cd4 <HAL_UARTEx_RxEventCallback>
 800915e:	e002      	b.n	8009166 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7f8 ff09 	bl	8001f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	e002      	b.n	8009170 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e000      	b.n	8009170 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800916e:	2302      	movs	r3, #2
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3730      	adds	r7, #48	; 0x30
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800917c:	b0c0      	sub	sp, #256	; 0x100
 800917e:	af00      	add	r7, sp, #0
 8009180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	68d9      	ldr	r1, [r3, #12]
 8009196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	ea40 0301 	orr.w	r3, r0, r1
 80091a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091d0:	f021 010c 	bic.w	r1, r1, #12
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091de:	430b      	orrs	r3, r1
 80091e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f2:	6999      	ldr	r1, [r3, #24]
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	ea40 0301 	orr.w	r3, r0, r1
 80091fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	4b8f      	ldr	r3, [pc, #572]	; (8009444 <UART_SetConfig+0x2cc>)
 8009208:	429a      	cmp	r2, r3
 800920a:	d005      	beq.n	8009218 <UART_SetConfig+0xa0>
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b8d      	ldr	r3, [pc, #564]	; (8009448 <UART_SetConfig+0x2d0>)
 8009214:	429a      	cmp	r2, r3
 8009216:	d104      	bne.n	8009222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009218:	f7fd fd4c 	bl	8006cb4 <HAL_RCC_GetPCLK2Freq>
 800921c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009220:	e003      	b.n	800922a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009222:	f7fd fd33 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 8009226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009234:	f040 810c 	bne.w	8009450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800923c:	2200      	movs	r2, #0
 800923e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800924a:	4622      	mov	r2, r4
 800924c:	462b      	mov	r3, r5
 800924e:	1891      	adds	r1, r2, r2
 8009250:	65b9      	str	r1, [r7, #88]	; 0x58
 8009252:	415b      	adcs	r3, r3
 8009254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800925a:	4621      	mov	r1, r4
 800925c:	eb12 0801 	adds.w	r8, r2, r1
 8009260:	4629      	mov	r1, r5
 8009262:	eb43 0901 	adc.w	r9, r3, r1
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800927a:	4690      	mov	r8, r2
 800927c:	4699      	mov	r9, r3
 800927e:	4623      	mov	r3, r4
 8009280:	eb18 0303 	adds.w	r3, r8, r3
 8009284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009288:	462b      	mov	r3, r5
 800928a:	eb49 0303 	adc.w	r3, r9, r3
 800928e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800929e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092a6:	460b      	mov	r3, r1
 80092a8:	18db      	adds	r3, r3, r3
 80092aa:	653b      	str	r3, [r7, #80]	; 0x50
 80092ac:	4613      	mov	r3, r2
 80092ae:	eb42 0303 	adc.w	r3, r2, r3
 80092b2:	657b      	str	r3, [r7, #84]	; 0x54
 80092b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092bc:	f7f7 fbce 	bl	8000a5c <__aeabi_uldivmod>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4b61      	ldr	r3, [pc, #388]	; (800944c <UART_SetConfig+0x2d4>)
 80092c6:	fba3 2302 	umull	r2, r3, r3, r2
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	011c      	lsls	r4, r3, #4
 80092ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	1891      	adds	r1, r2, r2
 80092e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092e8:	415b      	adcs	r3, r3
 80092ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092f0:	4641      	mov	r1, r8
 80092f2:	eb12 0a01 	adds.w	sl, r2, r1
 80092f6:	4649      	mov	r1, r9
 80092f8:	eb43 0b01 	adc.w	fp, r3, r1
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800930c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009310:	4692      	mov	sl, r2
 8009312:	469b      	mov	fp, r3
 8009314:	4643      	mov	r3, r8
 8009316:	eb1a 0303 	adds.w	r3, sl, r3
 800931a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800931e:	464b      	mov	r3, r9
 8009320:	eb4b 0303 	adc.w	r3, fp, r3
 8009324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800933c:	460b      	mov	r3, r1
 800933e:	18db      	adds	r3, r3, r3
 8009340:	643b      	str	r3, [r7, #64]	; 0x40
 8009342:	4613      	mov	r3, r2
 8009344:	eb42 0303 	adc.w	r3, r2, r3
 8009348:	647b      	str	r3, [r7, #68]	; 0x44
 800934a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800934e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009352:	f7f7 fb83 	bl	8000a5c <__aeabi_uldivmod>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4611      	mov	r1, r2
 800935c:	4b3b      	ldr	r3, [pc, #236]	; (800944c <UART_SetConfig+0x2d4>)
 800935e:	fba3 2301 	umull	r2, r3, r3, r1
 8009362:	095b      	lsrs	r3, r3, #5
 8009364:	2264      	movs	r2, #100	; 0x64
 8009366:	fb02 f303 	mul.w	r3, r2, r3
 800936a:	1acb      	subs	r3, r1, r3
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009372:	4b36      	ldr	r3, [pc, #216]	; (800944c <UART_SetConfig+0x2d4>)
 8009374:	fba3 2302 	umull	r2, r3, r3, r2
 8009378:	095b      	lsrs	r3, r3, #5
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009380:	441c      	add	r4, r3
 8009382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009386:	2200      	movs	r2, #0
 8009388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800938c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	1891      	adds	r1, r2, r2
 800939a:	63b9      	str	r1, [r7, #56]	; 0x38
 800939c:	415b      	adcs	r3, r3
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093a4:	4641      	mov	r1, r8
 80093a6:	1851      	adds	r1, r2, r1
 80093a8:	6339      	str	r1, [r7, #48]	; 0x30
 80093aa:	4649      	mov	r1, r9
 80093ac:	414b      	adcs	r3, r1
 80093ae:	637b      	str	r3, [r7, #52]	; 0x34
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093bc:	4659      	mov	r1, fp
 80093be:	00cb      	lsls	r3, r1, #3
 80093c0:	4651      	mov	r1, sl
 80093c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c6:	4651      	mov	r1, sl
 80093c8:	00ca      	lsls	r2, r1, #3
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	4642      	mov	r2, r8
 80093d2:	189b      	adds	r3, r3, r2
 80093d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093d8:	464b      	mov	r3, r9
 80093da:	460a      	mov	r2, r1
 80093dc:	eb42 0303 	adc.w	r3, r2, r3
 80093e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093f8:	460b      	mov	r3, r1
 80093fa:	18db      	adds	r3, r3, r3
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093fe:	4613      	mov	r3, r2
 8009400:	eb42 0303 	adc.w	r3, r2, r3
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800940a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800940e:	f7f7 fb25 	bl	8000a5c <__aeabi_uldivmod>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <UART_SetConfig+0x2d4>)
 8009418:	fba3 1302 	umull	r1, r3, r3, r2
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	2164      	movs	r1, #100	; 0x64
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	3332      	adds	r3, #50	; 0x32
 800942a:	4a08      	ldr	r2, [pc, #32]	; (800944c <UART_SetConfig+0x2d4>)
 800942c:	fba2 2303 	umull	r2, r3, r2, r3
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	f003 0207 	and.w	r2, r3, #7
 8009436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4422      	add	r2, r4
 800943e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009440:	e105      	b.n	800964e <UART_SetConfig+0x4d6>
 8009442:	bf00      	nop
 8009444:	40011000 	.word	0x40011000
 8009448:	40011400 	.word	0x40011400
 800944c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009454:	2200      	movs	r2, #0
 8009456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800945a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800945e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009462:	4642      	mov	r2, r8
 8009464:	464b      	mov	r3, r9
 8009466:	1891      	adds	r1, r2, r2
 8009468:	6239      	str	r1, [r7, #32]
 800946a:	415b      	adcs	r3, r3
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
 800946e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009472:	4641      	mov	r1, r8
 8009474:	1854      	adds	r4, r2, r1
 8009476:	4649      	mov	r1, r9
 8009478:	eb43 0501 	adc.w	r5, r3, r1
 800947c:	f04f 0200 	mov.w	r2, #0
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	00eb      	lsls	r3, r5, #3
 8009486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800948a:	00e2      	lsls	r2, r4, #3
 800948c:	4614      	mov	r4, r2
 800948e:	461d      	mov	r5, r3
 8009490:	4643      	mov	r3, r8
 8009492:	18e3      	adds	r3, r4, r3
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009498:	464b      	mov	r3, r9
 800949a:	eb45 0303 	adc.w	r3, r5, r3
 800949e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094be:	4629      	mov	r1, r5
 80094c0:	008b      	lsls	r3, r1, #2
 80094c2:	4621      	mov	r1, r4
 80094c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c8:	4621      	mov	r1, r4
 80094ca:	008a      	lsls	r2, r1, #2
 80094cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094d0:	f7f7 fac4 	bl	8000a5c <__aeabi_uldivmod>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4b60      	ldr	r3, [pc, #384]	; (800965c <UART_SetConfig+0x4e4>)
 80094da:	fba3 2302 	umull	r2, r3, r3, r2
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	011c      	lsls	r4, r3, #4
 80094e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094f4:	4642      	mov	r2, r8
 80094f6:	464b      	mov	r3, r9
 80094f8:	1891      	adds	r1, r2, r2
 80094fa:	61b9      	str	r1, [r7, #24]
 80094fc:	415b      	adcs	r3, r3
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009504:	4641      	mov	r1, r8
 8009506:	1851      	adds	r1, r2, r1
 8009508:	6139      	str	r1, [r7, #16]
 800950a:	4649      	mov	r1, r9
 800950c:	414b      	adcs	r3, r1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800951c:	4659      	mov	r1, fp
 800951e:	00cb      	lsls	r3, r1, #3
 8009520:	4651      	mov	r1, sl
 8009522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009526:	4651      	mov	r1, sl
 8009528:	00ca      	lsls	r2, r1, #3
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	4603      	mov	r3, r0
 8009530:	4642      	mov	r2, r8
 8009532:	189b      	adds	r3, r3, r2
 8009534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009538:	464b      	mov	r3, r9
 800953a:	460a      	mov	r2, r1
 800953c:	eb42 0303 	adc.w	r3, r2, r3
 8009540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	67bb      	str	r3, [r7, #120]	; 0x78
 800954e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800955c:	4649      	mov	r1, r9
 800955e:	008b      	lsls	r3, r1, #2
 8009560:	4641      	mov	r1, r8
 8009562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009566:	4641      	mov	r1, r8
 8009568:	008a      	lsls	r2, r1, #2
 800956a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800956e:	f7f7 fa75 	bl	8000a5c <__aeabi_uldivmod>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4b39      	ldr	r3, [pc, #228]	; (800965c <UART_SetConfig+0x4e4>)
 8009578:	fba3 1302 	umull	r1, r3, r3, r2
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	2164      	movs	r1, #100	; 0x64
 8009580:	fb01 f303 	mul.w	r3, r1, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	3332      	adds	r3, #50	; 0x32
 800958a:	4a34      	ldr	r2, [pc, #208]	; (800965c <UART_SetConfig+0x4e4>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009596:	441c      	add	r4, r3
 8009598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800959c:	2200      	movs	r2, #0
 800959e:	673b      	str	r3, [r7, #112]	; 0x70
 80095a0:	677a      	str	r2, [r7, #116]	; 0x74
 80095a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095a6:	4642      	mov	r2, r8
 80095a8:	464b      	mov	r3, r9
 80095aa:	1891      	adds	r1, r2, r2
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	415b      	adcs	r3, r3
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095b6:	4641      	mov	r1, r8
 80095b8:	1851      	adds	r1, r2, r1
 80095ba:	6039      	str	r1, [r7, #0]
 80095bc:	4649      	mov	r1, r9
 80095be:	414b      	adcs	r3, r1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095ce:	4659      	mov	r1, fp
 80095d0:	00cb      	lsls	r3, r1, #3
 80095d2:	4651      	mov	r1, sl
 80095d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095d8:	4651      	mov	r1, sl
 80095da:	00ca      	lsls	r2, r1, #3
 80095dc:	4610      	mov	r0, r2
 80095de:	4619      	mov	r1, r3
 80095e0:	4603      	mov	r3, r0
 80095e2:	4642      	mov	r2, r8
 80095e4:	189b      	adds	r3, r3, r2
 80095e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095e8:	464b      	mov	r3, r9
 80095ea:	460a      	mov	r2, r1
 80095ec:	eb42 0303 	adc.w	r3, r2, r3
 80095f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	663b      	str	r3, [r7, #96]	; 0x60
 80095fc:	667a      	str	r2, [r7, #100]	; 0x64
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800960a:	4649      	mov	r1, r9
 800960c:	008b      	lsls	r3, r1, #2
 800960e:	4641      	mov	r1, r8
 8009610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009614:	4641      	mov	r1, r8
 8009616:	008a      	lsls	r2, r1, #2
 8009618:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800961c:	f7f7 fa1e 	bl	8000a5c <__aeabi_uldivmod>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <UART_SetConfig+0x4e4>)
 8009626:	fba3 1302 	umull	r1, r3, r3, r2
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	2164      	movs	r1, #100	; 0x64
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	3332      	adds	r3, #50	; 0x32
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <UART_SetConfig+0x4e4>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4422      	add	r2, r4
 800964c:	609a      	str	r2, [r3, #8]
}
 800964e:	bf00      	nop
 8009650:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009654:	46bd      	mov	sp, r7
 8009656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800965a:	bf00      	nop
 800965c:	51eb851f 	.word	0x51eb851f

08009660 <atoi>:
 8009660:	220a      	movs	r2, #10
 8009662:	2100      	movs	r1, #0
 8009664:	f000 b8d4 	b.w	8009810 <strtol>

08009668 <__errno>:
 8009668:	4b01      	ldr	r3, [pc, #4]	; (8009670 <__errno+0x8>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20000078 	.word	0x20000078

08009674 <__libc_init_array>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	4d0d      	ldr	r5, [pc, #52]	; (80096ac <__libc_init_array+0x38>)
 8009678:	4c0d      	ldr	r4, [pc, #52]	; (80096b0 <__libc_init_array+0x3c>)
 800967a:	1b64      	subs	r4, r4, r5
 800967c:	10a4      	asrs	r4, r4, #2
 800967e:	2600      	movs	r6, #0
 8009680:	42a6      	cmp	r6, r4
 8009682:	d109      	bne.n	8009698 <__libc_init_array+0x24>
 8009684:	4d0b      	ldr	r5, [pc, #44]	; (80096b4 <__libc_init_array+0x40>)
 8009686:	4c0c      	ldr	r4, [pc, #48]	; (80096b8 <__libc_init_array+0x44>)
 8009688:	f000 fd1a 	bl	800a0c0 <_init>
 800968c:	1b64      	subs	r4, r4, r5
 800968e:	10a4      	asrs	r4, r4, #2
 8009690:	2600      	movs	r6, #0
 8009692:	42a6      	cmp	r6, r4
 8009694:	d105      	bne.n	80096a2 <__libc_init_array+0x2e>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	f855 3b04 	ldr.w	r3, [r5], #4
 800969c:	4798      	blx	r3
 800969e:	3601      	adds	r6, #1
 80096a0:	e7ee      	b.n	8009680 <__libc_init_array+0xc>
 80096a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a6:	4798      	blx	r3
 80096a8:	3601      	adds	r6, #1
 80096aa:	e7f2      	b.n	8009692 <__libc_init_array+0x1e>
 80096ac:	0800a634 	.word	0x0800a634
 80096b0:	0800a634 	.word	0x0800a634
 80096b4:	0800a634 	.word	0x0800a634
 80096b8:	0800a638 	.word	0x0800a638

080096bc <memset>:
 80096bc:	4402      	add	r2, r0
 80096be:	4603      	mov	r3, r0
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d100      	bne.n	80096c6 <memset+0xa>
 80096c4:	4770      	bx	lr
 80096c6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ca:	e7f9      	b.n	80096c0 <memset+0x4>

080096cc <siprintf>:
 80096cc:	b40e      	push	{r1, r2, r3}
 80096ce:	b500      	push	{lr}
 80096d0:	b09c      	sub	sp, #112	; 0x70
 80096d2:	ab1d      	add	r3, sp, #116	; 0x74
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	9006      	str	r0, [sp, #24]
 80096d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096dc:	4809      	ldr	r0, [pc, #36]	; (8009704 <siprintf+0x38>)
 80096de:	9107      	str	r1, [sp, #28]
 80096e0:	9104      	str	r1, [sp, #16]
 80096e2:	4909      	ldr	r1, [pc, #36]	; (8009708 <siprintf+0x3c>)
 80096e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	a902      	add	r1, sp, #8
 80096f0:	f000 f8f4 	bl	80098dc <_svfiprintf_r>
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	b01c      	add	sp, #112	; 0x70
 80096fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009700:	b003      	add	sp, #12
 8009702:	4770      	bx	lr
 8009704:	20000078 	.word	0x20000078
 8009708:	ffff0208 	.word	0xffff0208

0800970c <_strtol_l.constprop.0>:
 800970c:	2b01      	cmp	r3, #1
 800970e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009712:	d001      	beq.n	8009718 <_strtol_l.constprop.0+0xc>
 8009714:	2b24      	cmp	r3, #36	; 0x24
 8009716:	d906      	bls.n	8009726 <_strtol_l.constprop.0+0x1a>
 8009718:	f7ff ffa6 	bl	8009668 <__errno>
 800971c:	2316      	movs	r3, #22
 800971e:	6003      	str	r3, [r0, #0]
 8009720:	2000      	movs	r0, #0
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800980c <_strtol_l.constprop.0+0x100>
 800972a:	460d      	mov	r5, r1
 800972c:	462e      	mov	r6, r5
 800972e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009732:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009736:	f017 0708 	ands.w	r7, r7, #8
 800973a:	d1f7      	bne.n	800972c <_strtol_l.constprop.0+0x20>
 800973c:	2c2d      	cmp	r4, #45	; 0x2d
 800973e:	d132      	bne.n	80097a6 <_strtol_l.constprop.0+0x9a>
 8009740:	782c      	ldrb	r4, [r5, #0]
 8009742:	2701      	movs	r7, #1
 8009744:	1cb5      	adds	r5, r6, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d05b      	beq.n	8009802 <_strtol_l.constprop.0+0xf6>
 800974a:	2b10      	cmp	r3, #16
 800974c:	d109      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 800974e:	2c30      	cmp	r4, #48	; 0x30
 8009750:	d107      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 8009752:	782c      	ldrb	r4, [r5, #0]
 8009754:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009758:	2c58      	cmp	r4, #88	; 0x58
 800975a:	d14d      	bne.n	80097f8 <_strtol_l.constprop.0+0xec>
 800975c:	786c      	ldrb	r4, [r5, #1]
 800975e:	2310      	movs	r3, #16
 8009760:	3502      	adds	r5, #2
 8009762:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009766:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800976a:	f04f 0c00 	mov.w	ip, #0
 800976e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009772:	4666      	mov	r6, ip
 8009774:	fb03 8a19 	mls	sl, r3, r9, r8
 8009778:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800977c:	f1be 0f09 	cmp.w	lr, #9
 8009780:	d816      	bhi.n	80097b0 <_strtol_l.constprop.0+0xa4>
 8009782:	4674      	mov	r4, lr
 8009784:	42a3      	cmp	r3, r4
 8009786:	dd24      	ble.n	80097d2 <_strtol_l.constprop.0+0xc6>
 8009788:	f1bc 0f00 	cmp.w	ip, #0
 800978c:	db1e      	blt.n	80097cc <_strtol_l.constprop.0+0xc0>
 800978e:	45b1      	cmp	r9, r6
 8009790:	d31c      	bcc.n	80097cc <_strtol_l.constprop.0+0xc0>
 8009792:	d101      	bne.n	8009798 <_strtol_l.constprop.0+0x8c>
 8009794:	45a2      	cmp	sl, r4
 8009796:	db19      	blt.n	80097cc <_strtol_l.constprop.0+0xc0>
 8009798:	fb06 4603 	mla	r6, r6, r3, r4
 800979c:	f04f 0c01 	mov.w	ip, #1
 80097a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097a4:	e7e8      	b.n	8009778 <_strtol_l.constprop.0+0x6c>
 80097a6:	2c2b      	cmp	r4, #43	; 0x2b
 80097a8:	bf04      	itt	eq
 80097aa:	782c      	ldrbeq	r4, [r5, #0]
 80097ac:	1cb5      	addeq	r5, r6, #2
 80097ae:	e7ca      	b.n	8009746 <_strtol_l.constprop.0+0x3a>
 80097b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097b4:	f1be 0f19 	cmp.w	lr, #25
 80097b8:	d801      	bhi.n	80097be <_strtol_l.constprop.0+0xb2>
 80097ba:	3c37      	subs	r4, #55	; 0x37
 80097bc:	e7e2      	b.n	8009784 <_strtol_l.constprop.0+0x78>
 80097be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097c2:	f1be 0f19 	cmp.w	lr, #25
 80097c6:	d804      	bhi.n	80097d2 <_strtol_l.constprop.0+0xc6>
 80097c8:	3c57      	subs	r4, #87	; 0x57
 80097ca:	e7db      	b.n	8009784 <_strtol_l.constprop.0+0x78>
 80097cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80097d0:	e7e6      	b.n	80097a0 <_strtol_l.constprop.0+0x94>
 80097d2:	f1bc 0f00 	cmp.w	ip, #0
 80097d6:	da05      	bge.n	80097e4 <_strtol_l.constprop.0+0xd8>
 80097d8:	2322      	movs	r3, #34	; 0x22
 80097da:	6003      	str	r3, [r0, #0]
 80097dc:	4646      	mov	r6, r8
 80097de:	b942      	cbnz	r2, 80097f2 <_strtol_l.constprop.0+0xe6>
 80097e0:	4630      	mov	r0, r6
 80097e2:	e79e      	b.n	8009722 <_strtol_l.constprop.0+0x16>
 80097e4:	b107      	cbz	r7, 80097e8 <_strtol_l.constprop.0+0xdc>
 80097e6:	4276      	negs	r6, r6
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d0f9      	beq.n	80097e0 <_strtol_l.constprop.0+0xd4>
 80097ec:	f1bc 0f00 	cmp.w	ip, #0
 80097f0:	d000      	beq.n	80097f4 <_strtol_l.constprop.0+0xe8>
 80097f2:	1e69      	subs	r1, r5, #1
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	e7f3      	b.n	80097e0 <_strtol_l.constprop.0+0xd4>
 80097f8:	2430      	movs	r4, #48	; 0x30
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1b1      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 80097fe:	2308      	movs	r3, #8
 8009800:	e7af      	b.n	8009762 <_strtol_l.constprop.0+0x56>
 8009802:	2c30      	cmp	r4, #48	; 0x30
 8009804:	d0a5      	beq.n	8009752 <_strtol_l.constprop.0+0x46>
 8009806:	230a      	movs	r3, #10
 8009808:	e7ab      	b.n	8009762 <_strtol_l.constprop.0+0x56>
 800980a:	bf00      	nop
 800980c:	0800a4f9 	.word	0x0800a4f9

08009810 <strtol>:
 8009810:	4613      	mov	r3, r2
 8009812:	460a      	mov	r2, r1
 8009814:	4601      	mov	r1, r0
 8009816:	4802      	ldr	r0, [pc, #8]	; (8009820 <strtol+0x10>)
 8009818:	6800      	ldr	r0, [r0, #0]
 800981a:	f7ff bf77 	b.w	800970c <_strtol_l.constprop.0>
 800981e:	bf00      	nop
 8009820:	20000078 	.word	0x20000078

08009824 <__ssputs_r>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	688e      	ldr	r6, [r1, #8]
 800982a:	429e      	cmp	r6, r3
 800982c:	4682      	mov	sl, r0
 800982e:	460c      	mov	r4, r1
 8009830:	4690      	mov	r8, r2
 8009832:	461f      	mov	r7, r3
 8009834:	d838      	bhi.n	80098a8 <__ssputs_r+0x84>
 8009836:	898a      	ldrh	r2, [r1, #12]
 8009838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800983c:	d032      	beq.n	80098a4 <__ssputs_r+0x80>
 800983e:	6825      	ldr	r5, [r4, #0]
 8009840:	6909      	ldr	r1, [r1, #16]
 8009842:	eba5 0901 	sub.w	r9, r5, r1
 8009846:	6965      	ldr	r5, [r4, #20]
 8009848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800984c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009850:	3301      	adds	r3, #1
 8009852:	444b      	add	r3, r9
 8009854:	106d      	asrs	r5, r5, #1
 8009856:	429d      	cmp	r5, r3
 8009858:	bf38      	it	cc
 800985a:	461d      	movcc	r5, r3
 800985c:	0553      	lsls	r3, r2, #21
 800985e:	d531      	bpl.n	80098c4 <__ssputs_r+0xa0>
 8009860:	4629      	mov	r1, r5
 8009862:	f000 fb63 	bl	8009f2c <_malloc_r>
 8009866:	4606      	mov	r6, r0
 8009868:	b950      	cbnz	r0, 8009880 <__ssputs_r+0x5c>
 800986a:	230c      	movs	r3, #12
 800986c:	f8ca 3000 	str.w	r3, [sl]
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009876:	81a3      	strh	r3, [r4, #12]
 8009878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	6921      	ldr	r1, [r4, #16]
 8009882:	464a      	mov	r2, r9
 8009884:	f000 fabe 	bl	8009e04 <memcpy>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	6126      	str	r6, [r4, #16]
 8009896:	6165      	str	r5, [r4, #20]
 8009898:	444e      	add	r6, r9
 800989a:	eba5 0509 	sub.w	r5, r5, r9
 800989e:	6026      	str	r6, [r4, #0]
 80098a0:	60a5      	str	r5, [r4, #8]
 80098a2:	463e      	mov	r6, r7
 80098a4:	42be      	cmp	r6, r7
 80098a6:	d900      	bls.n	80098aa <__ssputs_r+0x86>
 80098a8:	463e      	mov	r6, r7
 80098aa:	6820      	ldr	r0, [r4, #0]
 80098ac:	4632      	mov	r2, r6
 80098ae:	4641      	mov	r1, r8
 80098b0:	f000 fab6 	bl	8009e20 <memmove>
 80098b4:	68a3      	ldr	r3, [r4, #8]
 80098b6:	1b9b      	subs	r3, r3, r6
 80098b8:	60a3      	str	r3, [r4, #8]
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	4433      	add	r3, r6
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7db      	b.n	800987c <__ssputs_r+0x58>
 80098c4:	462a      	mov	r2, r5
 80098c6:	f000 fba5 	bl	800a014 <_realloc_r>
 80098ca:	4606      	mov	r6, r0
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d1e1      	bne.n	8009894 <__ssputs_r+0x70>
 80098d0:	6921      	ldr	r1, [r4, #16]
 80098d2:	4650      	mov	r0, sl
 80098d4:	f000 fabe 	bl	8009e54 <_free_r>
 80098d8:	e7c7      	b.n	800986a <__ssputs_r+0x46>
	...

080098dc <_svfiprintf_r>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	4698      	mov	r8, r3
 80098e2:	898b      	ldrh	r3, [r1, #12]
 80098e4:	061b      	lsls	r3, r3, #24
 80098e6:	b09d      	sub	sp, #116	; 0x74
 80098e8:	4607      	mov	r7, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	d50e      	bpl.n	800990e <_svfiprintf_r+0x32>
 80098f0:	690b      	ldr	r3, [r1, #16]
 80098f2:	b963      	cbnz	r3, 800990e <_svfiprintf_r+0x32>
 80098f4:	2140      	movs	r1, #64	; 0x40
 80098f6:	f000 fb19 	bl	8009f2c <_malloc_r>
 80098fa:	6028      	str	r0, [r5, #0]
 80098fc:	6128      	str	r0, [r5, #16]
 80098fe:	b920      	cbnz	r0, 800990a <_svfiprintf_r+0x2e>
 8009900:	230c      	movs	r3, #12
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009908:	e0d1      	b.n	8009aae <_svfiprintf_r+0x1d2>
 800990a:	2340      	movs	r3, #64	; 0x40
 800990c:	616b      	str	r3, [r5, #20]
 800990e:	2300      	movs	r3, #0
 8009910:	9309      	str	r3, [sp, #36]	; 0x24
 8009912:	2320      	movs	r3, #32
 8009914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009918:	f8cd 800c 	str.w	r8, [sp, #12]
 800991c:	2330      	movs	r3, #48	; 0x30
 800991e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ac8 <_svfiprintf_r+0x1ec>
 8009922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009926:	f04f 0901 	mov.w	r9, #1
 800992a:	4623      	mov	r3, r4
 800992c:	469a      	mov	sl, r3
 800992e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009932:	b10a      	cbz	r2, 8009938 <_svfiprintf_r+0x5c>
 8009934:	2a25      	cmp	r2, #37	; 0x25
 8009936:	d1f9      	bne.n	800992c <_svfiprintf_r+0x50>
 8009938:	ebba 0b04 	subs.w	fp, sl, r4
 800993c:	d00b      	beq.n	8009956 <_svfiprintf_r+0x7a>
 800993e:	465b      	mov	r3, fp
 8009940:	4622      	mov	r2, r4
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ff6d 	bl	8009824 <__ssputs_r>
 800994a:	3001      	adds	r0, #1
 800994c:	f000 80aa 	beq.w	8009aa4 <_svfiprintf_r+0x1c8>
 8009950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009952:	445a      	add	r2, fp
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	f89a 3000 	ldrb.w	r3, [sl]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80a2 	beq.w	8009aa4 <_svfiprintf_r+0x1c8>
 8009960:	2300      	movs	r3, #0
 8009962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800996a:	f10a 0a01 	add.w	sl, sl, #1
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	9307      	str	r3, [sp, #28]
 8009972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009976:	931a      	str	r3, [sp, #104]	; 0x68
 8009978:	4654      	mov	r4, sl
 800997a:	2205      	movs	r2, #5
 800997c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009980:	4851      	ldr	r0, [pc, #324]	; (8009ac8 <_svfiprintf_r+0x1ec>)
 8009982:	f7f6 fc2d 	bl	80001e0 <memchr>
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	b9d8      	cbnz	r0, 80099c2 <_svfiprintf_r+0xe6>
 800998a:	06d0      	lsls	r0, r2, #27
 800998c:	bf44      	itt	mi
 800998e:	2320      	movmi	r3, #32
 8009990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009994:	0711      	lsls	r1, r2, #28
 8009996:	bf44      	itt	mi
 8009998:	232b      	movmi	r3, #43	; 0x2b
 800999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999e:	f89a 3000 	ldrb.w	r3, [sl]
 80099a2:	2b2a      	cmp	r3, #42	; 0x2a
 80099a4:	d015      	beq.n	80099d2 <_svfiprintf_r+0xf6>
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	4654      	mov	r4, sl
 80099aa:	2000      	movs	r0, #0
 80099ac:	f04f 0c0a 	mov.w	ip, #10
 80099b0:	4621      	mov	r1, r4
 80099b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b6:	3b30      	subs	r3, #48	; 0x30
 80099b8:	2b09      	cmp	r3, #9
 80099ba:	d94e      	bls.n	8009a5a <_svfiprintf_r+0x17e>
 80099bc:	b1b0      	cbz	r0, 80099ec <_svfiprintf_r+0x110>
 80099be:	9207      	str	r2, [sp, #28]
 80099c0:	e014      	b.n	80099ec <_svfiprintf_r+0x110>
 80099c2:	eba0 0308 	sub.w	r3, r0, r8
 80099c6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ca:	4313      	orrs	r3, r2
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	46a2      	mov	sl, r4
 80099d0:	e7d2      	b.n	8009978 <_svfiprintf_r+0x9c>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	1d19      	adds	r1, r3, #4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	9103      	str	r1, [sp, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfbb      	ittet	lt
 80099de:	425b      	neglt	r3, r3
 80099e0:	f042 0202 	orrlt.w	r2, r2, #2
 80099e4:	9307      	strge	r3, [sp, #28]
 80099e6:	9307      	strlt	r3, [sp, #28]
 80099e8:	bfb8      	it	lt
 80099ea:	9204      	strlt	r2, [sp, #16]
 80099ec:	7823      	ldrb	r3, [r4, #0]
 80099ee:	2b2e      	cmp	r3, #46	; 0x2e
 80099f0:	d10c      	bne.n	8009a0c <_svfiprintf_r+0x130>
 80099f2:	7863      	ldrb	r3, [r4, #1]
 80099f4:	2b2a      	cmp	r3, #42	; 0x2a
 80099f6:	d135      	bne.n	8009a64 <_svfiprintf_r+0x188>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	9203      	str	r2, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfb8      	it	lt
 8009a04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a08:	3402      	adds	r4, #2
 8009a0a:	9305      	str	r3, [sp, #20]
 8009a0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ad8 <_svfiprintf_r+0x1fc>
 8009a10:	7821      	ldrb	r1, [r4, #0]
 8009a12:	2203      	movs	r2, #3
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7f6 fbe3 	bl	80001e0 <memchr>
 8009a1a:	b140      	cbz	r0, 8009a2e <_svfiprintf_r+0x152>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	eba0 000a 	sub.w	r0, r0, sl
 8009a22:	fa03 f000 	lsl.w	r0, r3, r0
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	4303      	orrs	r3, r0
 8009a2a:	3401      	adds	r4, #1
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a32:	4826      	ldr	r0, [pc, #152]	; (8009acc <_svfiprintf_r+0x1f0>)
 8009a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a38:	2206      	movs	r2, #6
 8009a3a:	f7f6 fbd1 	bl	80001e0 <memchr>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d038      	beq.n	8009ab4 <_svfiprintf_r+0x1d8>
 8009a42:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <_svfiprintf_r+0x1f4>)
 8009a44:	bb1b      	cbnz	r3, 8009a8e <_svfiprintf_r+0x1b2>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	3307      	adds	r3, #7
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	3308      	adds	r3, #8
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a54:	4433      	add	r3, r6
 8009a56:	9309      	str	r3, [sp, #36]	; 0x24
 8009a58:	e767      	b.n	800992a <_svfiprintf_r+0x4e>
 8009a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5e:	460c      	mov	r4, r1
 8009a60:	2001      	movs	r0, #1
 8009a62:	e7a5      	b.n	80099b0 <_svfiprintf_r+0xd4>
 8009a64:	2300      	movs	r3, #0
 8009a66:	3401      	adds	r4, #1
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f04f 0c0a 	mov.w	ip, #10
 8009a70:	4620      	mov	r0, r4
 8009a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a76:	3a30      	subs	r2, #48	; 0x30
 8009a78:	2a09      	cmp	r2, #9
 8009a7a:	d903      	bls.n	8009a84 <_svfiprintf_r+0x1a8>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0c5      	beq.n	8009a0c <_svfiprintf_r+0x130>
 8009a80:	9105      	str	r1, [sp, #20]
 8009a82:	e7c3      	b.n	8009a0c <_svfiprintf_r+0x130>
 8009a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a88:	4604      	mov	r4, r0
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e7f0      	b.n	8009a70 <_svfiprintf_r+0x194>
 8009a8e:	ab03      	add	r3, sp, #12
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	462a      	mov	r2, r5
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <_svfiprintf_r+0x1f8>)
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f3af 8000 	nop.w
 8009a9e:	1c42      	adds	r2, r0, #1
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	d1d6      	bne.n	8009a52 <_svfiprintf_r+0x176>
 8009aa4:	89ab      	ldrh	r3, [r5, #12]
 8009aa6:	065b      	lsls	r3, r3, #25
 8009aa8:	f53f af2c 	bmi.w	8009904 <_svfiprintf_r+0x28>
 8009aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aae:	b01d      	add	sp, #116	; 0x74
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	ab03      	add	r3, sp, #12
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <_svfiprintf_r+0x1f8>)
 8009abc:	a904      	add	r1, sp, #16
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f000 f87a 	bl	8009bb8 <_printf_i>
 8009ac4:	e7eb      	b.n	8009a9e <_svfiprintf_r+0x1c2>
 8009ac6:	bf00      	nop
 8009ac8:	0800a5f9 	.word	0x0800a5f9
 8009acc:	0800a603 	.word	0x0800a603
 8009ad0:	00000000 	.word	0x00000000
 8009ad4:	08009825 	.word	0x08009825
 8009ad8:	0800a5ff 	.word	0x0800a5ff

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4699      	mov	r9, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b28:	1e13      	subs	r3, r2, #0
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b38:	4649      	mov	r1, r9
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c0      	blx	r8
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	68e5      	ldr	r5, [r4, #12]
 8009b46:	6832      	ldr	r2, [r6, #0]
 8009b48:	f003 0306 	and.w	r3, r3, #6
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	bf08      	it	eq
 8009b50:	1aad      	subeq	r5, r5, r2
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4649      	mov	r1, r9
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c0      	blx	r8
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	; 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c0      	blx	r8
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bc0:	2f78      	cmp	r7, #120	; 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	; 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d8 	beq.w	8009d8a <_printf_i+0x1d2>
 8009bda:	2f58      	cmp	r7, #88	; 0x58
 8009bdc:	f000 80a3 	beq.w	8009d26 <_printf_i+0x16e>
 8009be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	; (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d71 	.word	0x08009d71
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009d53 	.word	0x08009d53
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d93 	.word	0x08009d93
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d5b 	.word	0x08009d5b
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e0a3      	b.n	8009dac <_printf_i+0x1f4>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	6829      	ldr	r1, [r5, #0]
 8009c68:	0606      	lsls	r6, r0, #24
 8009c6a:	f101 0304 	add.w	r3, r1, #4
 8009c6e:	d50a      	bpl.n	8009c86 <_printf_i+0xce>
 8009c70:	680e      	ldr	r6, [r1, #0]
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	da03      	bge.n	8009c80 <_printf_i+0xc8>
 8009c78:	232d      	movs	r3, #45	; 0x2d
 8009c7a:	4276      	negs	r6, r6
 8009c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c80:	485e      	ldr	r0, [pc, #376]	; (8009dfc <_printf_i+0x244>)
 8009c82:	230a      	movs	r3, #10
 8009c84:	e019      	b.n	8009cba <_printf_i+0x102>
 8009c86:	680e      	ldr	r6, [r1, #0]
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c8e:	bf18      	it	ne
 8009c90:	b236      	sxthne	r6, r6
 8009c92:	e7ef      	b.n	8009c74 <_printf_i+0xbc>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	1d19      	adds	r1, r3, #4
 8009c9a:	6029      	str	r1, [r5, #0]
 8009c9c:	0601      	lsls	r1, r0, #24
 8009c9e:	d501      	bpl.n	8009ca4 <_printf_i+0xec>
 8009ca0:	681e      	ldr	r6, [r3, #0]
 8009ca2:	e002      	b.n	8009caa <_printf_i+0xf2>
 8009ca4:	0646      	lsls	r6, r0, #25
 8009ca6:	d5fb      	bpl.n	8009ca0 <_printf_i+0xe8>
 8009ca8:	881e      	ldrh	r6, [r3, #0]
 8009caa:	4854      	ldr	r0, [pc, #336]	; (8009dfc <_printf_i+0x244>)
 8009cac:	2f6f      	cmp	r7, #111	; 0x6f
 8009cae:	bf0c      	ite	eq
 8009cb0:	2308      	moveq	r3, #8
 8009cb2:	230a      	movne	r3, #10
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cba:	6865      	ldr	r5, [r4, #4]
 8009cbc:	60a5      	str	r5, [r4, #8]
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	bfa2      	ittt	ge
 8009cc2:	6821      	ldrge	r1, [r4, #0]
 8009cc4:	f021 0104 	bicge.w	r1, r1, #4
 8009cc8:	6021      	strge	r1, [r4, #0]
 8009cca:	b90e      	cbnz	r6, 8009cd0 <_printf_i+0x118>
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	d04d      	beq.n	8009d6c <_printf_i+0x1b4>
 8009cd0:	4615      	mov	r5, r2
 8009cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cda:	5dc7      	ldrb	r7, [r0, r7]
 8009cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ce0:	4637      	mov	r7, r6
 8009ce2:	42bb      	cmp	r3, r7
 8009ce4:	460e      	mov	r6, r1
 8009ce6:	d9f4      	bls.n	8009cd2 <_printf_i+0x11a>
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d10b      	bne.n	8009d04 <_printf_i+0x14c>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	07de      	lsls	r6, r3, #31
 8009cf0:	d508      	bpl.n	8009d04 <_printf_i+0x14c>
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	bfde      	ittt	le
 8009cfa:	2330      	movle	r3, #48	; 0x30
 8009cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d04:	1b52      	subs	r2, r2, r5
 8009d06:	6122      	str	r2, [r4, #16]
 8009d08:	f8cd a000 	str.w	sl, [sp]
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	aa03      	add	r2, sp, #12
 8009d10:	4621      	mov	r1, r4
 8009d12:	4640      	mov	r0, r8
 8009d14:	f7ff fee2 	bl	8009adc <_printf_common>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d14c      	bne.n	8009db6 <_printf_i+0x1fe>
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d20:	b004      	add	sp, #16
 8009d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d26:	4835      	ldr	r0, [pc, #212]	; (8009dfc <_printf_i+0x244>)
 8009d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d2c:	6829      	ldr	r1, [r5, #0]
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d34:	6029      	str	r1, [r5, #0]
 8009d36:	061d      	lsls	r5, r3, #24
 8009d38:	d514      	bpl.n	8009d64 <_printf_i+0x1ac>
 8009d3a:	07df      	lsls	r7, r3, #31
 8009d3c:	bf44      	itt	mi
 8009d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d42:	6023      	strmi	r3, [r4, #0]
 8009d44:	b91e      	cbnz	r6, 8009d4e <_printf_i+0x196>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	f023 0320 	bic.w	r3, r3, #32
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e7b0      	b.n	8009cb4 <_printf_i+0xfc>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	2378      	movs	r3, #120	; 0x78
 8009d5c:	4828      	ldr	r0, [pc, #160]	; (8009e00 <_printf_i+0x248>)
 8009d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d62:	e7e3      	b.n	8009d2c <_printf_i+0x174>
 8009d64:	0659      	lsls	r1, r3, #25
 8009d66:	bf48      	it	mi
 8009d68:	b2b6      	uxthmi	r6, r6
 8009d6a:	e7e6      	b.n	8009d3a <_printf_i+0x182>
 8009d6c:	4615      	mov	r5, r2
 8009d6e:	e7bb      	b.n	8009ce8 <_printf_i+0x130>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	6826      	ldr	r6, [r4, #0]
 8009d74:	6961      	ldr	r1, [r4, #20]
 8009d76:	1d18      	adds	r0, r3, #4
 8009d78:	6028      	str	r0, [r5, #0]
 8009d7a:	0635      	lsls	r5, r6, #24
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	d501      	bpl.n	8009d84 <_printf_i+0x1cc>
 8009d80:	6019      	str	r1, [r3, #0]
 8009d82:	e002      	b.n	8009d8a <_printf_i+0x1d2>
 8009d84:	0670      	lsls	r0, r6, #25
 8009d86:	d5fb      	bpl.n	8009d80 <_printf_i+0x1c8>
 8009d88:	8019      	strh	r1, [r3, #0]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	6123      	str	r3, [r4, #16]
 8009d8e:	4615      	mov	r5, r2
 8009d90:	e7ba      	b.n	8009d08 <_printf_i+0x150>
 8009d92:	682b      	ldr	r3, [r5, #0]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	602a      	str	r2, [r5, #0]
 8009d98:	681d      	ldr	r5, [r3, #0]
 8009d9a:	6862      	ldr	r2, [r4, #4]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7f6 fa1e 	bl	80001e0 <memchr>
 8009da4:	b108      	cbz	r0, 8009daa <_printf_i+0x1f2>
 8009da6:	1b40      	subs	r0, r0, r5
 8009da8:	6060      	str	r0, [r4, #4]
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	6123      	str	r3, [r4, #16]
 8009dae:	2300      	movs	r3, #0
 8009db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db4:	e7a8      	b.n	8009d08 <_printf_i+0x150>
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4649      	mov	r1, r9
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	47d0      	blx	sl
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d0ab      	beq.n	8009d1c <_printf_i+0x164>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	079b      	lsls	r3, r3, #30
 8009dc8:	d413      	bmi.n	8009df2 <_printf_i+0x23a>
 8009dca:	68e0      	ldr	r0, [r4, #12]
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	4298      	cmp	r0, r3
 8009dd0:	bfb8      	it	lt
 8009dd2:	4618      	movlt	r0, r3
 8009dd4:	e7a4      	b.n	8009d20 <_printf_i+0x168>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4632      	mov	r2, r6
 8009dda:	4649      	mov	r1, r9
 8009ddc:	4640      	mov	r0, r8
 8009dde:	47d0      	blx	sl
 8009de0:	3001      	adds	r0, #1
 8009de2:	d09b      	beq.n	8009d1c <_printf_i+0x164>
 8009de4:	3501      	adds	r5, #1
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	9903      	ldr	r1, [sp, #12]
 8009dea:	1a5b      	subs	r3, r3, r1
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dcf2      	bgt.n	8009dd6 <_printf_i+0x21e>
 8009df0:	e7eb      	b.n	8009dca <_printf_i+0x212>
 8009df2:	2500      	movs	r5, #0
 8009df4:	f104 0619 	add.w	r6, r4, #25
 8009df8:	e7f5      	b.n	8009de6 <_printf_i+0x22e>
 8009dfa:	bf00      	nop
 8009dfc:	0800a60a 	.word	0x0800a60a
 8009e00:	0800a61b 	.word	0x0800a61b

08009e04 <memcpy>:
 8009e04:	440a      	add	r2, r1
 8009e06:	4291      	cmp	r1, r2
 8009e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e0c:	d100      	bne.n	8009e10 <memcpy+0xc>
 8009e0e:	4770      	bx	lr
 8009e10:	b510      	push	{r4, lr}
 8009e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e1a:	4291      	cmp	r1, r2
 8009e1c:	d1f9      	bne.n	8009e12 <memcpy+0xe>
 8009e1e:	bd10      	pop	{r4, pc}

08009e20 <memmove>:
 8009e20:	4288      	cmp	r0, r1
 8009e22:	b510      	push	{r4, lr}
 8009e24:	eb01 0402 	add.w	r4, r1, r2
 8009e28:	d902      	bls.n	8009e30 <memmove+0x10>
 8009e2a:	4284      	cmp	r4, r0
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	d807      	bhi.n	8009e40 <memmove+0x20>
 8009e30:	1e43      	subs	r3, r0, #1
 8009e32:	42a1      	cmp	r1, r4
 8009e34:	d008      	beq.n	8009e48 <memmove+0x28>
 8009e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e3e:	e7f8      	b.n	8009e32 <memmove+0x12>
 8009e40:	4402      	add	r2, r0
 8009e42:	4601      	mov	r1, r0
 8009e44:	428a      	cmp	r2, r1
 8009e46:	d100      	bne.n	8009e4a <memmove+0x2a>
 8009e48:	bd10      	pop	{r4, pc}
 8009e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e52:	e7f7      	b.n	8009e44 <memmove+0x24>

08009e54 <_free_r>:
 8009e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d044      	beq.n	8009ee4 <_free_r+0x90>
 8009e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5e:	9001      	str	r0, [sp, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f1a1 0404 	sub.w	r4, r1, #4
 8009e66:	bfb8      	it	lt
 8009e68:	18e4      	addlt	r4, r4, r3
 8009e6a:	f000 f913 	bl	800a094 <__malloc_lock>
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ee8 <_free_r+0x94>)
 8009e70:	9801      	ldr	r0, [sp, #4]
 8009e72:	6813      	ldr	r3, [r2, #0]
 8009e74:	b933      	cbnz	r3, 8009e84 <_free_r+0x30>
 8009e76:	6063      	str	r3, [r4, #4]
 8009e78:	6014      	str	r4, [r2, #0]
 8009e7a:	b003      	add	sp, #12
 8009e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e80:	f000 b90e 	b.w	800a0a0 <__malloc_unlock>
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	d908      	bls.n	8009e9a <_free_r+0x46>
 8009e88:	6825      	ldr	r5, [r4, #0]
 8009e8a:	1961      	adds	r1, r4, r5
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf01      	itttt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	1949      	addeq	r1, r1, r5
 8009e96:	6021      	streq	r1, [r4, #0]
 8009e98:	e7ed      	b.n	8009e76 <_free_r+0x22>
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	b10b      	cbz	r3, 8009ea4 <_free_r+0x50>
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d9fa      	bls.n	8009e9a <_free_r+0x46>
 8009ea4:	6811      	ldr	r1, [r2, #0]
 8009ea6:	1855      	adds	r5, r2, r1
 8009ea8:	42a5      	cmp	r5, r4
 8009eaa:	d10b      	bne.n	8009ec4 <_free_r+0x70>
 8009eac:	6824      	ldr	r4, [r4, #0]
 8009eae:	4421      	add	r1, r4
 8009eb0:	1854      	adds	r4, r2, r1
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	6011      	str	r1, [r2, #0]
 8009eb6:	d1e0      	bne.n	8009e7a <_free_r+0x26>
 8009eb8:	681c      	ldr	r4, [r3, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	6053      	str	r3, [r2, #4]
 8009ebe:	4421      	add	r1, r4
 8009ec0:	6011      	str	r1, [r2, #0]
 8009ec2:	e7da      	b.n	8009e7a <_free_r+0x26>
 8009ec4:	d902      	bls.n	8009ecc <_free_r+0x78>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	e7d6      	b.n	8009e7a <_free_r+0x26>
 8009ecc:	6825      	ldr	r5, [r4, #0]
 8009ece:	1961      	adds	r1, r4, r5
 8009ed0:	428b      	cmp	r3, r1
 8009ed2:	bf04      	itt	eq
 8009ed4:	6819      	ldreq	r1, [r3, #0]
 8009ed6:	685b      	ldreq	r3, [r3, #4]
 8009ed8:	6063      	str	r3, [r4, #4]
 8009eda:	bf04      	itt	eq
 8009edc:	1949      	addeq	r1, r1, r5
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	6054      	str	r4, [r2, #4]
 8009ee2:	e7ca      	b.n	8009e7a <_free_r+0x26>
 8009ee4:	b003      	add	sp, #12
 8009ee6:	bd30      	pop	{r4, r5, pc}
 8009ee8:	20000594 	.word	0x20000594

08009eec <sbrk_aligned>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	4e0e      	ldr	r6, [pc, #56]	; (8009f28 <sbrk_aligned+0x3c>)
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	6831      	ldr	r1, [r6, #0]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	b911      	cbnz	r1, 8009efe <sbrk_aligned+0x12>
 8009ef8:	f000 f8bc 	bl	800a074 <_sbrk_r>
 8009efc:	6030      	str	r0, [r6, #0]
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 f8b7 	bl	800a074 <_sbrk_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d00a      	beq.n	8009f20 <sbrk_aligned+0x34>
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d007      	beq.n	8009f24 <sbrk_aligned+0x38>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 f8ac 	bl	800a074 <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d101      	bne.n	8009f24 <sbrk_aligned+0x38>
 8009f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	20000598 	.word	0x20000598

08009f2c <_malloc_r>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	1ccd      	adds	r5, r1, #3
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	4607      	mov	r7, r0
 8009f42:	db01      	blt.n	8009f48 <_malloc_r+0x1c>
 8009f44:	42a9      	cmp	r1, r5
 8009f46:	d905      	bls.n	8009f54 <_malloc_r+0x28>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	4630      	mov	r0, r6
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	4e2e      	ldr	r6, [pc, #184]	; (800a010 <_malloc_r+0xe4>)
 8009f56:	f000 f89d 	bl	800a094 <__malloc_lock>
 8009f5a:	6833      	ldr	r3, [r6, #0]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	bb34      	cbnz	r4, 8009fae <_malloc_r+0x82>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	f7ff ffc2 	bl	8009eec <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	d14d      	bne.n	800a00a <_malloc_r+0xde>
 8009f6e:	6834      	ldr	r4, [r6, #0]
 8009f70:	4626      	mov	r6, r4
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d140      	bne.n	8009ff8 <_malloc_r+0xcc>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	eb04 0803 	add.w	r8, r4, r3
 8009f80:	f000 f878 	bl	800a074 <_sbrk_r>
 8009f84:	4580      	cmp	r8, r0
 8009f86:	d13a      	bne.n	8009ffe <_malloc_r+0xd2>
 8009f88:	6821      	ldr	r1, [r4, #0]
 8009f8a:	3503      	adds	r5, #3
 8009f8c:	1a6d      	subs	r5, r5, r1
 8009f8e:	f025 0503 	bic.w	r5, r5, #3
 8009f92:	3508      	adds	r5, #8
 8009f94:	2d0c      	cmp	r5, #12
 8009f96:	bf38      	it	cc
 8009f98:	250c      	movcc	r5, #12
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff ffa5 	bl	8009eec <sbrk_aligned>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d02b      	beq.n	8009ffe <_malloc_r+0xd2>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	442b      	add	r3, r5
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	e00e      	b.n	8009fcc <_malloc_r+0xa0>
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	1b52      	subs	r2, r2, r5
 8009fb2:	d41e      	bmi.n	8009ff2 <_malloc_r+0xc6>
 8009fb4:	2a0b      	cmp	r2, #11
 8009fb6:	d916      	bls.n	8009fe6 <_malloc_r+0xba>
 8009fb8:	1961      	adds	r1, r4, r5
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	6025      	str	r5, [r4, #0]
 8009fbe:	bf18      	it	ne
 8009fc0:	6059      	strne	r1, [r3, #4]
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	bf08      	it	eq
 8009fc6:	6031      	streq	r1, [r6, #0]
 8009fc8:	5162      	str	r2, [r4, r5]
 8009fca:	604b      	str	r3, [r1, #4]
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f104 060b 	add.w	r6, r4, #11
 8009fd2:	f000 f865 	bl	800a0a0 <__malloc_unlock>
 8009fd6:	f026 0607 	bic.w	r6, r6, #7
 8009fda:	1d23      	adds	r3, r4, #4
 8009fdc:	1af2      	subs	r2, r6, r3
 8009fde:	d0b6      	beq.n	8009f4e <_malloc_r+0x22>
 8009fe0:	1b9b      	subs	r3, r3, r6
 8009fe2:	50a3      	str	r3, [r4, r2]
 8009fe4:	e7b3      	b.n	8009f4e <_malloc_r+0x22>
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	bf0c      	ite	eq
 8009fec:	6032      	streq	r2, [r6, #0]
 8009fee:	605a      	strne	r2, [r3, #4]
 8009ff0:	e7ec      	b.n	8009fcc <_malloc_r+0xa0>
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	6864      	ldr	r4, [r4, #4]
 8009ff6:	e7b2      	b.n	8009f5e <_malloc_r+0x32>
 8009ff8:	4634      	mov	r4, r6
 8009ffa:	6876      	ldr	r6, [r6, #4]
 8009ffc:	e7b9      	b.n	8009f72 <_malloc_r+0x46>
 8009ffe:	230c      	movs	r3, #12
 800a000:	603b      	str	r3, [r7, #0]
 800a002:	4638      	mov	r0, r7
 800a004:	f000 f84c 	bl	800a0a0 <__malloc_unlock>
 800a008:	e7a1      	b.n	8009f4e <_malloc_r+0x22>
 800a00a:	6025      	str	r5, [r4, #0]
 800a00c:	e7de      	b.n	8009fcc <_malloc_r+0xa0>
 800a00e:	bf00      	nop
 800a010:	20000594 	.word	0x20000594

0800a014 <_realloc_r>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	4680      	mov	r8, r0
 800a01a:	4614      	mov	r4, r2
 800a01c:	460e      	mov	r6, r1
 800a01e:	b921      	cbnz	r1, 800a02a <_realloc_r+0x16>
 800a020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a024:	4611      	mov	r1, r2
 800a026:	f7ff bf81 	b.w	8009f2c <_malloc_r>
 800a02a:	b92a      	cbnz	r2, 800a038 <_realloc_r+0x24>
 800a02c:	f7ff ff12 	bl	8009e54 <_free_r>
 800a030:	4625      	mov	r5, r4
 800a032:	4628      	mov	r0, r5
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	f000 f838 	bl	800a0ac <_malloc_usable_size_r>
 800a03c:	4284      	cmp	r4, r0
 800a03e:	4607      	mov	r7, r0
 800a040:	d802      	bhi.n	800a048 <_realloc_r+0x34>
 800a042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a046:	d812      	bhi.n	800a06e <_realloc_r+0x5a>
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff ff6e 	bl	8009f2c <_malloc_r>
 800a050:	4605      	mov	r5, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d0ed      	beq.n	800a032 <_realloc_r+0x1e>
 800a056:	42bc      	cmp	r4, r7
 800a058:	4622      	mov	r2, r4
 800a05a:	4631      	mov	r1, r6
 800a05c:	bf28      	it	cs
 800a05e:	463a      	movcs	r2, r7
 800a060:	f7ff fed0 	bl	8009e04 <memcpy>
 800a064:	4631      	mov	r1, r6
 800a066:	4640      	mov	r0, r8
 800a068:	f7ff fef4 	bl	8009e54 <_free_r>
 800a06c:	e7e1      	b.n	800a032 <_realloc_r+0x1e>
 800a06e:	4635      	mov	r5, r6
 800a070:	e7df      	b.n	800a032 <_realloc_r+0x1e>
	...

0800a074 <_sbrk_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d06      	ldr	r5, [pc, #24]	; (800a090 <_sbrk_r+0x1c>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f8 fbe8 	bl	8002854 <_sbrk>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_sbrk_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_sbrk_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	2000059c 	.word	0x2000059c

0800a094 <__malloc_lock>:
 800a094:	4801      	ldr	r0, [pc, #4]	; (800a09c <__malloc_lock+0x8>)
 800a096:	f000 b811 	b.w	800a0bc <__retarget_lock_acquire_recursive>
 800a09a:	bf00      	nop
 800a09c:	200005a0 	.word	0x200005a0

0800a0a0 <__malloc_unlock>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	; (800a0a8 <__malloc_unlock+0x8>)
 800a0a2:	f000 b80c 	b.w	800a0be <__retarget_lock_release_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	200005a0 	.word	0x200005a0

0800a0ac <_malloc_usable_size_r>:
 800a0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b0:	1f18      	subs	r0, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfbc      	itt	lt
 800a0b6:	580b      	ldrlt	r3, [r1, r0]
 800a0b8:	18c0      	addlt	r0, r0, r3
 800a0ba:	4770      	bx	lr

0800a0bc <__retarget_lock_acquire_recursive>:
 800a0bc:	4770      	bx	lr

0800a0be <__retarget_lock_release_recursive>:
 800a0be:	4770      	bx	lr

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
