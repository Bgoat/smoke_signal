
BaseCLI_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008090  08008090  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200000dc  08008174  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008174  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d0b  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004316  00000000  00000000  00037e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac5f  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c52a  00000000  00000000  0005957f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f54  00000000  00000000  00075aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a9fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  0010aa50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b7c 	.word	0x08007b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	08007b7c 	.word	0x08007b7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	440b      	add	r3, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d114      	bne.n	80005d4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
		i++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005b4:	e00e      	b.n	80005d4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	440b      	add	r3, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d001      	beq.n	80005ce <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d11a      	bne.n	8000610 <ConsoleCommandMatch+0x8c>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d817      	bhi.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d011      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d00b      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	d005      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1d2      	bne.n	80005b6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000610:	68bb      	ldr	r3, [r7, #8]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800061e:	b480      	push	{r7}
 8000620:	b087      	sub	sp, #28
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000636:	e00d      	b.n	8000654 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	441a      	add	r2, r3
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	440b      	add	r3, r1
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	701a      	strb	r2, [r3, #0]
		i++;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3ed      	bcc.n	8000638 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800065c:	e007      	b.n	800066e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d9f4      	bls.n	800065e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000674:	693b      	ldr	r3, [r7, #16]
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000694:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000696:	e002      	b.n	800069e <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d009      	beq.n	80006be <ConsoleCommandEndline+0x3c>
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d003      	beq.n	80006be <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3ec      	bcc.n	8000698 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d201      	bcs.n	80006ca <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80006de:	f000 fca3 	bl	8001028 <ConsoleIoInit>
	ConsoleIoSendString("Welcome your gateway to testing code and hardware.");
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <ConsoleInit+0x48>)
 80006e4:	f000 fcd4 	bl	8001090 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <ConsoleInit+0x4c>)
 80006ea:	f000 fcd1 	bl	8001090 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <ConsoleInit+0x50>)
 80006f0:	f000 fcce 	bl	8001090 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <ConsoleInit+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e007      	b.n	8000710 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <ConsoleInit+0x58>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d9f4      	bls.n	8000700 <ConsoleInit+0x28>
	}

}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08007b94 	.word	0x08007b94
 8000724:	08007bc8 	.word	0x08007bc8
 8000728:	08007bcc 	.word	0x08007bcc
 800072c:	200001f8 	.word	0x200001f8
 8000730:	200000f8 	.word	0x200000f8

08000734 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800073a:	4b54      	ldr	r3, [pc, #336]	; (800088c <ConsoleProcess+0x158>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a54      	ldr	r2, [pc, #336]	; (8000890 <ConsoleProcess+0x15c>)
 8000740:	1898      	adds	r0, r3, r2
 8000742:	4b52      	ldr	r3, [pc, #328]	; (800088c <ConsoleProcess+0x158>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800074a:	463a      	mov	r2, r7
 800074c:	4619      	mov	r1, r3
 800074e:	f000 fc73 	bl	8001038 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ConsoleProcess+0x2e>
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <ConsoleProcess+0x160>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8091 	beq.w	8000884 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <ConsoleProcess+0x160>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <ConsoleProcess+0x158>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a46      	ldr	r2, [pc, #280]	; (800088c <ConsoleProcess+0x158>)
 8000772:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <ConsoleProcess+0x158>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4845      	ldr	r0, [pc, #276]	; (8000890 <ConsoleProcess+0x15c>)
 800077c:	f7ff ff81 	bl	8000682 <ConsoleCommandEndline>
 8000780:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db7d      	blt.n	8000884 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000788:	f000 fc44 	bl	8001014 <ConsoleCommandsGetTable>
 800078c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000798:	e03d      	b.n	8000816 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4613      	mov	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	461a      	mov	r2, r3
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4938      	ldr	r1, [pc, #224]	; (8000890 <ConsoleProcess+0x15c>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee8 	bl	8000584 <ConsoleCommandMatch>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02a      	beq.n	8000810 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	4613      	mov	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	461a      	mov	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4830      	ldr	r0, [pc, #192]	; (8000890 <ConsoleProcess+0x15c>)
 80007ce:	4798      	blx	r3
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d017      	beq.n	800080a <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <ConsoleProcess+0x164>)
 80007dc:	f000 fc58 	bl	8001090 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <ConsoleProcess+0x15c>)
 80007e2:	f000 fc55 	bl	8001090 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <ConsoleProcess+0x168>)
 80007e8:	f000 fc52 	bl	8001090 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	461a      	mov	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	3308      	adds	r3, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fc46 	bl	8001090 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <ConsoleProcess+0x16c>)
 8000806:	f000 fc43 	bl	8001090 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e002      	b.n	8000816 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4613      	mov	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	461a      	mov	r2, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d003      	beq.n	8000834 <ConsoleProcess+0x100>
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000832:	d0b2      	beq.n	800079a <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00d      	beq.n	8000856 <ConsoleProcess+0x122>
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000840:	d109      	bne.n	8000856 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <ConsoleProcess+0x158>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d905      	bls.n	8000856 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <ConsoleProcess+0x170>)
 800084c:	f000 fc20 	bl	8001090 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <ConsoleProcess+0x16c>)
 8000852:	f000 fc1d 	bl	8001090 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <ConsoleProcess+0x158>)
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	461a      	mov	r2, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <ConsoleProcess+0x15c>)
 8000862:	f7ff fedc 	bl	800061e <ConsoleResetBuffer>
 8000866:	4603      	mov	r3, r0
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <ConsoleProcess+0x158>)
 800086a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <ConsoleProcess+0x158>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <ConsoleProcess+0x160>)
 800087c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <ConsoleProcess+0x174>)
 8000880:	f000 fc06 	bl	8001090 <ConsoleIoSendString>
		}
	}
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001f8 	.word	0x200001f8
 8000890:	200000f8 	.word	0x200000f8
 8000894:	200001fc 	.word	0x200001fc
 8000898:	08007bd0 	.word	0x08007bd0
 800089c:	08007bd8 	.word	0x08007bd8
 80008a0:	08007bc8 	.word	0x08007bc8
 80008a4:	08007be0 	.word	0x08007be0
 80008a8:	08007bcc 	.word	0x08007bcc

080008ac <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	460b      	mov	r3, r1
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008c6:	e00b      	b.n	80008e0 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d102      	bne.n	80008da <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3301      	adds	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3301      	adds	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d002      	beq.n	80008ee <ConsoleParamFindN+0x42>
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	2bff      	cmp	r3, #255	; 0xff
 80008ec:	d9ec      	bls.n	80008c8 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d102      	bne.n	80008fc <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80008f6:	2310      	movs	r3, #16
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	e002      	b.n	8000902 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3724      	adds	r7, #36	; 0x24
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	460b      	mov	r3, r1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000922:	f107 021c 	add.w	r2, r7, #28
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffbe 	bl	80008ac <ConsoleParamFindN>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	4413      	add	r3, r2
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800094a:	e011      	b.n	8000970 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000958:	701a      	strb	r2, [r3, #0]
		i++;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000970:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d00a      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
 8000978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800097c:	2b0d      	cmp	r3, #13
 800097e:	d006      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000984:	2b20      	cmp	r3, #32
 8000986:	d002      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	2b07      	cmp	r3, #7
 800098c:	d9de      	bls.n	800094c <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	2b08      	cmp	r3, #8
 8000992:	d102      	bne.n	800099a <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000994:	2310      	movs	r3, #16
 8000996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800099a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10e      	bne.n	80009c0 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 fbb2 	bl	800711c <atoi>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	460b      	mov	r3, r1
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	4619      	mov	r1, r3
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff5e 	bl	80008ac <ConsoleParamFindN>
 80009f0:	4603      	mov	r3, r0
 80009f2:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80009f4:	7ffb      	ldrb	r3, [r7, #31]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d12c      	bne.n	8000a54 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e01e      	b.n	8000a3e <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a00:	7ffb      	ldrb	r3, [r7, #31]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10d      	bne.n	8000a22 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f107 0217 	add.w	r2, r7, #23
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f8e1 	bl	8000be0 <ConsoleUtilHexCharToInt>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a34:	4413      	add	r3, r2
 8000a36:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d9dd      	bls.n	8000a00 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	2b11      	cmp	r3, #17
 8000a48:	d101      	bne.n	8000a4e <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a52:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e01b      	b.n	8000aaa <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f1c3 0303 	rsb	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa42 f303 	asr.w	r3, r2, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	441a      	add	r2, r3
 8000a96:	7cbb      	ldrb	r3, [r7, #18]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8e1 	bl	8000c62 <ConsoleUtilsIntToHexChar>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d9e0      	bls.n	8000a72 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fae5 	bl	8001090 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da07      	bge.n	8000afa <smallItoa+0x2a>
		isNegative = true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	425b      	negs	r3, r3
 8000af2:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000afe:	e007      	b.n	8000b10 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b08:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f1      	bne.n	8000b00 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	fb01 f202 	mul.w	r2, r1, r2
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	440b      	add	r3, r1
 8000b48:	3230      	adds	r2, #48	; 0x30
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b56:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1e6      	bne.n	8000b30 <smallItoa+0x60>

	if (isNegative) {
 8000b62:	7ffb      	ldrb	r3, [r7, #31]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	222d      	movs	r2, #45	; 0x2d
 8000b6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	f107 0108 	add.w	r1, r7, #8
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff9e 	bl	8000ad0 <smallItoa>
	ConsoleIoSendString(out);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fa79 	bl	8001090 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ConsoleSendParamInt32>:

// ConsoleSendParamInt32
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt32(int32_t parameterInt)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	char out[INT32_MAX_STR_LENGTH];
	memset(out, 0, sizeof(out));
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fadd 	bl	8007178 <memset>

	itoa (parameterInt, out, 10);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff82 	bl	8000ad0 <smallItoa>
	ConsoleIoSendString(out);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa5d 	bl	8001090 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ConsoleUtilHexCharToInt>:
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8000bf4:	d908      	bls.n	8000c08 <ConsoleUtilHexCharToInt+0x28>
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b39      	cmp	r3, #57	; 0x39
 8000bfa:	d805      	bhi.n	8000c08 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3b30      	subs	r3, #48	; 0x30
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e025      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b40      	cmp	r3, #64	; 0x40
 8000c0c:	d908      	bls.n	8000c20 <ConsoleUtilHexCharToInt+0x40>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b46      	cmp	r3, #70	; 0x46
 8000c12:	d805      	bhi.n	8000c20 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	3b37      	subs	r3, #55	; 0x37
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e019      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b60      	cmp	r3, #96	; 0x60
 8000c24:	d908      	bls.n	8000c38 <ConsoleUtilHexCharToInt+0x58>
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b66      	cmp	r3, #102	; 0x66
 8000c2a:	d805      	bhi.n	8000c38 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	3b57      	subs	r3, #87	; 0x57
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e00d      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b0a      	cmp	r3, #10
 8000c3c:	d105      	bne.n	8000c4a <ConsoleUtilHexCharToInt+0x6a>
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b0d      	cmp	r3, #13
 8000c42:	d102      	bne.n	8000c4a <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	d102      	bne.n	8000c50 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c4a:	2311      	movs	r3, #17
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c50:	2310      	movs	r3, #16
 8000c52:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	6039      	str	r1, [r7, #0]
 8000c6c:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	d805      	bhi.n	8000c84 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3330      	adds	r3, #48	; 0x30
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e00d      	b.n	8000ca0 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d908      	bls.n	8000c9c <ConsoleUtilsIntToHexChar+0x3a>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d805      	bhi.n	8000c9c <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3337      	adds	r3, #55	; 0x37
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e001      	b.n	8000ca0 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cd0:	2309      	movs	r3, #9
 8000cd2:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e01e      	b.n	8000d18 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <ConsoleCommandHelp+0x68>)
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f9d0 	bl	8001090 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <ConsoleCommandHelp+0x6c>)
 8000cf2:	f000 f9cd 	bl	8001090 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	3308      	adds	r3, #8
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <ConsoleCommandHelp+0x68>)
 8000d04:	4413      	add	r3, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f9c2 	bl	8001090 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <ConsoleCommandHelp+0x70>)
 8000d0e:	f000 f9bf 	bl	8001090 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3db      	bcc.n	8000cda <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d22:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08007cb4 	.word	0x08007cb4
 8000d30:	08007c28 	.word	0x08007c28
 8000d34:	08007c2c 	.word	0x08007c2c

08000d38 <ConsoleCommandAccel>:
static eCommandResult_T ConsoleCommandAccel(const char buffer[])
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_ACCELERO_GetXYZ(&data_xyz);
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fe1b 	bl	8002980 <BSP_ACCELERO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11d      	bne.n	8000d90 <ConsoleCommandAccel+0x58>
	{
		ConsoleIoSendString("X is ");
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <ConsoleCommandAccel+0x64>)
 8000d56:	f000 f99b 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8000d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff0b 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <ConsoleCommandAccel+0x68>)
 8000d66:	f000 f993 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8000d6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff03 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <ConsoleCommandAccel+0x6c>)
 8000d76:	f000 f98b 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8000d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fefb 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <ConsoleCommandAccel+0x70>)
 8000d86:	f000 f983 	bl	8001090 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <ConsoleCommandAccel+0x74>)
 8000d8c:	f000 f980 	bl	8001090 <ConsoleIoSendString>
	}
	return result;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08007c30 	.word	0x08007c30
 8000da0:	08007c38 	.word	0x08007c38
 8000da4:	08007c40 	.word	0x08007c40
 8000da8:	08007c48 	.word	0x08007c48
 8000dac:	08007c2c 	.word	0x08007c2c

08000db0 <ConsoleCommandGyro>:
static eCommandResult_T ConsoleCommandGyro(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int16_t data_xyz[3];
	BSP_GYRO_GetXYZ(&data_xyz);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fe5d 	bl	8002a7c <BSP_GYRO_GetXYZ>
	eCommandResult_T result = COMMAND_SUCCESS;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d11d      	bne.n	8000e08 <ConsoleCommandGyro+0x58>
	{
		ConsoleIoSendString("X is ");
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <ConsoleCommandGyro+0x64>)
 8000dce:	f000 f95f 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[0]);
 8000dd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fecf 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Y is ");
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <ConsoleCommandGyro+0x68>)
 8000dde:	f000 f957 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[1]);
 8000de2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fec7 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" Z is ");
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <ConsoleCommandGyro+0x6c>)
 8000dee:	f000 f94f 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(data_xyz[2]);
 8000df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff febf 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" ");
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <ConsoleCommandGyro+0x70>)
 8000dfe:	f000 f947 	bl	8001090 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <ConsoleCommandGyro+0x74>)
 8000e04:	f000 f944 	bl	8001090 <ConsoleIoSendString>
	}
	return result;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08007c30 	.word	0x08007c30
 8000e18:	08007c38 	.word	0x08007c38
 8000e1c:	08007c40 	.word	0x08007c40
 8000e20:	08007c48 	.word	0x08007c48
 8000e24:	08007c2c 	.word	0x08007c2c

08000e28 <ConsoleCommandFlashRW>:
static eCommandResult_T ConsoleCommandFlashRW(const char buffer[])
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b090      	sub	sp, #64	; 0x40
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	#define FLASH_FREE_LOCATION 0x08020000
	//read first to make sure we are good
	uint64_t *RDAddr = (uint64_t *) FLASH_FREE_LOCATION;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <ConsoleCommandFlashRW+0x100>)
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t RData = *RDAddr;
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint32_t Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8000e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 8000e42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	000a      	movs	r2, r1
 8000e50:	2300      	movs	r3, #0
 8000e52:	4613      	mov	r3, r2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is ");
 8000e56:	4835      	ldr	r0, [pc, #212]	; (8000f2c <ConsoleCommandFlashRW+0x104>)
 8000e58:	f000 f91a 	bl	8001090 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea2 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe9e 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	4830      	ldr	r0, [pc, #192]	; (8000f30 <ConsoleCommandFlashRW+0x108>)
 8000e6e:	f000 f90f 	bl	8001090 <ConsoleIoSendString>


 	HAL_FLASH_Unlock();
 8000e72:	f002 f8a5 	bl	8002fc0 <HAL_FLASH_Unlock>
 	//HAL_FLASH_OB_Unlock();
 	// Erase
 	//Instantiate the FLASH_EraseInitTypeDef struct needed for the HAL_FLASHEx_Erase() function
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  //Erase type set to sectors
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
	FLASH_EraseInitStruct.Sector = 5;            				//sector 0x0800 C000
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbSectors = 1;                        //The number of sectors
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e92:	2302      	movs	r3, #2
 8000e94:	623b      	str	r3, [r7, #32]

	uint32_t  errorStatus = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 8000e9a:	f107 020c 	add.w	r2, r7, #12
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 f9fd 	bl	80032a4 <HAL_FLASHEx_Erase>
	HAL_Delay(10);
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f001 fe6c 	bl	8002b88 <HAL_Delay>

 	uint8_t FData = 0xAA;
 8000eb0:	23aa      	movs	r3, #170	; 0xaa
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	// FLASH->CR &= (FLASH_CR_PG);

 	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,0x08020000, FData);
 8000eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eba:	2200      	movs	r2, #0
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	4615      	mov	r5, r2
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <ConsoleCommandFlashRW+0x100>)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f002 f826 	bl	8002f18 <HAL_FLASH_Program>
 	HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f001 fe5b 	bl	8002b88 <HAL_Delay>
 	HAL_FLASH_Lock();
 8000ed2:	f002 f897 	bl	8003004 <HAL_FLASH_Lock>

 	RData = *RDAddr;
 8000ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Rdata_bottom = (uint32_t)(RData & 0xFFFFFFFFLL);
 8000ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Rdata_top = (uint32_t)((RData & 0xFFFFFFFF00000000LL) >> 32);
 8000ee4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	ConsoleIoSendString("Data is now ");
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <ConsoleCommandFlashRW+0x10c>)
 8000efa:	f000 f8c9 	bl	8001090 <ConsoleIoSendString>
	ConsoleSendParamInt32(Rdata_top);
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe51 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleSendParamInt32(Rdata_bottom);
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe4d 	bl	8000ba8 <ConsoleSendParamInt32>
	ConsoleIoSendString(STR_ENDLINE);
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <ConsoleCommandFlashRW+0x108>)
 8000f10:	f000 f8be 	bl	8001090 <ConsoleIoSendString>
 	eCommandResult_T result = COMMAND_SUCCESS;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	return result;
 8000f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3740      	adds	r7, #64	; 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08020000 	.word	0x08020000
 8000f2c:	08007c4c 	.word	0x08007c4c
 8000f30:	08007c2c 	.word	0x08007c2c
 8000f34:	08007c58 	.word	0x08007c58

08000f38 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	461a      	mov	r2, r3
 8000f46:	2101      	movs	r1, #1
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fce1 	bl	8000910 <ConsoleReceiveParamInt16>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d116      	bne.n	8000f86 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <ConsoleCommandParamExampleInt16+0x58>)
 8000f5a:	f000 f899 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000f5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fe09 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <ConsoleCommandParamExampleInt16+0x5c>)
 8000f6a:	f000 f891 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000f6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fd72 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <ConsoleCommandParamExampleInt16+0x60>)
 8000f7c:	f000 f888 	bl	8001090 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <ConsoleCommandParamExampleInt16+0x64>)
 8000f82:	f000 f885 	bl	8001090 <ConsoleIoSendString>
	}
	return result;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08007c68 	.word	0x08007c68
 8000f94:	08007c78 	.word	0x08007c78
 8000f98:	08007c80 	.word	0x08007c80
 8000f9c:	08007c2c 	.word	0x08007c2c

08000fa0 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	461a      	mov	r2, r3
 8000fae:	2101      	movs	r1, #1
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fd0b 	bl	80009cc <ConsoleReceiveParamHexUint16>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000fc2:	f000 f865 	bl	8001090 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd48 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000fd0:	f000 f85e 	bl	8001090 <ConsoleIoSendString>
	}
	return result;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08007c84 	.word	0x08007c84
 8000fe4:	08007c2c 	.word	0x08007c2c

08000fe8 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <ConsoleCommandVer+0x24>)
 8000ff6:	f000 f84b 	bl	8001090 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <ConsoleCommandVer+0x28>)
 8000ffc:	f000 f848 	bl	8001090 <ConsoleIoSendString>
	return result;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08007c94 	.word	0x08007c94
 8001010:	08007c2c 	.word	0x08007c2c

08001014 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <ConsoleCommandsGetTable+0x10>)
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	08007cb4 	.word	0x08007cb4

08001028 <ConsoleIoInit>:

#include "consoleIo.h"
#include <stdio.h>

eConsoleError ConsoleIoInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]

	// ------- modified ----------
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	82fb      	strh	r3, [r7, #22]
 8001048:	e010      	b.n	800106c <ConsoleIoReceive+0x34>
		if(uart_buf.buf[i] == 0) break;
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <ConsoleIoReceive+0x54>)
 800104e:	4413      	add	r3, r2
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <ConsoleIoReceive+0x3c>
		buffer[i] = (uint8_t)uart_buf.buf[i];
 8001056:	8afa      	ldrh	r2, [r7, #22]
 8001058:	8afb      	ldrh	r3, [r7, #22]
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	440b      	add	r3, r1
 800105e:	490b      	ldr	r1, [pc, #44]	; (800108c <ConsoleIoReceive+0x54>)
 8001060:	440a      	add	r2, r1
 8001062:	7892      	ldrb	r2, [r2, #2]
 8001064:	701a      	strb	r2, [r3, #0]
	for(i=0; i<BUF_SIZE; i++) {
 8001066:	8afb      	ldrh	r3, [r7, #22]
 8001068:	3301      	adds	r3, #1
 800106a:	82fb      	strh	r3, [r7, #22]
 800106c:	8afb      	ldrh	r3, [r7, #22]
 800106e:	2b7f      	cmp	r3, #127	; 0x7f
 8001070:	d9eb      	bls.n	800104a <ConsoleIoReceive+0x12>
 8001072:	e000      	b.n	8001076 <ConsoleIoReceive+0x3e>
		if(uart_buf.buf[i] == 0) break;
 8001074:	bf00      	nop
	}
	// -----------------

	*readLength = i;
 8001076:	8afa      	ldrh	r2, [r7, #22]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	601a      	str	r2, [r3, #0]
	//		i++;
	//	}
	//	*readLength = i;
	// ---

	return CONSOLE_SUCCESS;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200002e8 	.word	0x200002e8

08001090 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

	// --------- modified ---------

	// count the size (sizeof didn't work for me, so manually counting)
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8001098:	2300      	movs	r3, #0
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	e008      	b.n	80010b0 <ConsoleIoSendString+0x20>
		if(buffer[i] == '\0') break;
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <ConsoleIoSendString+0x28>
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	3301      	adds	r3, #1
 80010ae:	81fb      	strh	r3, [r7, #14]
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	2b7f      	cmp	r3, #127	; 0x7f
 80010b4:	d9f3      	bls.n	800109e <ConsoleIoSendString+0xe>
 80010b6:	e000      	b.n	80010ba <ConsoleIoSendString+0x2a>
		if(buffer[i] == '\0') break;
 80010b8:	bf00      	nop
	}

	// send it
	uint16_t the_size = i;
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buffer, the_size, HAL_MAX_DELAY); // TODO: resolve this warning
 80010be:	89ba      	ldrh	r2, [r7, #12]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <ConsoleIoSendString+0x48>)
 80010c8:	f004 fffe 	bl	80060c8 <HAL_UART_Transmit>
	// ---------------------------

	return CONSOLE_SUCCESS;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200003e8 	.word	0x200003e8

080010dc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a73      	ldr	r2, [pc, #460]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b71      	ldr	r3, [pc, #452]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b6d      	ldr	r3, [pc, #436]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a6c      	ldr	r2, [pc, #432]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a5e      	ldr	r2, [pc, #376]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a57      	ldr	r2, [pc, #348]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	484b      	ldr	r0, [pc, #300]	; (80012cc <MX_GPIO_Init+0x1f0>)
 80011a0:	f002 fc22 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2101      	movs	r1, #1
 80011a8:	4849      	ldr	r0, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x1f4>)
 80011aa:	f002 fc1d 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011ae:	2200      	movs	r2, #0
 80011b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011b4:	4847      	ldr	r0, [pc, #284]	; (80012d4 <MX_GPIO_Init+0x1f8>)
 80011b6:	f002 fc17 	bl	80039e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80011ba:	2304      	movs	r3, #4
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	483f      	ldr	r0, [pc, #252]	; (80012cc <MX_GPIO_Init+0x1f0>)
 80011ce:	f002 f98b 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011d2:	2308      	movs	r3, #8
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4838      	ldr	r0, [pc, #224]	; (80012cc <MX_GPIO_Init+0x1f0>)
 80011ea:	f002 f97d 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80011ee:	2332      	movs	r3, #50	; 0x32
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <MX_GPIO_Init+0x1f0>)
 8001204:	f002 f970 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	482c      	ldr	r0, [pc, #176]	; (80012d0 <MX_GPIO_Init+0x1f4>)
 8001220:	f002 f962 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001228:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_GPIO_Init+0x1fc>)
 800123a:	f002 f955 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800123e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001242:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	481f      	ldr	r0, [pc, #124]	; (80012d4 <MX_GPIO_Init+0x1f8>)
 8001258:	f002 f946 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <MX_GPIO_Init+0x1fc>)
 8001272:	f002 f939 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001276:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001288:	230a      	movs	r3, #10
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_GPIO_Init+0x1fc>)
 8001294:	f002 f928 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001298:	2320      	movs	r3, #32
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <MX_GPIO_Init+0x1f8>)
 80012ac:	f002 f91c 	bl	80034e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2006      	movs	r0, #6
 80012b6:	f001 fd66 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ba:	2006      	movs	r0, #6
 80012bc:	f001 fd7f 	bl	8002dbe <HAL_NVIC_EnableIRQ>

}
 80012c0:	bf00      	nop
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40020000 	.word	0x40020000

080012dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_I2C1_Init+0x50>)
 80012e2:	4a13      	ldr	r2, [pc, #76]	; (8001330 <MX_I2C1_Init+0x54>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_I2C1_Init+0x50>)
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_I2C1_Init+0x58>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_I2C1_Init+0x50>)
 80012fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_I2C1_Init+0x50>)
 800131a:	f002 fb97 	bl	8003a4c <HAL_I2C_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001324:	f000 fb8e 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000200 	.word	0x20000200
 8001330:	40005400 	.word	0x40005400
 8001334:	000186a0 	.word	0x000186a0

08001338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_I2C_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12c      	bne.n	80013b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001376:	f44f 7310 	mov.w	r3, #576	; 0x240
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137c:	2312      	movs	r3, #18
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001388:	2304      	movs	r3, #4
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <HAL_I2C_MspInit+0x8c>)
 8001394:	f002 f8a8 	bl	80034e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_I2C_MspDeInit+0x38>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10e      	bne.n	80013f8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_I2C_MspDeInit+0x3c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_I2C_MspDeInit+0x3c>)
 80013e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013ea:	f002 fa01 	bl	80037f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80013ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013f4:	f002 f9fc 	bl	80037f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40005400 	.word	0x40005400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400

0800140c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2S2_Init+0x50>)
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <MX_I2S2_Init+0x54>)
 8001414:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_I2S2_Init+0x50>)
 8001418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_I2S2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_I2S2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_I2S2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_I2S2_Init+0x50>)
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <MX_I2S2_Init+0x58>)
 8001434:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_I2S2_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_I2S2_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_I2S2_Init+0x50>)
 8001444:	2201      	movs	r2, #1
 8001446:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_I2S2_Init+0x50>)
 800144a:	f003 fafd 	bl	8004a48 <HAL_I2S_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001454:	f000 faf6 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000254 	.word	0x20000254
 8001460:	40003800 	.word	0x40003800
 8001464:	00017700 	.word	0x00017700

08001468 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_I2S3_Init+0x54>)
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <MX_I2S3_Init+0x58>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2S3_Init+0x54>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_I2S3_Init+0x54>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_I2S3_Init+0x54>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_I2S3_Init+0x54>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_I2S3_Init+0x54>)
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <MX_I2S3_Init+0x5c>)
 8001492:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_I2S3_Init+0x54>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_I2S3_Init+0x54>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_I2S3_Init+0x54>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_I2S3_Init+0x54>)
 80014a8:	f003 face 	bl	8004a48 <HAL_I2S_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80014b2:	f000 fac7 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000029c 	.word	0x2000029c
 80014c0:	40003c00 	.word	0x40003c00
 80014c4:	00017700 	.word	0x00017700

080014c8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_I2S_MspInit+0x184>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d15b      	bne.n	80015a2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a57      	ldr	r2, [pc, #348]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	623b      	str	r3, [r7, #32]
 8001504:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <HAL_I2S_MspInit+0x188>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_I2S_MspInit+0x188>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <HAL_I2S_MspInit+0x188>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_I2S_MspInit+0x188>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_I2S_MspInit+0x188>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_I2S_MspInit+0x188>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800153e:	2304      	movs	r3, #4
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800154e:	2306      	movs	r3, #6
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	483e      	ldr	r0, [pc, #248]	; (8001654 <HAL_I2S_MspInit+0x18c>)
 800155a:	f001 ffc5 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800155e:	2308      	movs	r3, #8
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800156e:	2305      	movs	r3, #5
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4836      	ldr	r0, [pc, #216]	; (8001654 <HAL_I2S_MspInit+0x18c>)
 800157a:	f001 ffb5 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800157e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001590:	2305      	movs	r3, #5
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	482f      	ldr	r0, [pc, #188]	; (8001658 <HAL_I2S_MspInit+0x190>)
 800159c:	f001 ffa4 	bl	80034e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80015a0:	e04f      	b.n	8001642 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <HAL_I2S_MspInit+0x194>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d14a      	bne.n	8001642 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_I2S_MspInit+0x188>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001600:	2310      	movs	r3, #16
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001610:	2306      	movs	r3, #6
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <HAL_I2S_MspInit+0x198>)
 800161c:	f001 ff64 	bl	80034e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001620:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001632:	2306      	movs	r3, #6
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_I2S_MspInit+0x18c>)
 800163e:	f001 ff53 	bl	80034e8 <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40003800 	.word	0x40003800
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	40020400 	.word	0x40020400
 800165c:	40003c00 	.word	0x40003c00
 8001660:	40020000 	.word	0x40020000

08001664 <input_buf_reset>:
// https://github.com/dekuNukem/STM32_tutorials/tree/master/lesson3_serial_recv_interrupt

#include "input_buf.h"
#include <string.h> // memset is declared here

void input_buf_reset(input_buf *ib) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <input_buf_reset+0x24>
	ib->curr_index = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	801a      	strh	r2, [r3, #0]
	memset(ib->buf, 0, BUF_SIZE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3302      	adds	r3, #2
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fd79 	bl	8007178 <memset>
 8001686:	e000      	b.n	800168a <input_buf_reset+0x26>
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001688:	bf00      	nop
}
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <input_buf_add>:

void input_buf_add(input_buf *ib, uint8_t c) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
	if(NULL == ib) return;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01a      	beq.n	80016d8 <input_buf_add+0x48>
	ib->buf[ib->curr_index] = c;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	709a      	strb	r2, [r3, #2]
	if(ib->curr_index < BUF_SIZE-1) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ba:	dc09      	bgt.n	80016d0 <input_buf_add+0x40>
		ib->curr_index = ib->curr_index+1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	e004      	b.n	80016da <input_buf_add+0x4a>
	} else {
		input_buf_reset(ib);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffc7 	bl	8001664 <input_buf_reset>
 80016d6:	e000      	b.n	80016da <input_buf_add+0x4a>
	if(NULL == ib) return;
 80016d8:	bf00      	nop
	}
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <input_buf_ready>:

uint8_t input_buf_ready(input_buf *ib) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <input_buf_ready+0x12>
 80016ee:	2300      	movs	r3, #0
 80016f0:	e014      	b.n	800171c <input_buf_ready+0x3c>
	if(ib->buf[ib->curr_index-1] == '\n' || ib->buf[ib->curr_index-1] == '\r') {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	2b0a      	cmp	r3, #10
 8001702:	d008      	beq.n	8001716 <input_buf_ready+0x36>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	3b01      	subs	r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	2b0d      	cmp	r3, #13
 8001714:	d101      	bne.n	800171a <input_buf_ready+0x3a>
		return 1;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <input_buf_ready+0x3c>
	}
	return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// uart interrupt callback
// huart2 defined in usart.c, generated from cubemx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	c = uart_byte_buf[0];
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_UART_RxCpltCallback+0x34>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_UART_RxCpltCallback+0x38>)
 8001736:	701a      	strb	r2, [r3, #0]
	echo = true;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_UART_RxCpltCallback+0x3c>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
	input_buf_add(&uart_buf, uart_byte_buf[0]);
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_UART_RxCpltCallback+0x34>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <HAL_UART_RxCpltCallback+0x40>)
 8001746:	f7ff ffa3 	bl	8001690 <input_buf_add>
	HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	4903      	ldr	r1, [pc, #12]	; (800175c <HAL_UART_RxCpltCallback+0x34>)
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <HAL_UART_RxCpltCallback+0x44>)
 8001750:	f004 fd4c 	bl	80061ec <HAL_UART_Receive_IT>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200002e4 	.word	0x200002e4
 8001760:	2000036a 	.word	0x2000036a
 8001764:	2000036b 	.word	0x2000036b
 8001768:	200002e8 	.word	0x200002e8
 800176c:	200003e8 	.word	0x200003e8

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001774:	f001 f996 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f846 	bl	8001808 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800177c:	f000 f8ac 	bl	80018d8 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_ACCELERO_Init();
 8001780:	f001 f83c 	bl	80027fc <BSP_ACCELERO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001784:	f7ff fcaa 	bl	80010dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001788:	f7ff fda8 	bl	80012dc <MX_I2C1_Init>
  MX_I2S2_Init();
 800178c:	f7ff fe3e 	bl	800140c <MX_I2S2_Init>
  MX_I2S3_Init();
 8001790:	f7ff fe6a 	bl	8001468 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001794:	f000 f95c 	bl	8001a50 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001798:	f000 fa84 	bl	8001ca4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 800179c:	f7fe ff9c 	bl	80006d8 <ConsoleInit>
  input_buf_reset(&uart_buf);
 80017a0:	4814      	ldr	r0, [pc, #80]	; (80017f4 <main+0x84>)
 80017a2:	f7ff ff5f 	bl	8001664 <input_buf_reset>
  HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	4913      	ldr	r1, [pc, #76]	; (80017f8 <main+0x88>)
 80017aa:	4814      	ldr	r0, [pc, #80]	; (80017fc <main+0x8c>)
 80017ac:	f004 fd1e 	bl	80061ec <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (op_mode == mode_cli)
 80017b0:	e008      	b.n	80017c4 <main+0x54>
  {
	cli_check();
 80017b2:	f000 f8b1 	bl	8001918 <cli_check>

	if(button_pressed != 0)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <main+0x90>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <main+0x54>
	{
		op_mode = mode_local;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <main+0x94>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
  while (op_mode == mode_cli)
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <main+0x94>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f2      	beq.n	80017b2 <main+0x42>
    /* USER CODE BEGIN 3 */
  }
  // infinite loop
  while(1)
  {
	  switch(op_mode)
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <main+0x94>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d8fb      	bhi.n	80017cc <main+0x5c>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <main+0x6c>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017cd 	.word	0x080017cd
 80017e4:	080017cd 	.word	0x080017cd
 80017e8:	080017cd 	.word	0x080017cd
	  {
	  case mode_cli:
		  Error_Handler();
 80017ec:	f000 f92a 	bl	8001a44 <Error_Handler>
		  break;
 80017f0:	bf00      	nop
	  switch(op_mode)
 80017f2:	e7eb      	b.n	80017cc <main+0x5c>
 80017f4:	200002e8 	.word	0x200002e8
 80017f8:	200002e4 	.word	0x200002e4
 80017fc:	200003e8 	.word	0x200003e8
 8001800:	20000381 	.word	0x20000381
 8001804:	20000380 	.word	0x20000380

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	; 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	; 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fcae 	bl	8007178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <SystemClock_Config+0xc8>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <SystemClock_Config+0xc8>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <SystemClock_Config+0xc8>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <SystemClock_Config+0xcc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <SystemClock_Config+0xcc>)
 8001852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <SystemClock_Config+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800187c:	23c0      	movs	r3, #192	; 0xc0
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001880:	2304      	movs	r3, #4
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001884:	2308      	movs	r3, #8
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fd5d 	bl	800534c <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001898:	f000 f8d4 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ffbf 	bl	800583c <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018c4:	f000 f8be 	bl	8001a44 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	; 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018ee:	2301      	movs	r3, #1
 80018f0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80018f2:	23c8      	movs	r3, #200	; 0xc8
 80018f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80018f6:	2305      	movs	r3, #5
 80018f8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4618      	mov	r0, r3
 8001902:	f004 f9bb 	bl	8005c7c <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800190c:	f000 f89a 	bl	8001a44 <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <cli_check>:

/* USER CODE BEGIN 4 */
void cli_check(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 	if(echo) {
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <cli_check+0x8c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <cli_check+0x30>
		sprintf((char*)buf, "%c", c);
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <cli_check+0x90>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	491f      	ldr	r1, [pc, #124]	; (80019ac <cli_check+0x94>)
 800192e:	4820      	ldr	r0, [pc, #128]	; (80019b0 <cli_check+0x98>)
 8001930:	f005 fc2a 	bl	8007188 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001938:	2201      	movs	r2, #1
 800193a:	491d      	ldr	r1, [pc, #116]	; (80019b0 <cli_check+0x98>)
 800193c:	481d      	ldr	r0, [pc, #116]	; (80019b4 <cli_check+0x9c>)
 800193e:	f004 fbc3 	bl	80060c8 <HAL_UART_Transmit>
  		echo = false;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <cli_check+0x8c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  	}

  	if(input_buf_ready(&uart_buf)) {
 8001948:	481b      	ldr	r0, [pc, #108]	; (80019b8 <cli_check+0xa0>)
 800194a:	f7ff fec9 	bl	80016e0 <input_buf_ready>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d022      	beq.n	800199a <cli_check+0x82>
  		// remove the c in sprintf((char*)buf, "\r\n", c);
  		sprintf((char*)buf, "\r\n", c);
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <cli_check+0x90>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4918      	ldr	r1, [pc, #96]	; (80019bc <cli_check+0xa4>)
 800195c:	4814      	ldr	r0, [pc, #80]	; (80019b0 <cli_check+0x98>)
 800195e:	f005 fc13 	bl	8007188 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY);
 8001962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001966:	2202      	movs	r2, #2
 8001968:	4911      	ldr	r1, [pc, #68]	; (80019b0 <cli_check+0x98>)
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <cli_check+0x9c>)
 800196c:	f004 fbac 	bl	80060c8 <HAL_UART_Transmit>
			ConsoleProcess();
 8001970:	f7fe fee0 	bl	8000734 <ConsoleProcess>
			input_buf_reset(&uart_buf);
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <cli_check+0xa0>)
 8001976:	f7ff fe75 	bl	8001664 <input_buf_reset>
			// unsure why console.c doesn't clear, so let's clear it here
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 800197a:	2300      	movs	r3, #0
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	e006      	b.n	800198e <cli_check+0x76>
				mReceiveBuffer[i] = 0;
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <cli_check+0xa8>)
 8001984:	2100      	movs	r1, #0
 8001986:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0; i<256; i++) { // should be CONSOLE_COMMAND_MAX_LENGTH, but it's in consoleCommands.h
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3301      	adds	r3, #1
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	d9f5      	bls.n	8001980 <cli_check+0x68>
			}
			mReceivedSoFar = 0;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <cli_check+0xac>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
		}
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000036b 	.word	0x2000036b
 80019a8:	2000036a 	.word	0x2000036a
 80019ac:	08007cac 	.word	0x08007cac
 80019b0:	2000036c 	.word	0x2000036c
 80019b4:	200003e8 	.word	0x200003e8
 80019b8:	200002e8 	.word	0x200002e8
 80019bc:	08007cb0 	.word	0x08007cb0
 80019c0:	200000f8 	.word	0x200000f8
 80019c4:	200001f8 	.word	0x200001f8

080019c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	currentMs = HAL_GetTick();
 80019d2:	f001 f8cd 	bl	8002b70 <HAL_GetTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x68>)
 80019da:	6013      	str	r3, [r2, #0]
	if((GPIO_Pin == GPIO_PIN_0) && (currentMs - previousMs > 10) ){
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d11e      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x58>
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x68>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b0a      	cmp	r3, #10
 80019ee:	d917      	bls.n	8001a20 <HAL_GPIO_EXTI_Callback+0x58>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)){
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x70>)
 80019f6:	f001 ffdf 	bl	80039b8 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_GPIO_EXTI_Callback+0x4c>
			// Rising
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x74>)
 8001a08:	f001 ffee 	bl	80039e8 <HAL_GPIO_WritePin>
			button_pressed = true; // exit cli mode
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e005      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x58>
		}
		else{
			// Falling
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x74>)
 8001a1c:	f001 ffe4 	bl	80039e8 <HAL_GPIO_WritePin>
		}
	}
	previousMs = currentMs;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000388 	.word	0x20000388
 8001a34:	20000384 	.word	0x20000384
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	20000381 	.word	0x20000381

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001aa2:	f004 fa3b 	bl	8005f1c <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f7ff ffca 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000038c 	.word	0x2000038c
 8001ab8:	40013000 	.word	0x40013000

08001abc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_SPI_MspInit+0x84>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12b      	bne.n	8001b36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b16:	23e0      	movs	r3, #224	; 0xe0
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b26:	2305      	movs	r3, #5
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001b32:	f001 fcd9 	bl	80034e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b8a:	2007      	movs	r0, #7
 8001b8c:	f001 f8f0 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 ffae 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f001 ff11 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART2_IRQHandler+0x10>)
 8001c06:	f004 fb21 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200003e8 	.word	0x200003e8

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f005 fa6e 	bl	8007124 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20020000 	.word	0x20020000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	200003e4 	.word	0x200003e4
 8001c7c:	200004c0 	.word	0x200004c0

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_USART2_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f004 f9a7 	bl	800602e <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fead 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003e8 	.word	0x200003e8
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_UART_MspInit+0x94>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d133      	bne.n	8001d82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d52:	230c      	movs	r3, #12
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_UART_MspInit+0x9c>)
 8001d6e:	f001 fbbb 	bl	80034e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2026      	movs	r0, #38	; 0x26
 8001d78:	f001 f805 	bl	8002d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7c:	2026      	movs	r0, #38	; 0x26
 8001d7e:	f001 f81e 	bl	8002dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9e:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff ff5d 	bl	8001c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f005 f9b3 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff fcd1 	bl	8001770 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001ddc:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 8001de0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001de4:	200004bc 	.word	0x200004bc

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>

08001dea <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001df8:	f000 fc82 	bl	8002700 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	461a      	mov	r2, r3
 8001e04:	2120      	movs	r1, #32
 8001e06:	2032      	movs	r0, #50	; 0x32
 8001e08:	f000 fcd2 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2123      	movs	r1, #35	; 0x23
 8001e16:	2032      	movs	r0, #50	; 0x32
 8001e18:	f000 fcca 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001e3c:	f000 fc60 	bl	8002700 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001e40:	210f      	movs	r1, #15
 8001e42:	2032      	movs	r0, #50	; 0x32
 8001e44:	f000 fcc7 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001e5c:	2124      	movs	r1, #36	; 0x24
 8001e5e:	2032      	movs	r0, #50	; 0x32
 8001e60:	f000 fcb9 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e6e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	461a      	mov	r2, r3
 8001e74:	2124      	movs	r1, #36	; 0x24
 8001e76:	2032      	movs	r0, #50	; 0x32
 8001e78:	f000 fc9a 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001e8e:	2121      	movs	r1, #33	; 0x21
 8001e90:	2032      	movs	r0, #50	; 0x32
 8001e92:	f000 fca0 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2121      	movs	r1, #33	; 0x21
 8001eb0:	2032      	movs	r0, #50	; 0x32
 8001eb2:	f000 fc7d 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001ec8:	2121      	movs	r1, #33	; 0x21
 8001eca:	2032      	movs	r0, #50	; 0x32
 8001ecc:	f000 fc83 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f023 0308 	bic.w	r3, r3, #8
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2121      	movs	r1, #33	; 0x21
 8001eea:	2032      	movs	r0, #50	; 0x32
 8001eec:	f000 fc60 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001f00:	2300      	movs	r3, #0
 8001f02:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001f0c:	2123      	movs	r1, #35	; 0x23
 8001f0e:	2032      	movs	r0, #50	; 0x32
 8001f10:	f000 fc61 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001f18:	2124      	movs	r1, #36	; 0x24
 8001f1a:	2032      	movs	r0, #50	; 0x32
 8001f1c:	f000 fc5b 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f20:	4603      	mov	r3, r0
 8001f22:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001f24:	2128      	movs	r1, #40	; 0x28
 8001f26:	2032      	movs	r0, #50	; 0x32
 8001f28:	f000 fc55 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001f32:	2129      	movs	r1, #41	; 0x29
 8001f34:	2032      	movs	r0, #50	; 0x32
 8001f36:	f000 fc4e 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001f40:	212a      	movs	r1, #42	; 0x2a
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f000 fc47 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001f4e:	212b      	movs	r1, #43	; 0x2b
 8001f50:	2032      	movs	r0, #50	; 0x32
 8001f52:	f000 fc40 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	2032      	movs	r0, #50	; 0x32
 8001f60:	f000 fc39 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001f6a:	212d      	movs	r1, #45	; 0x2d
 8001f6c:	2032      	movs	r0, #50	; 0x32
 8001f6e:	f000 fc32 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001f78:	7d3b      	ldrb	r3, [r7, #20]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d123      	bne.n	8001fca <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	77fb      	strb	r3, [r7, #31]
 8001f86:	e01c      	b.n	8001fc2 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001f88:	7ffb      	ldrb	r3, [r7, #31]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	3320      	adds	r3, #32
 8001f90:	443b      	add	r3, r7
 8001f92:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	3320      	adds	r3, #32
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	b212      	sxth	r2, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001fbc:	7ffb      	ldrb	r3, [r7, #31]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d9df      	bls.n	8001f88 <LSM303AGR_AccReadXYZ+0x90>
 8001fc8:	e022      	b.n	8002010 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	e01c      	b.n	800200a <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3320      	adds	r3, #32
 8001fd6:	443b      	add	r3, r7
 8001fd8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	3320      	adds	r3, #32
 8001fea:	443b      	add	r3, r7
 8001fec:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	b212      	sxth	r2, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	3320      	adds	r3, #32
 8001ffe:	443b      	add	r3, r7
 8002000:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002004:	7ffb      	ldrb	r3, [r7, #31]
 8002006:	3301      	adds	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]
 800200a:	7ffb      	ldrb	r3, [r7, #31]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d9df      	bls.n	8001fd0 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8002010:	7d3b      	ldrb	r3, [r7, #20]
 8002012:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002016:	2b30      	cmp	r3, #48	; 0x30
 8002018:	d013      	beq.n	8002042 <LSM303AGR_AccReadXYZ+0x14a>
 800201a:	2b30      	cmp	r3, #48	; 0x30
 800201c:	dc14      	bgt.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
 800201e:	2b20      	cmp	r3, #32
 8002020:	d00c      	beq.n	800203c <LSM303AGR_AccReadXYZ+0x144>
 8002022:	2b20      	cmp	r3, #32
 8002024:	dc10      	bgt.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <LSM303AGR_AccReadXYZ+0x138>
 800202a:	2b10      	cmp	r3, #16
 800202c:	d003      	beq.n	8002036 <LSM303AGR_AccReadXYZ+0x13e>
 800202e:	e00b      	b.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8002030:	2301      	movs	r3, #1
 8002032:	77bb      	strb	r3, [r7, #30]
    break;
 8002034:	e008      	b.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8002036:	2302      	movs	r3, #2
 8002038:	77bb      	strb	r3, [r7, #30]
    break;
 800203a:	e005      	b.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800203c:	2304      	movs	r3, #4
 800203e:	77bb      	strb	r3, [r7, #30]
    break;
 8002040:	e002      	b.n	8002048 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8002042:	230c      	movs	r3, #12
 8002044:	77bb      	strb	r3, [r7, #30]
    break;
 8002046:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
 800204c:	e014      	b.n	8002078 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	3320      	adds	r3, #32
 8002054:	443b      	add	r3, r7
 8002056:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800205a:	b29a      	uxth	r2, r3
 800205c:	7fbb      	ldrb	r3, [r7, #30]
 800205e:	b29b      	uxth	r3, r3
 8002060:	fb12 f303 	smulbb	r3, r2, r3
 8002064:	b299      	uxth	r1, r3
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	b20a      	sxth	r2, r1
 8002070:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	3301      	adds	r3, #1
 8002076:	77fb      	strb	r3, [r7, #31]
 8002078:	7ffb      	ldrb	r3, [r7, #31]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d9e7      	bls.n	800204e <LSM303AGR_AccReadXYZ+0x156>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002096:	2121      	movs	r1, #33	; 0x21
 8002098:	2032      	movs	r0, #50	; 0x32
 800209a:	f000 fb9c 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	461a      	mov	r2, r3
 80020b6:	2121      	movs	r1, #33	; 0x21
 80020b8:	2032      	movs	r0, #50	; 0x32
 80020ba:	f000 fb79 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80020d4:	2122      	movs	r1, #34	; 0x22
 80020d6:	2032      	movs	r0, #50	; 0x32
 80020d8:	f000 fb7d 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80020dc:	4603      	mov	r3, r0
 80020de:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	461a      	mov	r2, r3
 80020ec:	2122      	movs	r1, #34	; 0x22
 80020ee:	2032      	movs	r0, #50	; 0x32
 80020f0:	f000 fb5e 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800210a:	2138      	movs	r1, #56	; 0x38
 800210c:	2032      	movs	r0, #50	; 0x32
 800210e:	f000 fb62 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4313      	orrs	r3, r2
 800211c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	461a      	mov	r2, r3
 8002122:	2138      	movs	r1, #56	; 0x38
 8002124:	2032      	movs	r0, #50	; 0x32
 8002126:	f000 fb43 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800212a:	230a      	movs	r3, #10
 800212c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	461a      	mov	r2, r3
 8002132:	213a      	movs	r1, #58	; 0x3a
 8002134:	2032      	movs	r0, #50	; 0x32
 8002136:	f000 fb3b 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800213a:	2305      	movs	r3, #5
 800213c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	461a      	mov	r2, r3
 8002142:	213b      	movs	r1, #59	; 0x3b
 8002144:	2032      	movs	r0, #50	; 0x32
 8002146:	f000 fb33 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	461a      	mov	r2, r3
 800214e:	213c      	movs	r1, #60	; 0x3c
 8002150:	2032      	movs	r0, #50	; 0x32
 8002152:	f000 fb2d 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002156:	2332      	movs	r3, #50	; 0x32
 8002158:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	461a      	mov	r2, r3
 800215e:	213d      	movs	r1, #61	; 0x3d
 8002160:	2032      	movs	r0, #50	; 0x32
 8002162:	f000 fb25 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002172:	f000 faed 	bl	8002750 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8002176:	2080      	movs	r0, #128	; 0x80
 8002178:	f7ff ffa5 	bl	80020c6 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800217c:	2004      	movs	r0, #4
 800217e:	f7ff ff83 	bl	8002088 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8002182:	2010      	movs	r0, #16
 8002184:	f7ff ffba 	bl	80020fc <LSM303AGR_AccClickITEnable>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800219a:	f000 fab1 	bl	8002700 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	461a      	mov	r2, r3
 80021a6:	2120      	movs	r1, #32
 80021a8:	2032      	movs	r0, #50	; 0x32
 80021aa:	f000 fb01 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	461a      	mov	r2, r3
 80021b6:	2123      	movs	r1, #35	; 0x23
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f000 faf9 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80021de:	f000 fa8f 	bl	8002700 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80021e2:	210f      	movs	r1, #15
 80021e4:	2032      	movs	r0, #50	; 0x32
 80021e6:	f000 faf6 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80021ee:	79fb      	ldrb	r3, [r7, #7]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80021fe:	2124      	movs	r1, #36	; 0x24
 8002200:	2032      	movs	r0, #50	; 0x32
 8002202:	f000 fae8 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002210:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	461a      	mov	r2, r3
 8002216:	2124      	movs	r1, #36	; 0x24
 8002218:	2032      	movs	r0, #50	; 0x32
 800221a:	f000 fac9 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002230:	2121      	movs	r1, #33	; 0x21
 8002232:	2032      	movs	r0, #50	; 0x32
 8002234:	f000 facf 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4313      	orrs	r3, r2
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	461a      	mov	r2, r3
 8002250:	2121      	movs	r1, #33	; 0x21
 8002252:	2032      	movs	r0, #50	; 0x32
 8002254:	f000 faac 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800226a:	2121      	movs	r1, #33	; 0x21
 800226c:	2032      	movs	r0, #50	; 0x32
 800226e:	f000 fab2 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	f023 0308 	bic.w	r3, r3, #8
 800227c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4313      	orrs	r3, r2
 8002284:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	461a      	mov	r2, r3
 800228a:	2121      	movs	r1, #33	; 0x21
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f000 fa8f 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80022a2:	2300      	movs	r3, #0
 80022a4:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80022aa:	2301      	movs	r3, #1
 80022ac:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80022ae:	2123      	movs	r1, #35	; 0x23
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	f000 fa90 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022b6:	4603      	mov	r3, r0
 80022b8:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80022ba:	2124      	movs	r1, #36	; 0x24
 80022bc:	2032      	movs	r0, #50	; 0x32
 80022be:	f000 fa8a 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022c2:	4603      	mov	r3, r0
 80022c4:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80022c6:	2128      	movs	r1, #40	; 0x28
 80022c8:	2032      	movs	r0, #50	; 0x32
 80022ca:	f000 fa84 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80022d4:	2129      	movs	r1, #41	; 0x29
 80022d6:	2032      	movs	r0, #50	; 0x32
 80022d8:	f000 fa7d 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022dc:	4603      	mov	r3, r0
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80022e2:	212a      	movs	r1, #42	; 0x2a
 80022e4:	2032      	movs	r0, #50	; 0x32
 80022e6:	f000 fa76 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80022f0:	212b      	movs	r1, #43	; 0x2b
 80022f2:	2032      	movs	r0, #50	; 0x32
 80022f4:	f000 fa6f 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	2032      	movs	r0, #50	; 0x32
 8002302:	f000 fa68 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002306:	4603      	mov	r3, r0
 8002308:	b25b      	sxtb	r3, r3
 800230a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800230c:	212d      	movs	r1, #45	; 0x2d
 800230e:	2032      	movs	r0, #50	; 0x32
 8002310:	f000 fa61 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	b25b      	sxtb	r3, r3
 8002318:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800231a:	7d3b      	ldrb	r3, [r7, #20]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d123      	bne.n	800236c <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	e01c      	b.n	8002364 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	3301      	adds	r3, #1
 8002330:	3320      	adds	r3, #32
 8002332:	443b      	add	r3, r7
 8002334:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002338:	b29b      	uxth	r3, r3
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b29a      	uxth	r2, r3
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	3320      	adds	r3, #32
 8002344:	443b      	add	r3, r7
 8002346:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b29a      	uxth	r2, r3
 8002350:	7ffb      	ldrb	r3, [r7, #31]
 8002352:	b212      	sxth	r2, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	3320      	adds	r3, #32
 8002358:	443b      	add	r3, r7
 800235a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	3301      	adds	r3, #1
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	7ffb      	ldrb	r3, [r7, #31]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d9df      	bls.n	800232a <LSM303DLHC_AccReadXYZ+0x90>
 800236a:	e022      	b.n	80023b2 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e01c      	b.n	80023ac <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	3320      	adds	r3, #32
 8002378:	443b      	add	r3, r7
 800237a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800237e:	b29b      	uxth	r3, r3
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	b29a      	uxth	r2, r3
 8002384:	7ffb      	ldrb	r3, [r7, #31]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	3301      	adds	r3, #1
 800238a:	3320      	adds	r3, #32
 800238c:	443b      	add	r3, r7
 800238e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4413      	add	r3, r2
 8002396:	b29a      	uxth	r2, r3
 8002398:	7ffb      	ldrb	r3, [r7, #31]
 800239a:	b212      	sxth	r2, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	3320      	adds	r3, #32
 80023a0:	443b      	add	r3, r7
 80023a2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	3301      	adds	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	7ffb      	ldrb	r3, [r7, #31]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d9df      	bls.n	8002372 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80023b2:	7d3b      	ldrb	r3, [r7, #20]
 80023b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d013      	beq.n	80023e4 <LSM303DLHC_AccReadXYZ+0x14a>
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	dc14      	bgt.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d00c      	beq.n	80023de <LSM303DLHC_AccReadXYZ+0x144>
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	dc10      	bgt.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <LSM303DLHC_AccReadXYZ+0x138>
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d003      	beq.n	80023d8 <LSM303DLHC_AccReadXYZ+0x13e>
 80023d0:	e00b      	b.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77bb      	strb	r3, [r7, #30]
    break;
 80023d6:	e008      	b.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80023d8:	2302      	movs	r3, #2
 80023da:	77bb      	strb	r3, [r7, #30]
    break;
 80023dc:	e005      	b.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80023de:	2304      	movs	r3, #4
 80023e0:	77bb      	strb	r3, [r7, #30]
    break;
 80023e2:	e002      	b.n	80023ea <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80023e4:	230c      	movs	r3, #12
 80023e6:	77bb      	strb	r3, [r7, #30]
    break;
 80023e8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	77fb      	strb	r3, [r7, #31]
 80023ee:	e014      	b.n	800241a <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	3320      	adds	r3, #32
 80023f6:	443b      	add	r3, r7
 80023f8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	7fbb      	ldrb	r3, [r7, #30]
 8002400:	b29b      	uxth	r3, r3
 8002402:	fb12 f303 	smulbb	r3, r2, r3
 8002406:	b299      	uxth	r1, r3
 8002408:	7ffb      	ldrb	r3, [r7, #31]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	b20a      	sxth	r2, r1
 8002412:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	3301      	adds	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d9e7      	bls.n	80023f0 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002438:	2121      	movs	r1, #33	; 0x21
 800243a:	2032      	movs	r0, #50	; 0x32
 800243c:	f000 f9cb 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4313      	orrs	r3, r2
 8002452:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	461a      	mov	r2, r3
 8002458:	2121      	movs	r1, #33	; 0x21
 800245a:	2032      	movs	r0, #50	; 0x32
 800245c:	f000 f9a8 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8002476:	2122      	movs	r1, #34	; 0x22
 8002478:	2032      	movs	r0, #50	; 0x32
 800247a:	f000 f9ac 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4313      	orrs	r3, r2
 8002488:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	461a      	mov	r2, r3
 800248e:	2122      	movs	r1, #34	; 0x22
 8002490:	2032      	movs	r0, #50	; 0x32
 8002492:	f000 f98d 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80024ac:	2138      	movs	r1, #56	; 0x38
 80024ae:	2032      	movs	r0, #50	; 0x32
 80024b0:	f000 f991 	bl	80027d6 <COMPASSACCELERO_IO_Read>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	4313      	orrs	r3, r2
 80024be:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2138      	movs	r1, #56	; 0x38
 80024c6:	2032      	movs	r0, #50	; 0x32
 80024c8:	f000 f972 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80024cc:	230a      	movs	r3, #10
 80024ce:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	461a      	mov	r2, r3
 80024d4:	213a      	movs	r1, #58	; 0x3a
 80024d6:	2032      	movs	r0, #50	; 0x32
 80024d8:	f000 f96a 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80024dc:	2305      	movs	r3, #5
 80024de:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	461a      	mov	r2, r3
 80024e4:	213b      	movs	r1, #59	; 0x3b
 80024e6:	2032      	movs	r0, #50	; 0x32
 80024e8:	f000 f962 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	461a      	mov	r2, r3
 80024f0:	213c      	movs	r1, #60	; 0x3c
 80024f2:	2032      	movs	r0, #50	; 0x32
 80024f4:	f000 f95c 	bl	80027b0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80024f8:	2332      	movs	r3, #50	; 0x32
 80024fa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	461a      	mov	r2, r3
 8002500:	213d      	movs	r1, #61	; 0x3d
 8002502:	2032      	movs	r0, #50	; 0x32
 8002504:	f000 f954 	bl	80027b0 <COMPASSACCELERO_IO_Write>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002514:	f000 f91c 	bl	8002750 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8002518:	2080      	movs	r0, #128	; 0x80
 800251a:	f7ff ffa5 	bl	8002468 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800251e:	2004      	movs	r0, #4
 8002520:	f7ff ff83 	bl	800242a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8002524:	2010      	movs	r0, #16
 8002526:	f7ff ffba 	bl	800249e <LSM303DLHC_AccClickITEnable>
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002534:	4814      	ldr	r0, [pc, #80]	; (8002588 <I2Cx_Init+0x58>)
 8002536:	f001 ff1d 	bl	8004374 <HAL_I2C_GetState>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d121      	bne.n	8002584 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <I2Cx_Init+0x58>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <I2Cx_Init+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <I2Cx_Init+0x58>)
 8002548:	2243      	movs	r2, #67	; 0x43
 800254a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <I2Cx_Init+0x58>)
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <I2Cx_Init+0x60>)
 8002550:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <I2Cx_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <I2Cx_Init+0x58>)
 800255a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800255e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <I2Cx_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <I2Cx_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <I2Cx_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <I2Cx_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <I2Cx_Init+0x58>)
 800257a:	f000 f86b 	bl	8002654 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800257e:	4802      	ldr	r0, [pc, #8]	; (8002588 <I2Cx_Init+0x58>)
 8002580:	f001 fa64 	bl	8003a4c <HAL_I2C_Init>
  }
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000042c 	.word	0x2000042c
 800258c:	40005400 	.word	0x40005400
 8002590:	000186a0 	.word	0x000186a0

08002594 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af04      	add	r7, sp, #16
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
 800259e:	460b      	mov	r3, r1
 80025a0:	717b      	strb	r3, [r7, #5]
 80025a2:	4613      	mov	r3, r2
 80025a4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80025aa:	797b      	ldrb	r3, [r7, #5]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <I2Cx_WriteData+0x48>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	88f9      	ldrh	r1, [r7, #6]
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	2301      	movs	r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	4807      	ldr	r0, [pc, #28]	; (80025e0 <I2Cx_WriteData+0x4c>)
 80025c2:	f001 fbb7 	bl	8003d34 <HAL_I2C_Mem_Write>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80025d0:	f000 f834 	bl	800263c <I2Cx_Error>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000006c 	.word	0x2000006c
 80025e0:	2000042c 	.word	0x2000042c

080025e4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	4603      	mov	r3, r0
 80025ec:	460a      	mov	r2, r1
 80025ee:	80fb      	strh	r3, [r7, #6]
 80025f0:	4613      	mov	r3, r2
 80025f2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80025fc:	797b      	ldrb	r3, [r7, #5]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <I2Cx_ReadData+0x50>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	88f9      	ldrh	r1, [r7, #6]
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2301      	movs	r3, #1
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	f107 030e 	add.w	r3, r7, #14
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	4808      	ldr	r0, [pc, #32]	; (8002638 <I2Cx_ReadData+0x54>)
 8002616:	f001 fc87 	bl	8003f28 <HAL_I2C_Mem_Read>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002624:	f000 f80a 	bl	800263c <I2Cx_Error>
  }
  return value;
 8002628:	7bbb      	ldrb	r3, [r7, #14]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000006c 	.word	0x2000006c
 8002638:	2000042c 	.word	0x2000042c

0800263c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <I2Cx_Error+0x14>)
 8002642:	f001 fb47 	bl	8003cd4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8002646:	f7ff ff73 	bl	8002530 <I2Cx_Init>
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000042c 	.word	0x2000042c

08002654 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <I2Cx_MspInit+0xa4>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <I2Cx_MspInit+0xa4>)
 8002666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <I2Cx_MspInit+0xa4>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <I2Cx_MspInit+0xa4>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <I2Cx_MspInit+0xa4>)
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <I2Cx_MspInit+0xa4>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002694:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002698:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800269a:	2312      	movs	r3, #18
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026a2:	2302      	movs	r3, #2
 80026a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80026a6:	2304      	movs	r3, #4
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4812      	ldr	r0, [pc, #72]	; (80026fc <I2Cx_MspInit+0xa8>)
 80026b2:	f000 ff19 	bl	80034e8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <I2Cx_MspInit+0xa4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <I2Cx_MspInit+0xa4>)
 80026bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026c0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <I2Cx_MspInit+0xa4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <I2Cx_MspInit+0xa4>)
 80026c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026cc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	210f      	movs	r1, #15
 80026d2:	201f      	movs	r0, #31
 80026d4:	f000 fb57 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80026d8:	201f      	movs	r0, #31
 80026da:	f000 fb70 	bl	8002dbe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	210f      	movs	r1, #15
 80026e2:	2020      	movs	r0, #32
 80026e4:	f000 fb4f 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80026e8:	2020      	movs	r0, #32
 80026ea:	f000 fb68 	bl	8002dbe <HAL_NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400

08002700 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <COMPASSACCELERO_IO_Init+0x48>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <COMPASSACCELERO_IO_Init+0x48>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <COMPASSACCELERO_IO_Init+0x48>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002722:	2304      	movs	r3, #4
 8002724:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <COMPASSACCELERO_IO_Init+0x4c>)
 8002738:	f000 fed6 	bl	80034e8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800273c:	f7ff fef8 	bl	8002530 <I2Cx_Init>
}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	40021000 	.word	0x40021000

08002750 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002772:	2330      	movs	r3, #48	; 0x30
 8002774:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800277a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800277c:	2302      	movs	r3, #2
 800277e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <COMPASSACCELERO_IO_ITConfig+0x5c>)
 800278a:	f000 fead 	bl	80034e8 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800278e:	2200      	movs	r2, #0
 8002790:	210f      	movs	r1, #15
 8002792:	200a      	movs	r0, #10
 8002794:	f000 faf7 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002798:	200a      	movs	r0, #10
 800279a:	f000 fb10 	bl	8002dbe <HAL_NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40021000 	.word	0x40021000

080027b0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
 80027ba:	460b      	mov	r3, r1
 80027bc:	717b      	strb	r3, [r7, #5]
 80027be:	4613      	mov	r3, r2
 80027c0:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80027c2:	793a      	ldrb	r2, [r7, #4]
 80027c4:	7979      	ldrb	r1, [r7, #5]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fee3 	bl	8002594 <I2Cx_WriteData>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	460a      	mov	r2, r1
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	4613      	mov	r3, r2
 80027e4:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80027e6:	797a      	ldrb	r2, [r7, #5]
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fef9 	bl	80025e4 <I2Cx_ReadData>
 80027f2:	4603      	mov	r3, r0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002806:	2300      	movs	r3, #0
 8002808:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002812:	4b58      	ldr	r3, [pc, #352]	; (8002974 <BSP_ACCELERO_Init+0x178>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4798      	blx	r3
 8002818:	4603      	mov	r3, r0
 800281a:	2b33      	cmp	r3, #51	; 0x33
 800281c:	d14f      	bne.n	80028be <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800281e:	4b56      	ldr	r3, [pc, #344]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 8002820:	4a54      	ldr	r2, [pc, #336]	; (8002974 <BSP_ACCELERO_Init+0x178>)
 8002822:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002824:	2300      	movs	r3, #0
 8002826:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002828:	2340      	movs	r3, #64	; 0x40
 800282a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 800282c:	2307      	movs	r3, #7
 800282e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002830:	2300      	movs	r3, #0
 8002832:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002834:	2300      	movs	r3, #0
 8002836:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002838:	2300      	movs	r3, #0
 800283a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 800283c:	2308      	movs	r3, #8
 800283e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002840:	7b3a      	ldrb	r2, [r7, #12]
 8002842:	7b7b      	ldrb	r3, [r7, #13]
 8002844:	4313      	orrs	r3, r2
 8002846:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800284a:	4313      	orrs	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	b29a      	uxth	r2, r3
 8002850:	8abb      	ldrh	r3, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002856:	7c3a      	ldrb	r2, [r7, #16]
 8002858:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800285a:	4313      	orrs	r3, r2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	7cbb      	ldrb	r3, [r7, #18]
 8002860:	4313      	orrs	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	4313      	orrs	r3, r2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800286c:	b21a      	sxth	r2, r3
 800286e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	b21b      	sxth	r3, r3
 8002876:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	8aba      	ldrh	r2, [r7, #20]
 8002880:	4610      	mov	r0, r2
 8002882:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002888:	2310      	movs	r3, #16
 800288a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002894:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002896:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002898:	4313      	orrs	r3, r2
 800289a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 800289c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800289e:	4313      	orrs	r3, r2
 80028a0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80028aa:	4b33      	ldr	r3, [pc, #204]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	8aba      	ldrh	r2, [r7, #20]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4610      	mov	r0, r2
 80028b6:	4798      	blx	r3

    ret = ACCELERO_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
 80028bc:	e054      	b.n	8002968 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <BSP_ACCELERO_Init+0x180>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4798      	blx	r3
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b33      	cmp	r3, #51	; 0x33
 80028c8:	d14e      	bne.n	8002968 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 80028cc:	4a2b      	ldr	r2, [pc, #172]	; (800297c <BSP_ACCELERO_Init+0x180>)
 80028ce:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80028d4:	2340      	movs	r3, #64	; 0x40
 80028d6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80028d8:	2307      	movs	r3, #7
 80028da:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80028dc:	2300      	movs	r3, #0
 80028de:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80028e0:	2300      	movs	r3, #0
 80028e2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80028e4:	2300      	movs	r3, #0
 80028e6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80028e8:	2308      	movs	r3, #8
 80028ea:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80028ec:	7b3a      	ldrb	r2, [r7, #12]
 80028ee:	7b7b      	ldrb	r3, [r7, #13]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	8abb      	ldrh	r3, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002902:	7c3a      	ldrb	r2, [r7, #16]
 8002904:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002906:	4313      	orrs	r3, r2
 8002908:	b2da      	uxtb	r2, r3
 800290a:	7cbb      	ldrb	r3, [r7, #18]
 800290c:	4313      	orrs	r3, r2
 800290e:	b2da      	uxtb	r2, r3
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	4313      	orrs	r3, r2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002918:	b21a      	sxth	r2, r3
 800291a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	b21b      	sxth	r3, r3
 8002922:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	8aba      	ldrh	r2, [r7, #20]
 800292c:	4610      	mov	r0, r2
 800292e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002934:	2310      	movs	r3, #16
 8002936:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002940:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002942:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002944:	4313      	orrs	r3, r2
 8002946:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002948:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800294a:	4313      	orrs	r3, r2
 800294c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800294e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002950:	4313      	orrs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <BSP_ACCELERO_Init+0x17c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	8aba      	ldrh	r2, [r7, #20]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	4610      	mov	r0, r2
 8002962:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000038 	.word	0x20000038
 8002978:	20000480 	.word	0x20000480
 800297c:	20000004 	.word	0x20000004

08002980 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <BSP_ACCELERO_GetXYZ+0x50>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <BSP_ACCELERO_GetXYZ+0x50>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <BSP_ACCELERO_GetXYZ+0x54>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10e      	bne.n	80029c8 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	425b      	negs	r3, r3
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3302      	adds	r3, #2
 80029c4:	b212      	sxth	r2, r2
 80029c6:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000480 	.word	0x20000480
 80029d4:	20000038 	.word	0x20000038

080029d8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_I2S_TxCpltCallback+0x20>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80029ea:	f000 f807 	bl	80029fc <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40003c00 	.word	0x40003c00

080029fc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002a20:	f000 f804 	bl	8002a2c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_I2S_ErrorCallback+0x2c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002a5a:	f7ff ffd6 	bl	8002a0a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <HAL_I2S_ErrorCallback+0x30>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8002a68:	f7ff ffe7 	bl	8002a3a <BSP_AUDIO_IN_Error_Callback>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40003c00 	.word	0x40003c00
 8002a78:	40003800 	.word	0x40003800

08002a7c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <BSP_GYRO_GetXYZ+0x24>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <BSP_GYRO_GetXYZ+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000484 	.word	0x20000484

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_Init+0x40>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_Init+0x40>)
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_Init+0x40>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 f94f 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f808 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad8:	f7ff f838 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f967 	bl	8002dda <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b24:	f000 f92f 	bl	8002d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000074 	.word	0x20000074
 8002b44:	20000070 	.word	0x20000070

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000074 	.word	0x20000074
 8002b6c:	20000488 	.word	0x20000488

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000488 	.word	0x20000488

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000074 	.word	0x20000074

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <__NVIC_EnableIRQ+0x38>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	bf28      	it	cs
 8002ce2:	2304      	movcs	r3, #4
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	401a      	ands	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	4313      	orrs	r3, r2
         );
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3c:	d301      	bcc.n	8002d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00f      	b.n	8002d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <SysTick_Config+0x40>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d50:	f7ff ff8e 	bl	8002c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x40>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x40>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff29 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d98:	f7ff ff3e 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6978      	ldr	r0, [r7, #20]
 8002da4:	f7ff ff8e 	bl	8002cc4 <NVIC_EncodePriority>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff5d 	bl	8002c70 <__NVIC_SetPriority>
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff31 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffa2 	bl	8002d2c <SysTick_Config>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff feb6 	bl	8002b70 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e052      	b.n	8002eca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0216 	bic.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <HAL_DMA_Abort+0x62>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0208 	bic.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e74:	e013      	b.n	8002e9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e76:	f7ff fe7b 	bl	8002b70 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d90c      	bls.n	8002e9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e015      	b.n	8002eca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e4      	bne.n	8002e76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e00c      	b.n	8002f0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_FLASH_Program+0xa0>)
 8002f2c:	7e1b      	ldrb	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_FLASH_Program+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e03b      	b.n	8002fae <HAL_FLASH_Program+0x96>
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_FLASH_Program+0xa0>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f40:	f000 f870 	bl	8003024 <FLASH_WaitForLastOperation>
 8002f44:	4603      	mov	r3, r0
 8002f46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d12b      	bne.n	8002fa6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002f54:	783b      	ldrb	r3, [r7, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	f000 f91b 	bl	8003194 <FLASH_Program_Byte>
 8002f5e:	e016      	b.n	8002f8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002f66:	883b      	ldrh	r3, [r7, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68b8      	ldr	r0, [r7, #8]
 8002f6c:	f000 f8ee 	bl	800314c <FLASH_Program_HalfWord>
 8002f70:	e00d      	b.n	8002f8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d105      	bne.n	8002f84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	68b8      	ldr	r0, [r7, #8]
 8002f7e:	f000 f8c3 	bl	8003108 <FLASH_Program_Word>
 8002f82:	e004      	b.n	8002f8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f88:	68b8      	ldr	r0, [r7, #8]
 8002f8a:	f000 f88b 	bl	80030a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f92:	f000 f847 	bl	8003024 <FLASH_WaitForLastOperation>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_FLASH_Program+0xa4>)
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_FLASH_Program+0xa4>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_FLASH_Program+0xa0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000048c 	.word	0x2000048c
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_FLASH_Unlock+0x38>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da0b      	bge.n	8002fea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_FLASH_Unlock+0x38>)
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_FLASH_Unlock+0x3c>)
 8002fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_FLASH_Unlock+0x38>)
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_FLASH_Unlock+0x40>)
 8002fdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_FLASH_Unlock+0x38>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da01      	bge.n	8002fea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002fea:	79fb      	ldrb	r3, [r7, #7]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40023c00 	.word	0x40023c00
 8002ffc:	45670123 	.word	0x45670123
 8003000:	cdef89ab 	.word	0xcdef89ab

08003004 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_FLASH_Lock+0x1c>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_FLASH_Lock+0x1c>)
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40023c00 	.word	0x40023c00

08003024 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <FLASH_WaitForLastOperation+0x78>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003036:	f7ff fd9b 	bl	8002b70 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800303c:	e010      	b.n	8003060 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d00c      	beq.n	8003060 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <FLASH_WaitForLastOperation+0x38>
 800304c:	f7ff fd90 	bl	8002b70 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d201      	bcs.n	8003060 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e019      	b.n	8003094 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <FLASH_WaitForLastOperation+0x7c>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e8      	bne.n	800303e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <FLASH_WaitForLastOperation+0x7c>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <FLASH_WaitForLastOperation+0x7c>)
 800307a:	2201      	movs	r2, #1
 800307c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <FLASH_WaitForLastOperation+0x7c>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800308a:	f000 f8a5 	bl	80031d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
  
}  
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000048c 	.word	0x2000048c
 80030a0:	40023c00 	.word	0x40023c00

080030a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4a10      	ldr	r2, [pc, #64]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80030c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <FLASH_Program_DoubleWord+0x60>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80030da:	f3bf 8f6f 	isb	sy
}
 80030de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80030e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	000a      	movs	r2, r1
 80030ee:	2300      	movs	r3, #0
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	3104      	adds	r1, #4
 80030f4:	4613      	mov	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40023c00 	.word	0x40023c00

08003108 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <FLASH_Program_Word+0x40>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <FLASH_Program_Word+0x40>)
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <FLASH_Program_Word+0x40>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <FLASH_Program_Word+0x40>)
 8003124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003128:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <FLASH_Program_Word+0x40>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	4a06      	ldr	r2, [pc, #24]	; (8003148 <FLASH_Program_Word+0x40>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	601a      	str	r2, [r3, #0]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40023c00 	.word	0x40023c00

0800314c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <FLASH_Program_HalfWord+0x44>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	801a      	strh	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023c00 	.word	0x40023c00

08003194 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4a06      	ldr	r2, [pc, #24]	; (80031d4 <FLASH_Program_Byte+0x40>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	701a      	strb	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <FLASH_SetErrorCode+0xc4>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f043 0310 	orr.w	r3, r3, #16
 80031f0:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 80031f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <FLASH_SetErrorCode+0xc4>)
 80031f6:	2210      	movs	r2, #16
 80031f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <FLASH_SetErrorCode+0xc4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003210:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003214:	2220      	movs	r2, #32
 8003216:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <FLASH_SetErrorCode+0xc4>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 800322e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f043 0302 	orr.w	r3, r3, #2
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 800324c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 800326a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <FLASH_SetErrorCode+0xc4>)
 800326e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003272:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <FLASH_SetErrorCode+0xc4>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <FLASH_SetErrorCode+0xc8>)
 800328a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <FLASH_SetErrorCode+0xc4>)
 800328e:	2202      	movs	r2, #2
 8003290:	60da      	str	r2, [r3, #12]
  }
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40023c00 	.word	0x40023c00
 80032a0:	2000048c 	.word	0x2000048c

080032a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_FLASHEx_Erase+0xd8>)
 80032b8:	7e1b      	ldrb	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_FLASHEx_Erase+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e058      	b.n	8003374 <HAL_FLASHEx_Erase+0xd0>
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <HAL_FLASHEx_Erase+0xd8>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032cc:	f7ff feaa 	bl	8003024 <FLASH_WaitForLastOperation>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d148      	bne.n	800336c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d115      	bne.n	8003316 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 f844 	bl	8003384 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003300:	f7ff fe90 	bl	8003024 <FLASH_WaitForLastOperation>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_FLASHEx_Erase+0xdc>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_FLASHEx_Erase+0xdc>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6113      	str	r3, [r2, #16]
 8003314:	e028      	b.n	8003368 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e01c      	b.n	8003358 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	68b8      	ldr	r0, [r7, #8]
 8003328:	f000 f850 	bl	80033cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800332c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003330:	f7ff fe78 	bl	8003024 <FLASH_WaitForLastOperation>
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_FLASHEx_Erase+0xdc>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4a10      	ldr	r2, [pc, #64]	; (8003380 <HAL_FLASHEx_Erase+0xdc>)
 800333e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003342:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	601a      	str	r2, [r3, #0]
          break;
 8003350:	e00a      	b.n	8003368 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3301      	adds	r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4413      	add	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d3da      	bcc.n	800331e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003368:	f000 f878 	bl	800345c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_FLASHEx_Erase+0xd8>)
 800336e:	2200      	movs	r2, #0
 8003370:	761a      	strb	r2, [r3, #24]

  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000048c 	.word	0x2000048c
 8003380:	40023c00 	.word	0x40023c00

08003384 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <FLASH_MassErase+0x44>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <FLASH_MassErase+0x44>)
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <FLASH_MassErase+0x44>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <FLASH_MassErase+0x44>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <FLASH_MassErase+0x44>)
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	4313      	orrs	r3, r2
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <FLASH_MassErase+0x44>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6113      	str	r3, [r2, #16]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00

080033cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e010      	b.n	800340a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d103      	bne.n	80033f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80033ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e009      	b.n	800340a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d103      	bne.n	8003404 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80033fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e002      	b.n	800340a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003404:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	490f      	ldr	r1, [pc, #60]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003428:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800342c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4313      	orrs	r3, r2
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <FLASH_Erase_Sector+0x8c>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6113      	str	r3, [r2, #16]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40023c00 	.word	0x40023c00

0800345c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003460:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <FLASH_FlushCaches+0x88>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <FLASH_FlushCaches+0x88>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <FLASH_FlushCaches+0x88>)
 8003472:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003476:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <FLASH_FlushCaches+0x88>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <FLASH_FlushCaches+0x88>)
 800347e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <FLASH_FlushCaches+0x88>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <FLASH_FlushCaches+0x88>)
 800348a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <FLASH_FlushCaches+0x88>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <FLASH_FlushCaches+0x88>)
 8003496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800349a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <FLASH_FlushCaches+0x88>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d017      	beq.n	80034d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <FLASH_FlushCaches+0x88>)
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	6013      	str	r3, [r2, #0]
  }
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e159      	b.n	80037b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003504:	2201      	movs	r2, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	f040 8148 	bne.w	80037b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d005      	beq.n	800353a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003536:	2b02      	cmp	r3, #2
 8003538:	d130      	bne.n	800359c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003570:	2201      	movs	r2, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 0201 	and.w	r2, r3, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d017      	beq.n	80035d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d123      	bne.n	800362c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	08da      	lsrs	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a2 	beq.w	80037b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <HAL_GPIO_Init+0x2e8>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_GPIO_Init+0x2e8>)
 8003678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800367c:	6453      	str	r3, [r2, #68]	; 0x44
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <HAL_GPIO_Init+0x2e8>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368a:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_GPIO_Init+0x2ec>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a49      	ldr	r2, [pc, #292]	; (80037d8 <HAL_GPIO_Init+0x2f0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d019      	beq.n	80036ea <HAL_GPIO_Init+0x202>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a48      	ldr	r2, [pc, #288]	; (80037dc <HAL_GPIO_Init+0x2f4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x1fe>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a47      	ldr	r2, [pc, #284]	; (80037e0 <HAL_GPIO_Init+0x2f8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a46      	ldr	r2, [pc, #280]	; (80037e4 <HAL_GPIO_Init+0x2fc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x1f6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_GPIO_Init+0x300>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x1f2>
 80036d6:	2304      	movs	r3, #4
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_Init+0x204>
 80036da:	2307      	movs	r3, #7
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x204>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_Init+0x204>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_Init+0x204>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_Init+0x204>
 80036ea:	2300      	movs	r3, #0
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f002 0203 	and.w	r2, r2, #3
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	4093      	lsls	r3, r2
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036fc:	4935      	ldr	r1, [pc, #212]	; (80037d4 <HAL_GPIO_Init+0x2ec>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <HAL_GPIO_Init+0x304>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372e:	4a2f      	ldr	r2, [pc, #188]	; (80037ec <HAL_GPIO_Init+0x304>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_GPIO_Init+0x304>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <HAL_GPIO_Init+0x304>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_GPIO_Init+0x304>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_GPIO_Init+0x304>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_GPIO_Init+0x304>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ac:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <HAL_GPIO_Init+0x304>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	f67f aea2 	bls.w	8003504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40020000 	.word	0x40020000
 80037dc:	40020400 	.word	0x40020400
 80037e0:	40020800 	.word	0x40020800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e0bb      	b.n	8003984 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	f040 80ab 	bne.w	800397e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003828:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_GPIO_DeInit+0x1ac>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	3302      	adds	r3, #2
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_GPIO_DeInit+0x1b0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_DeInit+0x96>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a53      	ldr	r2, [pc, #332]	; (80039a4 <HAL_GPIO_DeInit+0x1b4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_DeInit+0x92>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_GPIO_DeInit+0x1b8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_DeInit+0x8e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a51      	ldr	r2, [pc, #324]	; (80039ac <HAL_GPIO_DeInit+0x1bc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_DeInit+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a50      	ldr	r2, [pc, #320]	; (80039b0 <HAL_GPIO_DeInit+0x1c0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_DeInit+0x86>
 8003872:	2304      	movs	r3, #4
 8003874:	e008      	b.n	8003888 <HAL_GPIO_DeInit+0x98>
 8003876:	2307      	movs	r3, #7
 8003878:	e006      	b.n	8003888 <HAL_GPIO_DeInit+0x98>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_DeInit+0x98>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_DeInit+0x98>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_DeInit+0x98>
 8003886:	2300      	movs	r3, #0
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	d132      	bne.n	80038fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003898:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	43db      	mvns	r3, r3
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	4941      	ldr	r1, [pc, #260]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038b4:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038be:	4013      	ands	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	493a      	ldr	r1, [pc, #232]	; (80039b4 <HAL_GPIO_DeInit+0x1c4>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80038e0:	4a2e      	ldr	r2, [pc, #184]	; (800399c <HAL_GPIO_DeInit+0x1ac>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	482a      	ldr	r0, [pc, #168]	; (800399c <HAL_GPIO_DeInit+0x1ac>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	400a      	ands	r2, r1
 80038f8:	3302      	adds	r3, #2
 80038fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2103      	movs	r1, #3
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	401a      	ands	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	08da      	lsrs	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3208      	adds	r2, #8
 800391c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	08d2      	lsrs	r2, r2, #3
 8003934:	4019      	ands	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3208      	adds	r2, #8
 800393a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2103      	movs	r1, #3
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	401a      	ands	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	2101      	movs	r1, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2103      	movs	r1, #3
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	401a      	ands	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	f67f af40 	bls.w	800380c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40013c00 	.word	0x40013c00

080039b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e001      	b.n	80039da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
 80039f4:	4613      	mov	r3, r2
 80039f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f8:	787b      	ldrb	r3, [r7, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a04:	e003      	b.n	8003a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	041a      	lsls	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd ffc4 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e12b      	b.n	8003cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fc60 	bl	8001338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f002 f8bc 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8003ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a81      	ldr	r2, [pc, #516]	; (8003cc0 <HAL_I2C_Init+0x274>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d807      	bhi.n	8003ad0 <HAL_I2C_Init+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_I2C_Init+0x278>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bf94      	ite	ls
 8003ac8:	2301      	movls	r3, #1
 8003aca:	2300      	movhi	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e006      	b.n	8003ade <HAL_I2C_Init+0x92>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a7d      	ldr	r2, [pc, #500]	; (8003cc8 <HAL_I2C_Init+0x27c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bf94      	ite	ls
 8003ad8:	2301      	movls	r3, #1
 8003ada:	2300      	movhi	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0e7      	b.n	8003cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a78      	ldr	r2, [pc, #480]	; (8003ccc <HAL_I2C_Init+0x280>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a6a      	ldr	r2, [pc, #424]	; (8003cc0 <HAL_I2C_Init+0x274>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d802      	bhi.n	8003b20 <HAL_I2C_Init+0xd4>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	e009      	b.n	8003b34 <HAL_I2C_Init+0xe8>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	4a69      	ldr	r2, [pc, #420]	; (8003cd0 <HAL_I2C_Init+0x284>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	495c      	ldr	r1, [pc, #368]	; (8003cc0 <HAL_I2C_Init+0x274>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d819      	bhi.n	8003b88 <HAL_I2C_Init+0x13c>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e59      	subs	r1, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b62:	1c59      	adds	r1, r3, #1
 8003b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b68:	400b      	ands	r3, r1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_I2C_Init+0x138>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e59      	subs	r1, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	e051      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003b84:	2304      	movs	r3, #4
 8003b86:	e04f      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <HAL_I2C_Init+0x168>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1e58      	subs	r0, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e012      	b.n	8003bda <HAL_I2C_Init+0x18e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e58      	subs	r0, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	0099      	lsls	r1, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Init+0x196>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e022      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <HAL_I2C_Init+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e58      	subs	r0, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	440b      	add	r3, r1
 8003bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c06:	e00f      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	0099      	lsls	r1, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	6809      	ldr	r1, [r1, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6911      	ldr	r1, [r2, #16]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	000186a0 	.word	0x000186a0
 8003cc4:	001e847f 	.word	0x001e847f
 8003cc8:	003d08ff 	.word	0x003d08ff
 8003ccc:	431bde83 	.word	0x431bde83
 8003cd0:	10624dd3 	.word	0x10624dd3

08003cd4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e021      	b.n	8003d2a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fb62 	bl	80013c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	817b      	strh	r3, [r7, #10]
 8003d46:	460b      	mov	r3, r1
 8003d48:	813b      	strh	r3, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4e:	f7fe ff0f 	bl	8002b70 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	f040 80d9 	bne.w	8003f14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2319      	movs	r3, #25
 8003d68:	2201      	movs	r2, #1
 8003d6a:	496d      	ldr	r1, [pc, #436]	; (8003f20 <HAL_I2C_Mem_Write+0x1ec>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fc8d 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0cc      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Mem_Write+0x56>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0c5      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d007      	beq.n	8003db0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	; (8003f24 <HAL_I2C_Mem_Write+0x1f0>)
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df2:	88f8      	ldrh	r0, [r7, #6]
 8003df4:	893a      	ldrh	r2, [r7, #8]
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4603      	mov	r3, r0
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fac4 	bl	8004390 <I2C_RequestMemoryWrite>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d052      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e081      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fd0e 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1aa      	bne.n	8003e12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fcfa 	bl	80048ba <I2C_WaitOnBTFFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d107      	bne.n	8003ee4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e016      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000

08003f28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	817b      	strh	r3, [r7, #10]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	813b      	strh	r3, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7fe fe15 	bl	8002b70 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	f040 8208 	bne.w	8004366 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2319      	movs	r3, #25
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	497b      	ldr	r1, [pc, #492]	; (800414c <HAL_I2C_Mem_Read+0x224>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fb93 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e1fb      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x56>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e1f4      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d007      	beq.n	8003fa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	; 0x22
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a5b      	ldr	r2, [pc, #364]	; (8004150 <HAL_I2C_Mem_Read+0x228>)
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe6:	88f8      	ldrh	r0, [r7, #6]
 8003fe8:	893a      	ldrh	r2, [r7, #8]
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa60 	bl	80044bc <I2C_RequestMemoryRead>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e1b0      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d113      	bne.n	8004036 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e184      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d11b      	bne.n	8004076 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e164      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b02      	cmp	r3, #2
 800407c:	d11b      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	e144      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040cc:	e138      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	f200 80f1 	bhi.w	80042ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d123      	bne.n	8004128 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fc29 	bl	800493c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e139      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004126:	e10b      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	d14e      	bne.n	80041ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2200      	movs	r2, #0
 8004138:	4906      	ldr	r1, [pc, #24]	; (8004154 <HAL_I2C_Mem_Read+0x22c>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 faa6 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e10e      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
 800414a:	bf00      	nop
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041cc:	e0b8      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2200      	movs	r2, #0
 80041d6:	4966      	ldr	r1, [pc, #408]	; (8004370 <HAL_I2C_Mem_Read+0x448>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fa57 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0bf      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2200      	movs	r2, #0
 8004232:	494f      	ldr	r1, [pc, #316]	; (8004370 <HAL_I2C_Mem_Read+0x448>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fa29 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e091      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b8:	e042      	b.n	8004340 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fb3c 	bl	800493c <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e04c      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d118      	bne.n	8004340 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f aec2 	bne.w	80040ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	00010004 	.word	0x00010004

08004374 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	817b      	strh	r3, [r7, #10]
 80043a2:	460b      	mov	r3, r1
 80043a4:	813b      	strh	r3, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f960 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d103      	bne.n	80043ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e05f      	b.n	80044ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	492d      	ldr	r1, [pc, #180]	; (80044b8 <I2C_RequestMemoryWrite+0x128>)
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f998 	bl	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04c      	b.n	80044ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	6a39      	ldr	r1, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fa02 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b04      	cmp	r3, #4
 8004440:	d107      	bne.n	8004452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e02b      	b.n	80044ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]
 8004466:	e021      	b.n	80044ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004468:	893b      	ldrh	r3, [r7, #8]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	b29b      	uxth	r3, r3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	6a39      	ldr	r1, [r7, #32]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f9dc 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2b04      	cmp	r3, #4
 800448c:	d107      	bne.n	800449e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e005      	b.n	80044ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	00010002 	.word	0x00010002

080044bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	817b      	strh	r3, [r7, #10]
 80044ce:	460b      	mov	r3, r1
 80044d0:	813b      	strh	r3, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8c2 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d103      	bne.n	8004526 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0aa      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	4952      	ldr	r1, [pc, #328]	; (8004688 <I2C_RequestMemoryRead+0x1cc>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f8fa 	bl	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e097      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	6a39      	ldr	r1, [r7, #32]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f964 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b04      	cmp	r3, #4
 800457c:	d107      	bne.n	800458e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e076      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e021      	b.n	80045e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f93e 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e050      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	6a39      	ldr	r1, [r7, #32]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f923 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d107      	bne.n	8004610 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e035      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2200      	movs	r2, #0
 800462c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f82b 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d103      	bne.n	8004654 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e013      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	4906      	ldr	r1, [pc, #24]	; (8004688 <I2C_RequestMemoryRead+0x1cc>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f863 	bl	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	00010002 	.word	0x00010002

0800468c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800469c:	e025      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a4:	d021      	beq.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe fa63 	bl	8002b70 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d116      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e023      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10d      	bne.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	e00c      	b.n	800472a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	429a      	cmp	r2, r3
 800472e:	d0b6      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004748:	e051      	b.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d123      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e046      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a8:	d021      	beq.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe f9e1 	bl	8002b70 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e020      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e00b      	b.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d18d      	bne.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004844:	e02d      	b.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f8ce 	bl	80049e8 <I2C_IsAcknowledgeFailed>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e02d      	b.n	80048b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485c:	d021      	beq.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe f987 	bl	8002b70 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d116      	bne.n	80048a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d1ca      	bne.n	8004846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c6:	e02d      	b.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f88d 	bl	80049e8 <I2C_IsAcknowledgeFailed>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e02d      	b.n	8004934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048de:	d021      	beq.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7fe f946 	bl	8002b70 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e007      	b.n	8004934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b04      	cmp	r3, #4
 8004930:	d1ca      	bne.n	80048c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004948:	e042      	b.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d119      	bne.n	800498c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e029      	b.n	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7fe f8f0 	bl	8002b70 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e007      	b.n	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d1b5      	bne.n	800494a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fe:	d11b      	bne.n	8004a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e128      	b.n	8004cac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a90      	ldr	r2, [pc, #576]	; (8004cb4 <HAL_I2S_Init+0x26c>)
 8004a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fd27 	bl	80014c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a90:	f023 030f 	bic.w	r3, r3, #15
 8004a94:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d060      	beq.n	8004b68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aae:	2310      	movs	r3, #16
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e001      	b.n	8004ab8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d802      	bhi.n	8004ac6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f001 f9c8 	bl	8005e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8004acc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad6:	d125      	bne.n	8004b24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	461a      	mov	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	3305      	adds	r3, #5
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e01f      	b.n	8004b42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	3305      	adds	r3, #5
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e00e      	b.n	8004b42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	3305      	adds	r3, #5
 8004b40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4a5c      	ldr	r2, [pc, #368]	; (8004cb8 <HAL_I2S_Init+0x270>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	08db      	lsrs	r3, r3, #3
 8004b4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d902      	bls.n	8004b7c <HAL_I2S_Init+0x134>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2bff      	cmp	r3, #255	; 0xff
 8004b7a:	d907      	bls.n	8004b8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	f043 0210 	orr.w	r2, r3, #16
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e08f      	b.n	8004cac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	ea42 0103 	orr.w	r1, r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6851      	ldr	r1, [r2, #4]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68d2      	ldr	r2, [r2, #12]
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6992      	ldr	r2, [r2, #24]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d161      	bne.n	8004c9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a38      	ldr	r2, [pc, #224]	; (8004cbc <HAL_I2S_Init+0x274>)
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a37      	ldr	r2, [pc, #220]	; (8004cc0 <HAL_I2S_Init+0x278>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_I2S_Init+0x1a4>
 8004be8:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_I2S_Init+0x27c>)
 8004bea:	e001      	b.n	8004bf0 <HAL_I2S_Init+0x1a8>
 8004bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	4932      	ldr	r1, [pc, #200]	; (8004cc0 <HAL_I2S_Init+0x278>)
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2S_Init+0x1b8>
 8004bfc:	4a31      	ldr	r2, [pc, #196]	; (8004cc4 <HAL_I2S_Init+0x27c>)
 8004bfe:	e001      	b.n	8004c04 <HAL_I2S_Init+0x1bc>
 8004c00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c08:	f023 030f 	bic.w	r3, r3, #15
 8004c0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <HAL_I2S_Init+0x278>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <HAL_I2S_Init+0x1d4>
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_I2S_Init+0x27c>)
 8004c1a:	e001      	b.n	8004c20 <HAL_I2S_Init+0x1d8>
 8004c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c20:	2202      	movs	r2, #2
 8004c22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <HAL_I2S_Init+0x278>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2S_Init+0x1ea>
 8004c2e:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_I2S_Init+0x27c>)
 8004c30:	e001      	b.n	8004c36 <HAL_I2S_Init+0x1ee>
 8004c32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c42:	d003      	beq.n	8004c4c <HAL_I2S_Init+0x204>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e001      	b.n	8004c58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <HAL_I2S_Init+0x278>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2S_Init+0x24c>
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_I2S_Init+0x27c>)
 8004c92:	e001      	b.n	8004c98 <HAL_I2S_Init+0x250>
 8004c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c98:	897a      	ldrh	r2, [r7, #10]
 8004c9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	08004d83 	.word	0x08004d83
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	08004e99 	.word	0x08004e99
 8004cc0:	40003800 	.word	0x40003800
 8004cc4:	40003400 	.word	0x40003400

08004cc8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10e      	bne.n	8004d1c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fe5e 	bl	80029d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	b292      	uxth	r2, r2
 8004d38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10e      	bne.n	8004d7a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fd fe4f 	bl	8002a18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d13a      	bne.n	8004e14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d109      	bne.n	8004dbc <I2S_IRQHandler+0x3a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d102      	bne.n	8004dbc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ffb4 	bl	8004d24 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d126      	bne.n	8004e14 <I2S_IRQHandler+0x92>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d11f      	bne.n	8004e14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004de2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd fe1a 	bl	8002a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d136      	bne.n	8004e8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d109      	bne.n	8004e3e <I2S_IRQHandler+0xbc>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d102      	bne.n	8004e3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff45 	bl	8004cc8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d122      	bne.n	8004e8e <I2S_IRQHandler+0x10c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d11b      	bne.n	8004e8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f043 0204 	orr.w	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fd fddd 	bl	8002a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a92      	ldr	r2, [pc, #584]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004eb2:	4b92      	ldr	r3, [pc, #584]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb4:	e001      	b.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a8b      	ldr	r2, [pc, #556]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ed0:	4b8a      	ldr	r3, [pc, #552]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed2:	e001      	b.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d004      	beq.n	8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 8099 	bne.w	8005022 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d107      	bne.n	8004f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f925 	bl	8005154 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9c8 	bl	80052b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d13a      	bne.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d035      	beq.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a6e      	ldr	r2, [pc, #440]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f42:	4b6e      	ldr	r3, [pc, #440]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f44:	e001      	b.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4969      	ldr	r1, [pc, #420]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f52:	428b      	cmp	r3, r1
 8004f54:	d101      	bne.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f56:	4b69      	ldr	r3, [pc, #420]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f58:	e001      	b.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f043 0202 	orr.w	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fd52 	bl	8002a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	f040 80c3 	bne.w	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80bd 	beq.w	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a49      	ldr	r2, [pc, #292]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fd8:	e001      	b.n	8004fde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4944      	ldr	r1, [pc, #272]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	d101      	bne.n	8004fee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004fea:	4b44      	ldr	r3, [pc, #272]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fec:	e001      	b.n	8004ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ff6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f043 0204 	orr.w	r2, r3, #4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fd fd14 	bl	8002a48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005020:	e089      	b.n	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b02      	cmp	r3, #2
 800502a:	d107      	bne.n	800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8be 	bl	80051b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8fd 	bl	8005250 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d12f      	bne.n	80050c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d02a      	beq.n	80050c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005078:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005086:	e001      	b.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4919      	ldr	r1, [pc, #100]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005094:	428b      	cmp	r3, r1
 8005096:	d101      	bne.n	800509c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800509a:	e001      	b.n	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800509c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0202 	orr.w	r2, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fcc4 	bl	8002a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d136      	bne.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d031      	beq.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80050de:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e0:	e001      	b.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80050e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4902      	ldr	r1, [pc, #8]	; (80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ee:	428b      	cmp	r3, r1
 80050f0:	d106      	bne.n	8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80050f2:	4b02      	ldr	r3, [pc, #8]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f4:	e006      	b.n	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80050f6:	bf00      	nop
 80050f8:	40003800 	.word	0x40003800
 80050fc:	40003400 	.word	0x40003400
 8005100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005108:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005118:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fd fc8a 	bl	8002a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005134:	e000      	b.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005136:	bf00      	nop
}
 8005138:	bf00      	nop
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c99      	adds	r1, r3, #2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6251      	str	r1, [r2, #36]	; 0x24
 8005166:	881a      	ldrh	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d113      	bne.n	80051ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ffc9 	bl	8005140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	1c99      	adds	r1, r3, #2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6251      	str	r1, [r2, #36]	; 0x24
 80051ca:	8819      	ldrh	r1, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <I2SEx_TxISR_I2SExt+0x90>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <I2SEx_TxISR_I2SExt+0x22>
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <I2SEx_TxISR_I2SExt+0x94>)
 80051d8:	e001      	b.n	80051de <I2SEx_TxISR_I2SExt+0x26>
 80051da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051de:	460a      	mov	r2, r1
 80051e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d121      	bne.n	800523e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <I2SEx_TxISR_I2SExt+0x90>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <I2SEx_TxISR_I2SExt+0x50>
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <I2SEx_TxISR_I2SExt+0x94>)
 8005206:	e001      	b.n	800520c <I2SEx_TxISR_I2SExt+0x54>
 8005208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	490d      	ldr	r1, [pc, #52]	; (8005248 <I2SEx_TxISR_I2SExt+0x90>)
 8005214:	428b      	cmp	r3, r1
 8005216:	d101      	bne.n	800521c <I2SEx_TxISR_I2SExt+0x64>
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <I2SEx_TxISR_I2SExt+0x94>)
 800521a:	e001      	b.n	8005220 <I2SEx_TxISR_I2SExt+0x68>
 800521c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005224:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff81 	bl	8005140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40003800 	.word	0x40003800
 800524c:	40003400 	.word	0x40003400

08005250 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68d8      	ldr	r0, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	1c99      	adds	r1, r3, #2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005268:	b282      	uxth	r2, r0
 800526a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d113      	bne.n	80052ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005292:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ff4a 	bl	8005140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a20      	ldr	r2, [pc, #128]	; (8005344 <I2SEx_RxISR_I2SExt+0x90>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <I2SEx_RxISR_I2SExt+0x16>
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <I2SEx_RxISR_I2SExt+0x94>)
 80052c8:	e001      	b.n	80052ce <I2SEx_RxISR_I2SExt+0x1a>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ce:	68d8      	ldr	r0, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	1c99      	adds	r1, r3, #2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052da:	b282      	uxth	r2, r0
 80052dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d121      	bne.n	800533a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <I2SEx_RxISR_I2SExt+0x90>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <I2SEx_RxISR_I2SExt+0x50>
 8005300:	4b11      	ldr	r3, [pc, #68]	; (8005348 <I2SEx_RxISR_I2SExt+0x94>)
 8005302:	e001      	b.n	8005308 <I2SEx_RxISR_I2SExt+0x54>
 8005304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	490d      	ldr	r1, [pc, #52]	; (8005344 <I2SEx_RxISR_I2SExt+0x90>)
 8005310:	428b      	cmp	r3, r1
 8005312:	d101      	bne.n	8005318 <I2SEx_RxISR_I2SExt+0x64>
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <I2SEx_RxISR_I2SExt+0x94>)
 8005316:	e001      	b.n	800531c <I2SEx_RxISR_I2SExt+0x68>
 8005318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005320:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff ff03 	bl	8005140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40003800 	.word	0x40003800
 8005348:	40003400 	.word	0x40003400

0800534c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e267      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d075      	beq.n	8005456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800536a:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00c      	beq.n	8005390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800537e:	2b08      	cmp	r3, #8
 8005380:	d112      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005382:	4b82      	ldr	r3, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538e:	d10b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005390:	4b7e      	ldr	r3, [pc, #504]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05b      	beq.n	8005454 <HAL_RCC_OscConfig+0x108>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d157      	bne.n	8005454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e242      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	d106      	bne.n	80053c0 <HAL_RCC_OscConfig+0x74>
 80053b2:	4b76      	ldr	r3, [pc, #472]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a75      	ldr	r2, [pc, #468]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01d      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x98>
 80053ca:	4b70      	ldr	r3, [pc, #448]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6f      	ldr	r2, [pc, #444]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6c      	ldr	r2, [pc, #432]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053e4:	4b69      	ldr	r3, [pc, #420]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a68      	ldr	r2, [pc, #416]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b66      	ldr	r3, [pc, #408]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a65      	ldr	r2, [pc, #404]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80053f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fd fbb4 	bl	8002b70 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540c:	f7fd fbb0 	bl	8002b70 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e207      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b5b      	ldr	r3, [pc, #364]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xc0>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd fba0 	bl	8002b70 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fb9c 	bl	8002b70 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e1f3      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	4b51      	ldr	r3, [pc, #324]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0xe8>
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d063      	beq.n	800552a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005462:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547a:	4b44      	ldr	r3, [pc, #272]	; (800558c <HAL_RCC_OscConfig+0x240>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	4b41      	ldr	r3, [pc, #260]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e1c7      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549e:	4b3b      	ldr	r3, [pc, #236]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4937      	ldr	r1, [pc, #220]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	e03a      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054bc:	4b34      	ldr	r3, [pc, #208]	; (8005590 <HAL_RCC_OscConfig+0x244>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fd fb55 	bl	8002b70 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ca:	f7fd fb51 	bl	8002b70 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1a8      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4925      	ldr	r1, [pc, #148]	; (800558c <HAL_RCC_OscConfig+0x240>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	e015      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCC_OscConfig+0x244>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd fb34 	bl	8002b70 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550c:	f7fd fb30 	bl	8002b70 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e187      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d036      	beq.n	80055a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_RCC_OscConfig+0x248>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fd fb14 	bl	8002b70 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554c:	f7fd fb10 	bl	8002b70 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e167      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_OscConfig+0x240>)
 8005560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x200>
 800556a:	e01b      	b.n	80055a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <HAL_RCC_OscConfig+0x248>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005572:	f7fd fafd 	bl	8002b70 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005578:	e00e      	b.n	8005598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800557a:	f7fd faf9 	bl	8002b70 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d907      	bls.n	8005598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e150      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800558c:	40023800 	.word	0x40023800
 8005590:	42470000 	.word	0x42470000
 8005594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005598:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ea      	bne.n	800557a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8097 	beq.w	80056e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b6:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	4b7d      	ldr	r3, [pc, #500]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6413      	str	r3, [r2, #64]	; 0x40
 80055d2:	4b7a      	ldr	r3, [pc, #488]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e2:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d118      	bne.n	8005620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ee:	4b74      	ldr	r3, [pc, #464]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a73      	ldr	r2, [pc, #460]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fa:	f7fd fab9 	bl	8002b70 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fd fab5 	bl	8002b70 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e10c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCC_OscConfig+0x474>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x2ea>
 8005628:	4b64      	ldr	r3, [pc, #400]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a63      	ldr	r2, [pc, #396]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	e01c      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x30c>
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a5e      	ldr	r2, [pc, #376]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a5b      	ldr	r2, [pc, #364]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005658:	4b58      	ldr	r3, [pc, #352]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a57      	ldr	r2, [pc, #348]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	4b55      	ldr	r3, [pc, #340]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a54      	ldr	r2, [pc, #336]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd fa7a 	bl	8002b70 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fd fa76 	bl	8002b70 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0cb      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ee      	beq.n	8005680 <HAL_RCC_OscConfig+0x334>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fd fa64 	bl	8002b70 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fd fa60 	bl	8002b70 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0b5      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c2:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ee      	bne.n	80056ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a38      	ldr	r2, [pc, #224]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a1 	beq.w	800582c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d05c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d141      	bne.n	8005782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd fa34 	bl	8002b70 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fa30 	bl	8002b70 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e087      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	491b      	ldr	r1, [pc, #108]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575a:	f7fd fa09 	bl	8002b70 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005762:	f7fd fa05 	bl	8002b70 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e05c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x416>
 8005780:	e054      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fd f9f2 	bl	8002b70 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005790:	f7fd f9ee 	bl	8002b70 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e045      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCC_OscConfig+0x470>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x444>
 80057ae:	e03d      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e038      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40007000 	.word	0x40007000
 80057c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <HAL_RCC_OscConfig+0x4ec>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d028      	beq.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d121      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11a      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005800:	4293      	cmp	r3, r2
 8005802:	d111      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	3b01      	subs	r3, #1
 8005812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800

0800583c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0cc      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4b68      	ldr	r3, [pc, #416]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d90c      	bls.n	8005878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b65      	ldr	r3, [pc, #404]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0b8      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005890:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a58      	ldr	r2, [pc, #352]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800589a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a8:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a52      	ldr	r2, [pc, #328]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b50      	ldr	r3, [pc, #320]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	494d      	ldr	r1, [pc, #308]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d044      	beq.n	800595c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d119      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e07f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e06f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e067      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591a:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4934      	ldr	r1, [pc, #208]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800592c:	f7fd f920 	bl	8002b70 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fd f91c 	bl	8002b70 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e04f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d20c      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e032      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4916      	ldr	r1, [pc, #88]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	490e      	ldr	r1, [pc, #56]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059c2:	f000 f821 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490a      	ldr	r1, [pc, #40]	; (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCC_ClockConfig+0x1c8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd f880 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40023c00 	.word	0x40023c00
 80059f8:	40023800 	.word	0x40023800
 80059fc:	08007f3c 	.word	0x08007f3c
 8005a00:	20000000 	.word	0x20000000
 8005a04:	20000070 	.word	0x20000070

08005a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a0c:	b094      	sub	sp, #80	; 0x50
 8005a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
 8005a14:	2300      	movs	r3, #0
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	2300      	movs	r3, #0
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a20:	4b79      	ldr	r3, [pc, #484]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d00d      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x40>
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	f200 80e1 	bhi.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x34>
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a3a:	e0db      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a3c:	4b73      	ldr	r3, [pc, #460]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a40:	e0db      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a42:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a46:	e0d8      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a48:	4b6f      	ldr	r3, [pc, #444]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a52:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d063      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	2200      	movs	r2, #0
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	f04f 0000 	mov.w	r0, #0
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	0159      	lsls	r1, r3, #5
 8005a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a8c:	0150      	lsls	r0, r2, #5
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4621      	mov	r1, r4
 8005a94:	1a51      	subs	r1, r2, r1
 8005a96:	6139      	str	r1, [r7, #16]
 8005a98:	4629      	mov	r1, r5
 8005a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aac:	4659      	mov	r1, fp
 8005aae:	018b      	lsls	r3, r1, #6
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	018a      	lsls	r2, r1, #6
 8005aba:	4651      	mov	r1, sl
 8005abc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ada:	4690      	mov	r8, r2
 8005adc:	4699      	mov	r9, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	eb18 0303 	adds.w	r3, r8, r3
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	eb49 0303 	adc.w	r3, r9, r3
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005afa:	4629      	mov	r1, r5
 8005afc:	024b      	lsls	r3, r1, #9
 8005afe:	4621      	mov	r1, r4
 8005b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b04:	4621      	mov	r1, r4
 8005b06:	024a      	lsls	r2, r1, #9
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0e:	2200      	movs	r2, #0
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b18:	f7fa fbb2 	bl	8000280 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4613      	mov	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	e058      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	4611      	mov	r1, r2
 8005b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b52:	0150      	lsls	r0, r2, #5
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4641      	mov	r1, r8
 8005b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b5e:	4649      	mov	r1, r9
 8005b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b78:	ebb2 040a 	subs.w	r4, r2, sl
 8005b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	00eb      	lsls	r3, r5, #3
 8005b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b8e:	00e2      	lsls	r2, r4, #3
 8005b90:	4614      	mov	r4, r2
 8005b92:	461d      	mov	r5, r3
 8005b94:	4643      	mov	r3, r8
 8005b96:	18e3      	adds	r3, r4, r3
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	eb45 0303 	adc.w	r3, r5, r3
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bae:	4629      	mov	r1, r5
 8005bb0:	028b      	lsls	r3, r1, #10
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bb8:	4621      	mov	r1, r4
 8005bba:	028a      	lsls	r2, r1, #10
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	61fa      	str	r2, [r7, #28]
 8005bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bcc:	f7fa fb58 	bl	8000280 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3750      	adds	r7, #80	; 0x50
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	007a1200 	.word	0x007a1200

08005c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000000 	.word	0x20000000

08005c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c30:	f7ff fff0 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4903      	ldr	r1, [pc, #12]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	08007f4c 	.word	0x08007f4c

08005c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c58:	f7ff ffdc 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	0b5b      	lsrs	r3, r3, #13
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	08007f4c 	.word	0x08007f4c

08005c7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d038      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ca4:	4b68      	ldr	r3, [pc, #416]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005caa:	f7fc ff61 	bl	8002b70 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cb2:	f7fc ff5d 	bl	8002b70 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0bd      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cc4:	4b61      	ldr	r3, [pc, #388]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f0      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	071b      	lsls	r3, r3, #28
 8005ce2:	495a      	ldr	r1, [pc, #360]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cea:	4b57      	ldr	r3, [pc, #348]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf0:	f7fc ff3e 	bl	8002b70 <HAL_GetTick>
 8005cf4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cf8:	f7fc ff3a 	bl	8002b70 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e09a      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d0a:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8083 	beq.w	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	4b48      	ldr	r3, [pc, #288]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	4a47      	ldr	r2, [pc, #284]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d32:	6413      	str	r3, [r2, #64]	; 0x40
 8005d34:	4b45      	ldr	r3, [pc, #276]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d40:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a42      	ldr	r2, [pc, #264]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fc ff10 	bl	8002b70 <HAL_GetTick>
 8005d50:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d54:	f7fc ff0c 	bl	8002b70 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e06c      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d66:	4b3a      	ldr	r3, [pc, #232]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d72:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d02f      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d028      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d90:	4b2e      	ldr	r3, [pc, #184]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d98:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d9a:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005da0:	4b2c      	ldr	r3, [pc, #176]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005da6:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dac:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d114      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fc feda 	bl	8002b70 <HAL_GetTick>
 8005dbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dc0:	f7fc fed6 	bl	8002b70 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e034      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ee      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dee:	d10d      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e04:	4911      	ldr	r1, [pc, #68]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
 8005e0a:	e005      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e16:	6093      	str	r3, [r2, #8]
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7d1a      	ldrb	r2, [r3, #20]
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005e3c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	42470068 	.word	0x42470068
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40007000 	.word	0x40007000
 8005e54:	42470e40 	.word	0x42470e40
 8005e58:	424711e0 	.word	0x424711e0

08005e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d140      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e7a:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d131      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e90:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e92:	617b      	str	r3, [r7, #20]
          break;
 8005e94:	e031      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eae:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e008      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed0:	099b      	lsrs	r3, r3, #6
 8005ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee4:	0f1b      	lsrs	r3, r3, #28
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
          break;
 8005ef2:	e002      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
          break;
 8005ef8:	bf00      	nop
        }
      }
      break;
 8005efa:	bf00      	nop
    }
  }
  return frequency;
 8005efc:	697b      	ldr	r3, [r7, #20]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	00bb8000 	.word	0x00bb8000
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	00f42400 	.word	0x00f42400

08005f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e07b      	b.n	8006026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d108      	bne.n	8005f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d009      	beq.n	8005f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	61da      	str	r2, [r3, #28]
 8005f46:	e005      	b.n	8005f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb fda4 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	ea42 0103 	orr.w	r1, r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	f003 0104 	and.w	r1, r3, #4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	f003 0210 	and.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e03f      	b.n	80060c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fb fe4f 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	; 0x24
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006070:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fdde 	bl	8006c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006086:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006096:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d17c      	bne.n	80061e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_UART_Transmit+0x2c>
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e075      	b.n	80061e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Transmit+0x3e>
 8006102:	2302      	movs	r3, #2
 8006104:	e06e      	b.n	80061e4 <HAL_UART_Transmit+0x11c>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2221      	movs	r2, #33	; 0x21
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800611c:	f7fc fd28 	bl	8002b70 <HAL_GetTick>
 8006120:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	88fa      	ldrh	r2, [r7, #6]
 8006126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d108      	bne.n	800614a <HAL_UART_Transmit+0x82>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e003      	b.n	8006152 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800615a:	e02a      	b.n	80061b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fb1e 	bl	80067a8 <UART_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e036      	b.n	80061e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	3302      	adds	r3, #2
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e007      	b.n	80061a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1cf      	bne.n	800615c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2140      	movs	r1, #64	; 0x40
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 faee 	bl	80067a8 <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e006      	b.n	80061e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b20      	cmp	r3, #32
 8006204:	d11d      	bne.n	8006242 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_UART_Receive_IT+0x26>
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e016      	b.n	8006244 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_UART_Receive_IT+0x38>
 8006220:	2302      	movs	r3, #2
 8006222:	e00f      	b.n	8006244 <HAL_UART_Receive_IT+0x58>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	461a      	mov	r2, r3
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fb23 	bl	8006884 <UART_Start_Receive_IT>
 800623e:	4603      	mov	r3, r0
 8006240:	e000      	b.n	8006244 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b0ba      	sub	sp, #232	; 0xe8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800628a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fc07 	bl	8006abe <UART_Receive_IT>
      return;
 80062b0:	e256      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80de 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80d1 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f043 0202 	orr.w	r2, r3, #2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d011      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f043 0208 	orr.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 81ed 	beq.w	8006756 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
 8006388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb92 	bl	8006abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_UART_IRQHandler+0x17a>
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04f      	beq.n	8006466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa9a 	bl	8006900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d141      	bne.n	800645e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3314      	adds	r3, #20
 8006402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006406:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800640a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800641e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	4a7d      	ldr	r2, [pc, #500]	; (8006628 <HAL_UART_IRQHandler+0x3dc>)
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc fd49 	bl	8002ed2 <HAL_DMA_Abort_IT>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e00e      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f990 	bl	800677c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00a      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f98c 	bl	800677c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e006      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f988 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006472:	e170      	b.n	8006756 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	bf00      	nop
    return;
 8006476:	e16e      	b.n	8006756 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 814a 	bne.w	8006716 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8143 	beq.w	8006716 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 813c 	beq.w	8006716 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	f040 80b4 	bne.w	800662c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8140 	beq.w	800675a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f080 8139 	bcs.w	800675a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fa:	f000 8088 	beq.w	800660e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800652a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006536:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1d9      	bne.n	80064fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3314      	adds	r3, #20
 8006550:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800655a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800656e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006572:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006576:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e3      	bne.n	8006586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80065f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e3      	bne.n	80065cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	4618      	mov	r0, r3
 800660a:	f7fc fbf2 	bl	8002df2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006616:	b29b      	uxth	r3, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	b29b      	uxth	r3, r3
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8b6 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006624:	e099      	b.n	800675a <HAL_UART_IRQHandler+0x50e>
 8006626:	bf00      	nop
 8006628:	080069c7 	.word	0x080069c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006634:	b29b      	uxth	r3, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 808b 	beq.w	800675e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8086 	beq.w	800675e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006676:	647a      	str	r2, [r7, #68]	; 0x44
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800667c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e3      	bne.n	8006652 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	623b      	str	r3, [r7, #32]
   return(result);
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ae:	633a      	str	r2, [r7, #48]	; 0x30
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e3      	bne.n	800668a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0310 	bic.w	r3, r3, #16
 80066e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066f4:	61fa      	str	r2, [r7, #28]
 80066f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	617b      	str	r3, [r7, #20]
   return(result);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e3      	bne.n	80066d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f83e 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006714:	e023      	b.n	800675e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <HAL_UART_IRQHandler+0x4ea>
 8006722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f95d 	bl	80069ee <UART_Transmit_IT>
    return;
 8006734:	e014      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00e      	beq.n	8006760 <HAL_UART_IRQHandler+0x514>
 8006742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f99d 	bl	8006a8e <UART_EndTransmit_IT>
    return;
 8006754:	e004      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
    return;
 8006756:	bf00      	nop
 8006758:	e002      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
      return;
 800675a:	bf00      	nop
 800675c:	e000      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
      return;
 800675e:	bf00      	nop
  }
}
 8006760:	37e8      	adds	r7, #232	; 0xe8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop

08006768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b090      	sub	sp, #64	; 0x40
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b8:	e050      	b.n	800685c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c0:	d04c      	beq.n	800685c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067c8:	f7fc f9d2 	bl	8002b70 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d241      	bcs.n	800685c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067f8:	637a      	str	r2, [r7, #52]	; 0x34
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	613b      	str	r3, [r7, #16]
   return(result);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	63bb      	str	r3, [r7, #56]	; 0x38
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682c:	623a      	str	r2, [r7, #32]
 800682e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69f9      	ldr	r1, [r7, #28]
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	61bb      	str	r3, [r7, #24]
   return(result);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e00f      	b.n	800687c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4013      	ands	r3, r2
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	429a      	cmp	r2, r3
 8006878:	d09f      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3740      	adds	r7, #64	; 0x40
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2222      	movs	r2, #34	; 0x22
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0220 	orr.w	r2, r2, #32
 80068f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b095      	sub	sp, #84	; 0x54
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006928:	643a      	str	r2, [r7, #64]	; 0x40
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	61fb      	str	r3, [r7, #28]
   return(result);
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f023 0301 	bic.w	r3, r3, #1
 8006952:	64bb      	str	r3, [r7, #72]	; 0x48
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e5      	bne.n	800693c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	d119      	bne.n	80069ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	60bb      	str	r3, [r7, #8]
   return(result);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f023 0310 	bic.w	r3, r3, #16
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006998:	61ba      	str	r2, [r7, #24]
 800699a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6979      	ldr	r1, [r7, #20]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	613b      	str	r3, [r7, #16]
   return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e5      	bne.n	8006978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069ba:	bf00      	nop
 80069bc:	3754      	adds	r7, #84	; 0x54
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fecb 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b21      	cmp	r3, #33	; 0x21
 8006a00:	d13e      	bne.n	8006a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d114      	bne.n	8006a36 <UART_Transmit_IT+0x48>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d110      	bne.n	8006a36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]
 8006a34:	e008      	b.n	8006a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6211      	str	r1, [r2, #32]
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4619      	mov	r1, r3
 8006a56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10f      	bne.n	8006a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fe5a 	bl	8006768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08c      	sub	sp, #48	; 0x30
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	f040 80ab 	bne.w	8006c2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d117      	bne.n	8006b0e <UART_Receive_IT+0x50>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d113      	bne.n	8006b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b0c:	e026      	b.n	8006b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b20:	d007      	beq.n	8006b32 <UART_Receive_IT+0x74>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <UART_Receive_IT+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e008      	b.n	8006b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d15a      	bne.n	8006c26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0220 	bic.w	r2, r2, #32
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d135      	bne.n	8006c1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f023 0310 	bic.w	r3, r3, #16
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	623a      	str	r2, [r7, #32]
 8006bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	69f9      	ldr	r1, [r7, #28]
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d10a      	bne.n	8006c0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fdbb 	bl	8006790 <HAL_UARTEx_RxEventCallback>
 8006c1a:	e002      	b.n	8006c22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fa fd83 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e002      	b.n	8006c2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c38:	b0c0      	sub	sp, #256	; 0x100
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	6999      	ldr	r1, [r3, #24]
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	ea40 0301 	orr.w	r3, r0, r1
 8006cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b8f      	ldr	r3, [pc, #572]	; (8006f00 <UART_SetConfig+0x2cc>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d005      	beq.n	8006cd4 <UART_SetConfig+0xa0>
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b8d      	ldr	r3, [pc, #564]	; (8006f04 <UART_SetConfig+0x2d0>)
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d104      	bne.n	8006cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe ffbe 	bl	8005c54 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cdc:	e003      	b.n	8006ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cde:	f7fe ffa5 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8006ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf0:	f040 810c 	bne.w	8006f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	1891      	adds	r1, r2, r2
 8006d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d0e:	415b      	adcs	r3, r3
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d16:	4621      	mov	r1, r4
 8006d18:	eb12 0801 	adds.w	r8, r2, r1
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	eb43 0901 	adc.w	r9, r3, r1
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d36:	4690      	mov	r8, r2
 8006d38:	4699      	mov	r9, r3
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	eb18 0303 	adds.w	r3, r8, r3
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d44:	462b      	mov	r3, r5
 8006d46:	eb49 0303 	adc.w	r3, r9, r3
 8006d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d62:	460b      	mov	r3, r1
 8006d64:	18db      	adds	r3, r3, r3
 8006d66:	653b      	str	r3, [r7, #80]	; 0x50
 8006d68:	4613      	mov	r3, r2
 8006d6a:	eb42 0303 	adc.w	r3, r2, r3
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d78:	f7f9 fa82 	bl	8000280 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2302 	umull	r2, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	011c      	lsls	r4, r3, #4
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006da4:	415b      	adcs	r3, r3
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dac:	4641      	mov	r1, r8
 8006dae:	eb12 0a01 	adds.w	sl, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb43 0b01 	adc.w	fp, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dcc:	4692      	mov	sl, r2
 8006dce:	469b      	mov	fp, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8006dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8006de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	18db      	adds	r3, r3, r3
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dfe:	4613      	mov	r3, r2
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
 8006e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e0e:	f7f9 fa37 	bl	8000280 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2264      	movs	r2, #100	; 0x64
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	1acb      	subs	r3, r1, r3
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e2e:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e30:	fba3 2302 	umull	r2, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e3c:	441c      	add	r4, r3
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e60:	4641      	mov	r1, r8
 8006e62:	1851      	adds	r1, r2, r1
 8006e64:	6339      	str	r1, [r7, #48]	; 0x30
 8006e66:	4649      	mov	r1, r9
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e78:	4659      	mov	r1, fp
 8006e7a:	00cb      	lsls	r3, r1, #3
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e82:	4651      	mov	r1, sl
 8006e84:	00ca      	lsls	r2, r1, #3
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e94:	464b      	mov	r3, r9
 8006e96:	460a      	mov	r2, r1
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	18db      	adds	r3, r3, r3
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eba:	4613      	mov	r3, r2
 8006ebc:	eb42 0303 	adc.w	r3, r2, r3
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006eca:	f7f9 f9d9 	bl	8000280 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 0207 	and.w	r2, r3, #7
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4422      	add	r2, r4
 8006efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006efc:	e105      	b.n	800710a <UART_SetConfig+0x4d6>
 8006efe:	bf00      	nop
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	1891      	adds	r1, r2, r2
 8006f24:	6239      	str	r1, [r7, #32]
 8006f26:	415b      	adcs	r3, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f2e:	4641      	mov	r1, r8
 8006f30:	1854      	adds	r4, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb43 0501 	adc.w	r5, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	00eb      	lsls	r3, r5, #3
 8006f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f46:	00e2      	lsls	r2, r4, #3
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	18e3      	adds	r3, r4, r3
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f54:	464b      	mov	r3, r9
 8006f56:	eb45 0303 	adc.w	r3, r5, r3
 8006f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	008b      	lsls	r3, r1, #2
 8006f7e:	4621      	mov	r1, r4
 8006f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f84:	4621      	mov	r1, r4
 8006f86:	008a      	lsls	r2, r1, #2
 8006f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f8c:	f7f9 f978 	bl	8000280 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4b60      	ldr	r3, [pc, #384]	; (8007118 <UART_SetConfig+0x4e4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	011c      	lsls	r4, r3, #4
 8006f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	61b9      	str	r1, [r7, #24]
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	1851      	adds	r1, r2, r1
 8006fc4:	6139      	str	r1, [r7, #16]
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	414b      	adcs	r3, r1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fd8:	4659      	mov	r1, fp
 8006fda:	00cb      	lsls	r3, r1, #3
 8006fdc:	4651      	mov	r1, sl
 8006fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	00ca      	lsls	r2, r1, #3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	4642      	mov	r2, r8
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff4:	464b      	mov	r3, r9
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	67bb      	str	r3, [r7, #120]	; 0x78
 800700a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007018:	4649      	mov	r1, r9
 800701a:	008b      	lsls	r3, r1, #2
 800701c:	4641      	mov	r1, r8
 800701e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007022:	4641      	mov	r1, r8
 8007024:	008a      	lsls	r2, r1, #2
 8007026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800702a:	f7f9 f929 	bl	8000280 <__aeabi_uldivmod>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4b39      	ldr	r3, [pc, #228]	; (8007118 <UART_SetConfig+0x4e4>)
 8007034:	fba3 1302 	umull	r1, r3, r3, r2
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	2164      	movs	r1, #100	; 0x64
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	3332      	adds	r3, #50	; 0x32
 8007046:	4a34      	ldr	r2, [pc, #208]	; (8007118 <UART_SetConfig+0x4e4>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007052:	441c      	add	r4, r3
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	673b      	str	r3, [r7, #112]	; 0x70
 800705c:	677a      	str	r2, [r7, #116]	; 0x74
 800705e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	1891      	adds	r1, r2, r2
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	415b      	adcs	r3, r3
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007072:	4641      	mov	r1, r8
 8007074:	1851      	adds	r1, r2, r1
 8007076:	6039      	str	r1, [r7, #0]
 8007078:	4649      	mov	r1, r9
 800707a:	414b      	adcs	r3, r1
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800708a:	4659      	mov	r1, fp
 800708c:	00cb      	lsls	r3, r1, #3
 800708e:	4651      	mov	r1, sl
 8007090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007094:	4651      	mov	r1, sl
 8007096:	00ca      	lsls	r2, r1, #3
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	4603      	mov	r3, r0
 800709e:	4642      	mov	r2, r8
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a4:	464b      	mov	r3, r9
 80070a6:	460a      	mov	r2, r1
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	663b      	str	r3, [r7, #96]	; 0x60
 80070b8:	667a      	str	r2, [r7, #100]	; 0x64
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070c6:	4649      	mov	r1, r9
 80070c8:	008b      	lsls	r3, r1, #2
 80070ca:	4641      	mov	r1, r8
 80070cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d0:	4641      	mov	r1, r8
 80070d2:	008a      	lsls	r2, r1, #2
 80070d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070d8:	f7f9 f8d2 	bl	8000280 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <UART_SetConfig+0x4e4>)
 80070e2:	fba3 1302 	umull	r1, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	2164      	movs	r1, #100	; 0x64
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	3332      	adds	r3, #50	; 0x32
 80070f4:	4a08      	ldr	r2, [pc, #32]	; (8007118 <UART_SetConfig+0x4e4>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4422      	add	r2, r4
 8007108:	609a      	str	r2, [r3, #8]
}
 800710a:	bf00      	nop
 800710c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007110:	46bd      	mov	sp, r7
 8007112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007116:	bf00      	nop
 8007118:	51eb851f 	.word	0x51eb851f

0800711c <atoi>:
 800711c:	220a      	movs	r2, #10
 800711e:	2100      	movs	r1, #0
 8007120:	f000 b8d4 	b.w	80072cc <strtol>

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	; (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000078 	.word	0x20000078

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	; (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	; (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	; (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	; (8007174 <__libc_init_array+0x44>)
 8007144:	f000 fd1a 	bl	8007b7c <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	08008090 	.word	0x08008090
 800716c:	08008090 	.word	0x08008090
 8007170:	08008090 	.word	0x08008090
 8007174:	08008094 	.word	0x08008094

08007178 <memset>:
 8007178:	4402      	add	r2, r0
 800717a:	4603      	mov	r3, r0
 800717c:	4293      	cmp	r3, r2
 800717e:	d100      	bne.n	8007182 <memset+0xa>
 8007180:	4770      	bx	lr
 8007182:	f803 1b01 	strb.w	r1, [r3], #1
 8007186:	e7f9      	b.n	800717c <memset+0x4>

08007188 <siprintf>:
 8007188:	b40e      	push	{r1, r2, r3}
 800718a:	b500      	push	{lr}
 800718c:	b09c      	sub	sp, #112	; 0x70
 800718e:	ab1d      	add	r3, sp, #116	; 0x74
 8007190:	9002      	str	r0, [sp, #8]
 8007192:	9006      	str	r0, [sp, #24]
 8007194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007198:	4809      	ldr	r0, [pc, #36]	; (80071c0 <siprintf+0x38>)
 800719a:	9107      	str	r1, [sp, #28]
 800719c:	9104      	str	r1, [sp, #16]
 800719e:	4909      	ldr	r1, [pc, #36]	; (80071c4 <siprintf+0x3c>)
 80071a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a4:	9105      	str	r1, [sp, #20]
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	a902      	add	r1, sp, #8
 80071ac:	f000 f8f4 	bl	8007398 <_svfiprintf_r>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	b01c      	add	sp, #112	; 0x70
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b003      	add	sp, #12
 80071be:	4770      	bx	lr
 80071c0:	20000078 	.word	0x20000078
 80071c4:	ffff0208 	.word	0xffff0208

080071c8 <_strtol_l.constprop.0>:
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ce:	d001      	beq.n	80071d4 <_strtol_l.constprop.0+0xc>
 80071d0:	2b24      	cmp	r3, #36	; 0x24
 80071d2:	d906      	bls.n	80071e2 <_strtol_l.constprop.0+0x1a>
 80071d4:	f7ff ffa6 	bl	8007124 <__errno>
 80071d8:	2316      	movs	r3, #22
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	2000      	movs	r0, #0
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072c8 <_strtol_l.constprop.0+0x100>
 80071e6:	460d      	mov	r5, r1
 80071e8:	462e      	mov	r6, r5
 80071ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80071f2:	f017 0708 	ands.w	r7, r7, #8
 80071f6:	d1f7      	bne.n	80071e8 <_strtol_l.constprop.0+0x20>
 80071f8:	2c2d      	cmp	r4, #45	; 0x2d
 80071fa:	d132      	bne.n	8007262 <_strtol_l.constprop.0+0x9a>
 80071fc:	782c      	ldrb	r4, [r5, #0]
 80071fe:	2701      	movs	r7, #1
 8007200:	1cb5      	adds	r5, r6, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d05b      	beq.n	80072be <_strtol_l.constprop.0+0xf6>
 8007206:	2b10      	cmp	r3, #16
 8007208:	d109      	bne.n	800721e <_strtol_l.constprop.0+0x56>
 800720a:	2c30      	cmp	r4, #48	; 0x30
 800720c:	d107      	bne.n	800721e <_strtol_l.constprop.0+0x56>
 800720e:	782c      	ldrb	r4, [r5, #0]
 8007210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007214:	2c58      	cmp	r4, #88	; 0x58
 8007216:	d14d      	bne.n	80072b4 <_strtol_l.constprop.0+0xec>
 8007218:	786c      	ldrb	r4, [r5, #1]
 800721a:	2310      	movs	r3, #16
 800721c:	3502      	adds	r5, #2
 800721e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007222:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007226:	f04f 0c00 	mov.w	ip, #0
 800722a:	fbb8 f9f3 	udiv	r9, r8, r3
 800722e:	4666      	mov	r6, ip
 8007230:	fb03 8a19 	mls	sl, r3, r9, r8
 8007234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007238:	f1be 0f09 	cmp.w	lr, #9
 800723c:	d816      	bhi.n	800726c <_strtol_l.constprop.0+0xa4>
 800723e:	4674      	mov	r4, lr
 8007240:	42a3      	cmp	r3, r4
 8007242:	dd24      	ble.n	800728e <_strtol_l.constprop.0+0xc6>
 8007244:	f1bc 0f00 	cmp.w	ip, #0
 8007248:	db1e      	blt.n	8007288 <_strtol_l.constprop.0+0xc0>
 800724a:	45b1      	cmp	r9, r6
 800724c:	d31c      	bcc.n	8007288 <_strtol_l.constprop.0+0xc0>
 800724e:	d101      	bne.n	8007254 <_strtol_l.constprop.0+0x8c>
 8007250:	45a2      	cmp	sl, r4
 8007252:	db19      	blt.n	8007288 <_strtol_l.constprop.0+0xc0>
 8007254:	fb06 4603 	mla	r6, r6, r3, r4
 8007258:	f04f 0c01 	mov.w	ip, #1
 800725c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007260:	e7e8      	b.n	8007234 <_strtol_l.constprop.0+0x6c>
 8007262:	2c2b      	cmp	r4, #43	; 0x2b
 8007264:	bf04      	itt	eq
 8007266:	782c      	ldrbeq	r4, [r5, #0]
 8007268:	1cb5      	addeq	r5, r6, #2
 800726a:	e7ca      	b.n	8007202 <_strtol_l.constprop.0+0x3a>
 800726c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007270:	f1be 0f19 	cmp.w	lr, #25
 8007274:	d801      	bhi.n	800727a <_strtol_l.constprop.0+0xb2>
 8007276:	3c37      	subs	r4, #55	; 0x37
 8007278:	e7e2      	b.n	8007240 <_strtol_l.constprop.0+0x78>
 800727a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800727e:	f1be 0f19 	cmp.w	lr, #25
 8007282:	d804      	bhi.n	800728e <_strtol_l.constprop.0+0xc6>
 8007284:	3c57      	subs	r4, #87	; 0x57
 8007286:	e7db      	b.n	8007240 <_strtol_l.constprop.0+0x78>
 8007288:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800728c:	e7e6      	b.n	800725c <_strtol_l.constprop.0+0x94>
 800728e:	f1bc 0f00 	cmp.w	ip, #0
 8007292:	da05      	bge.n	80072a0 <_strtol_l.constprop.0+0xd8>
 8007294:	2322      	movs	r3, #34	; 0x22
 8007296:	6003      	str	r3, [r0, #0]
 8007298:	4646      	mov	r6, r8
 800729a:	b942      	cbnz	r2, 80072ae <_strtol_l.constprop.0+0xe6>
 800729c:	4630      	mov	r0, r6
 800729e:	e79e      	b.n	80071de <_strtol_l.constprop.0+0x16>
 80072a0:	b107      	cbz	r7, 80072a4 <_strtol_l.constprop.0+0xdc>
 80072a2:	4276      	negs	r6, r6
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d0f9      	beq.n	800729c <_strtol_l.constprop.0+0xd4>
 80072a8:	f1bc 0f00 	cmp.w	ip, #0
 80072ac:	d000      	beq.n	80072b0 <_strtol_l.constprop.0+0xe8>
 80072ae:	1e69      	subs	r1, r5, #1
 80072b0:	6011      	str	r1, [r2, #0]
 80072b2:	e7f3      	b.n	800729c <_strtol_l.constprop.0+0xd4>
 80072b4:	2430      	movs	r4, #48	; 0x30
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1b1      	bne.n	800721e <_strtol_l.constprop.0+0x56>
 80072ba:	2308      	movs	r3, #8
 80072bc:	e7af      	b.n	800721e <_strtol_l.constprop.0+0x56>
 80072be:	2c30      	cmp	r4, #48	; 0x30
 80072c0:	d0a5      	beq.n	800720e <_strtol_l.constprop.0+0x46>
 80072c2:	230a      	movs	r3, #10
 80072c4:	e7ab      	b.n	800721e <_strtol_l.constprop.0+0x56>
 80072c6:	bf00      	nop
 80072c8:	08007f55 	.word	0x08007f55

080072cc <strtol>:
 80072cc:	4613      	mov	r3, r2
 80072ce:	460a      	mov	r2, r1
 80072d0:	4601      	mov	r1, r0
 80072d2:	4802      	ldr	r0, [pc, #8]	; (80072dc <strtol+0x10>)
 80072d4:	6800      	ldr	r0, [r0, #0]
 80072d6:	f7ff bf77 	b.w	80071c8 <_strtol_l.constprop.0>
 80072da:	bf00      	nop
 80072dc:	20000078 	.word	0x20000078

080072e0 <__ssputs_r>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	688e      	ldr	r6, [r1, #8]
 80072e6:	429e      	cmp	r6, r3
 80072e8:	4682      	mov	sl, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	4690      	mov	r8, r2
 80072ee:	461f      	mov	r7, r3
 80072f0:	d838      	bhi.n	8007364 <__ssputs_r+0x84>
 80072f2:	898a      	ldrh	r2, [r1, #12]
 80072f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072f8:	d032      	beq.n	8007360 <__ssputs_r+0x80>
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	6909      	ldr	r1, [r1, #16]
 80072fe:	eba5 0901 	sub.w	r9, r5, r1
 8007302:	6965      	ldr	r5, [r4, #20]
 8007304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800730c:	3301      	adds	r3, #1
 800730e:	444b      	add	r3, r9
 8007310:	106d      	asrs	r5, r5, #1
 8007312:	429d      	cmp	r5, r3
 8007314:	bf38      	it	cc
 8007316:	461d      	movcc	r5, r3
 8007318:	0553      	lsls	r3, r2, #21
 800731a:	d531      	bpl.n	8007380 <__ssputs_r+0xa0>
 800731c:	4629      	mov	r1, r5
 800731e:	f000 fb63 	bl	80079e8 <_malloc_r>
 8007322:	4606      	mov	r6, r0
 8007324:	b950      	cbnz	r0, 800733c <__ssputs_r+0x5c>
 8007326:	230c      	movs	r3, #12
 8007328:	f8ca 3000 	str.w	r3, [sl]
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	464a      	mov	r2, r9
 8007340:	f000 fabe 	bl	80078c0 <memcpy>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	6126      	str	r6, [r4, #16]
 8007352:	6165      	str	r5, [r4, #20]
 8007354:	444e      	add	r6, r9
 8007356:	eba5 0509 	sub.w	r5, r5, r9
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	463e      	mov	r6, r7
 8007360:	42be      	cmp	r6, r7
 8007362:	d900      	bls.n	8007366 <__ssputs_r+0x86>
 8007364:	463e      	mov	r6, r7
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	4632      	mov	r2, r6
 800736a:	4641      	mov	r1, r8
 800736c:	f000 fab6 	bl	80078dc <memmove>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4433      	add	r3, r6
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e7db      	b.n	8007338 <__ssputs_r+0x58>
 8007380:	462a      	mov	r2, r5
 8007382:	f000 fba5 	bl	8007ad0 <_realloc_r>
 8007386:	4606      	mov	r6, r0
 8007388:	2800      	cmp	r0, #0
 800738a:	d1e1      	bne.n	8007350 <__ssputs_r+0x70>
 800738c:	6921      	ldr	r1, [r4, #16]
 800738e:	4650      	mov	r0, sl
 8007390:	f000 fabe 	bl	8007910 <_free_r>
 8007394:	e7c7      	b.n	8007326 <__ssputs_r+0x46>
	...

08007398 <_svfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	4698      	mov	r8, r3
 800739e:	898b      	ldrh	r3, [r1, #12]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4607      	mov	r7, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	d50e      	bpl.n	80073ca <_svfiprintf_r+0x32>
 80073ac:	690b      	ldr	r3, [r1, #16]
 80073ae:	b963      	cbnz	r3, 80073ca <_svfiprintf_r+0x32>
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	f000 fb19 	bl	80079e8 <_malloc_r>
 80073b6:	6028      	str	r0, [r5, #0]
 80073b8:	6128      	str	r0, [r5, #16]
 80073ba:	b920      	cbnz	r0, 80073c6 <_svfiprintf_r+0x2e>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c4:	e0d1      	b.n	800756a <_svfiprintf_r+0x1d2>
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	616b      	str	r3, [r5, #20]
 80073ca:	2300      	movs	r3, #0
 80073cc:	9309      	str	r3, [sp, #36]	; 0x24
 80073ce:	2320      	movs	r3, #32
 80073d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d8:	2330      	movs	r3, #48	; 0x30
 80073da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007584 <_svfiprintf_r+0x1ec>
 80073de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073e2:	f04f 0901 	mov.w	r9, #1
 80073e6:	4623      	mov	r3, r4
 80073e8:	469a      	mov	sl, r3
 80073ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ee:	b10a      	cbz	r2, 80073f4 <_svfiprintf_r+0x5c>
 80073f0:	2a25      	cmp	r2, #37	; 0x25
 80073f2:	d1f9      	bne.n	80073e8 <_svfiprintf_r+0x50>
 80073f4:	ebba 0b04 	subs.w	fp, sl, r4
 80073f8:	d00b      	beq.n	8007412 <_svfiprintf_r+0x7a>
 80073fa:	465b      	mov	r3, fp
 80073fc:	4622      	mov	r2, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff ff6d 	bl	80072e0 <__ssputs_r>
 8007406:	3001      	adds	r0, #1
 8007408:	f000 80aa 	beq.w	8007560 <_svfiprintf_r+0x1c8>
 800740c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800740e:	445a      	add	r2, fp
 8007410:	9209      	str	r2, [sp, #36]	; 0x24
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80a2 	beq.w	8007560 <_svfiprintf_r+0x1c8>
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007426:	f10a 0a01 	add.w	sl, sl, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007432:	931a      	str	r3, [sp, #104]	; 0x68
 8007434:	4654      	mov	r4, sl
 8007436:	2205      	movs	r2, #5
 8007438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743c:	4851      	ldr	r0, [pc, #324]	; (8007584 <_svfiprintf_r+0x1ec>)
 800743e:	f7f8 fecf 	bl	80001e0 <memchr>
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	b9d8      	cbnz	r0, 800747e <_svfiprintf_r+0xe6>
 8007446:	06d0      	lsls	r0, r2, #27
 8007448:	bf44      	itt	mi
 800744a:	2320      	movmi	r3, #32
 800744c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007450:	0711      	lsls	r1, r2, #28
 8007452:	bf44      	itt	mi
 8007454:	232b      	movmi	r3, #43	; 0x2b
 8007456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800745a:	f89a 3000 	ldrb.w	r3, [sl]
 800745e:	2b2a      	cmp	r3, #42	; 0x2a
 8007460:	d015      	beq.n	800748e <_svfiprintf_r+0xf6>
 8007462:	9a07      	ldr	r2, [sp, #28]
 8007464:	4654      	mov	r4, sl
 8007466:	2000      	movs	r0, #0
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	4621      	mov	r1, r4
 800746e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007472:	3b30      	subs	r3, #48	; 0x30
 8007474:	2b09      	cmp	r3, #9
 8007476:	d94e      	bls.n	8007516 <_svfiprintf_r+0x17e>
 8007478:	b1b0      	cbz	r0, 80074a8 <_svfiprintf_r+0x110>
 800747a:	9207      	str	r2, [sp, #28]
 800747c:	e014      	b.n	80074a8 <_svfiprintf_r+0x110>
 800747e:	eba0 0308 	sub.w	r3, r0, r8
 8007482:	fa09 f303 	lsl.w	r3, r9, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	46a2      	mov	sl, r4
 800748c:	e7d2      	b.n	8007434 <_svfiprintf_r+0x9c>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	1d19      	adds	r1, r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9103      	str	r1, [sp, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfbb      	ittet	lt
 800749a:	425b      	neglt	r3, r3
 800749c:	f042 0202 	orrlt.w	r2, r2, #2
 80074a0:	9307      	strge	r3, [sp, #28]
 80074a2:	9307      	strlt	r3, [sp, #28]
 80074a4:	bfb8      	it	lt
 80074a6:	9204      	strlt	r2, [sp, #16]
 80074a8:	7823      	ldrb	r3, [r4, #0]
 80074aa:	2b2e      	cmp	r3, #46	; 0x2e
 80074ac:	d10c      	bne.n	80074c8 <_svfiprintf_r+0x130>
 80074ae:	7863      	ldrb	r3, [r4, #1]
 80074b0:	2b2a      	cmp	r3, #42	; 0x2a
 80074b2:	d135      	bne.n	8007520 <_svfiprintf_r+0x188>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	9203      	str	r2, [sp, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfb8      	it	lt
 80074c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074c4:	3402      	adds	r4, #2
 80074c6:	9305      	str	r3, [sp, #20]
 80074c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007594 <_svfiprintf_r+0x1fc>
 80074cc:	7821      	ldrb	r1, [r4, #0]
 80074ce:	2203      	movs	r2, #3
 80074d0:	4650      	mov	r0, sl
 80074d2:	f7f8 fe85 	bl	80001e0 <memchr>
 80074d6:	b140      	cbz	r0, 80074ea <_svfiprintf_r+0x152>
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	eba0 000a 	sub.w	r0, r0, sl
 80074de:	fa03 f000 	lsl.w	r0, r3, r0
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	4303      	orrs	r3, r0
 80074e6:	3401      	adds	r4, #1
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ee:	4826      	ldr	r0, [pc, #152]	; (8007588 <_svfiprintf_r+0x1f0>)
 80074f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074f4:	2206      	movs	r2, #6
 80074f6:	f7f8 fe73 	bl	80001e0 <memchr>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d038      	beq.n	8007570 <_svfiprintf_r+0x1d8>
 80074fe:	4b23      	ldr	r3, [pc, #140]	; (800758c <_svfiprintf_r+0x1f4>)
 8007500:	bb1b      	cbnz	r3, 800754a <_svfiprintf_r+0x1b2>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	3307      	adds	r3, #7
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	3308      	adds	r3, #8
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	4433      	add	r3, r6
 8007512:	9309      	str	r3, [sp, #36]	; 0x24
 8007514:	e767      	b.n	80073e6 <_svfiprintf_r+0x4e>
 8007516:	fb0c 3202 	mla	r2, ip, r2, r3
 800751a:	460c      	mov	r4, r1
 800751c:	2001      	movs	r0, #1
 800751e:	e7a5      	b.n	800746c <_svfiprintf_r+0xd4>
 8007520:	2300      	movs	r3, #0
 8007522:	3401      	adds	r4, #1
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4619      	mov	r1, r3
 8007528:	f04f 0c0a 	mov.w	ip, #10
 800752c:	4620      	mov	r0, r4
 800752e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007532:	3a30      	subs	r2, #48	; 0x30
 8007534:	2a09      	cmp	r2, #9
 8007536:	d903      	bls.n	8007540 <_svfiprintf_r+0x1a8>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0c5      	beq.n	80074c8 <_svfiprintf_r+0x130>
 800753c:	9105      	str	r1, [sp, #20]
 800753e:	e7c3      	b.n	80074c8 <_svfiprintf_r+0x130>
 8007540:	fb0c 2101 	mla	r1, ip, r1, r2
 8007544:	4604      	mov	r4, r0
 8007546:	2301      	movs	r3, #1
 8007548:	e7f0      	b.n	800752c <_svfiprintf_r+0x194>
 800754a:	ab03      	add	r3, sp, #12
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	462a      	mov	r2, r5
 8007550:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <_svfiprintf_r+0x1f8>)
 8007552:	a904      	add	r1, sp, #16
 8007554:	4638      	mov	r0, r7
 8007556:	f3af 8000 	nop.w
 800755a:	1c42      	adds	r2, r0, #1
 800755c:	4606      	mov	r6, r0
 800755e:	d1d6      	bne.n	800750e <_svfiprintf_r+0x176>
 8007560:	89ab      	ldrh	r3, [r5, #12]
 8007562:	065b      	lsls	r3, r3, #25
 8007564:	f53f af2c 	bmi.w	80073c0 <_svfiprintf_r+0x28>
 8007568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756a:	b01d      	add	sp, #116	; 0x74
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	ab03      	add	r3, sp, #12
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	462a      	mov	r2, r5
 8007576:	4b06      	ldr	r3, [pc, #24]	; (8007590 <_svfiprintf_r+0x1f8>)
 8007578:	a904      	add	r1, sp, #16
 800757a:	4638      	mov	r0, r7
 800757c:	f000 f87a 	bl	8007674 <_printf_i>
 8007580:	e7eb      	b.n	800755a <_svfiprintf_r+0x1c2>
 8007582:	bf00      	nop
 8007584:	08008055 	.word	0x08008055
 8007588:	0800805f 	.word	0x0800805f
 800758c:	00000000 	.word	0x00000000
 8007590:	080072e1 	.word	0x080072e1
 8007594:	0800805b 	.word	0x0800805b

08007598 <_printf_common>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	4616      	mov	r6, r2
 800759e:	4699      	mov	r9, r3
 80075a0:	688a      	ldr	r2, [r1, #8]
 80075a2:	690b      	ldr	r3, [r1, #16]
 80075a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bfb8      	it	lt
 80075ac:	4613      	movlt	r3, r2
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b4:	4607      	mov	r7, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	b10a      	cbz	r2, 80075be <_printf_common+0x26>
 80075ba:	3301      	adds	r3, #1
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	0699      	lsls	r1, r3, #26
 80075c2:	bf42      	ittt	mi
 80075c4:	6833      	ldrmi	r3, [r6, #0]
 80075c6:	3302      	addmi	r3, #2
 80075c8:	6033      	strmi	r3, [r6, #0]
 80075ca:	6825      	ldr	r5, [r4, #0]
 80075cc:	f015 0506 	ands.w	r5, r5, #6
 80075d0:	d106      	bne.n	80075e0 <_printf_common+0x48>
 80075d2:	f104 0a19 	add.w	sl, r4, #25
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	6832      	ldr	r2, [r6, #0]
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc26      	bgt.n	800762e <_printf_common+0x96>
 80075e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e4:	1e13      	subs	r3, r2, #0
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	bf18      	it	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	0692      	lsls	r2, r2, #26
 80075ee:	d42b      	bmi.n	8007648 <_printf_common+0xb0>
 80075f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d01e      	beq.n	800763c <_printf_common+0xa4>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	68e5      	ldr	r5, [r4, #12]
 8007602:	6832      	ldr	r2, [r6, #0]
 8007604:	f003 0306 	and.w	r3, r3, #6
 8007608:	2b04      	cmp	r3, #4
 800760a:	bf08      	it	eq
 800760c:	1aad      	subeq	r5, r5, r2
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	bf0c      	ite	eq
 8007614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007618:	2500      	movne	r5, #0
 800761a:	4293      	cmp	r3, r2
 800761c:	bfc4      	itt	gt
 800761e:	1a9b      	subgt	r3, r3, r2
 8007620:	18ed      	addgt	r5, r5, r3
 8007622:	2600      	movs	r6, #0
 8007624:	341a      	adds	r4, #26
 8007626:	42b5      	cmp	r5, r6
 8007628:	d11a      	bne.n	8007660 <_printf_common+0xc8>
 800762a:	2000      	movs	r0, #0
 800762c:	e008      	b.n	8007640 <_printf_common+0xa8>
 800762e:	2301      	movs	r3, #1
 8007630:	4652      	mov	r2, sl
 8007632:	4649      	mov	r1, r9
 8007634:	4638      	mov	r0, r7
 8007636:	47c0      	blx	r8
 8007638:	3001      	adds	r0, #1
 800763a:	d103      	bne.n	8007644 <_printf_common+0xac>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	3501      	adds	r5, #1
 8007646:	e7c6      	b.n	80075d6 <_printf_common+0x3e>
 8007648:	18e1      	adds	r1, r4, r3
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	2030      	movs	r0, #48	; 0x30
 800764e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007652:	4422      	add	r2, r4
 8007654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800765c:	3302      	adds	r3, #2
 800765e:	e7c7      	b.n	80075f0 <_printf_common+0x58>
 8007660:	2301      	movs	r3, #1
 8007662:	4622      	mov	r2, r4
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	3001      	adds	r0, #1
 800766c:	d0e6      	beq.n	800763c <_printf_common+0xa4>
 800766e:	3601      	adds	r6, #1
 8007670:	e7d9      	b.n	8007626 <_printf_common+0x8e>
	...

08007674 <_printf_i>:
 8007674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	7e0f      	ldrb	r7, [r1, #24]
 800767a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800767c:	2f78      	cmp	r7, #120	; 0x78
 800767e:	4691      	mov	r9, r2
 8007680:	4680      	mov	r8, r0
 8007682:	460c      	mov	r4, r1
 8007684:	469a      	mov	sl, r3
 8007686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800768a:	d807      	bhi.n	800769c <_printf_i+0x28>
 800768c:	2f62      	cmp	r7, #98	; 0x62
 800768e:	d80a      	bhi.n	80076a6 <_printf_i+0x32>
 8007690:	2f00      	cmp	r7, #0
 8007692:	f000 80d8 	beq.w	8007846 <_printf_i+0x1d2>
 8007696:	2f58      	cmp	r7, #88	; 0x58
 8007698:	f000 80a3 	beq.w	80077e2 <_printf_i+0x16e>
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a4:	e03a      	b.n	800771c <_printf_i+0xa8>
 80076a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076aa:	2b15      	cmp	r3, #21
 80076ac:	d8f6      	bhi.n	800769c <_printf_i+0x28>
 80076ae:	a101      	add	r1, pc, #4	; (adr r1, 80076b4 <_printf_i+0x40>)
 80076b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	08007721 	.word	0x08007721
 80076bc:	0800769d 	.word	0x0800769d
 80076c0:	0800769d 	.word	0x0800769d
 80076c4:	0800769d 	.word	0x0800769d
 80076c8:	0800769d 	.word	0x0800769d
 80076cc:	08007721 	.word	0x08007721
 80076d0:	0800769d 	.word	0x0800769d
 80076d4:	0800769d 	.word	0x0800769d
 80076d8:	0800769d 	.word	0x0800769d
 80076dc:	0800769d 	.word	0x0800769d
 80076e0:	0800782d 	.word	0x0800782d
 80076e4:	08007751 	.word	0x08007751
 80076e8:	0800780f 	.word	0x0800780f
 80076ec:	0800769d 	.word	0x0800769d
 80076f0:	0800769d 	.word	0x0800769d
 80076f4:	0800784f 	.word	0x0800784f
 80076f8:	0800769d 	.word	0x0800769d
 80076fc:	08007751 	.word	0x08007751
 8007700:	0800769d 	.word	0x0800769d
 8007704:	0800769d 	.word	0x0800769d
 8007708:	08007817 	.word	0x08007817
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	602a      	str	r2, [r5, #0]
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800771c:	2301      	movs	r3, #1
 800771e:	e0a3      	b.n	8007868 <_printf_i+0x1f4>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	6829      	ldr	r1, [r5, #0]
 8007724:	0606      	lsls	r6, r0, #24
 8007726:	f101 0304 	add.w	r3, r1, #4
 800772a:	d50a      	bpl.n	8007742 <_printf_i+0xce>
 800772c:	680e      	ldr	r6, [r1, #0]
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	2e00      	cmp	r6, #0
 8007732:	da03      	bge.n	800773c <_printf_i+0xc8>
 8007734:	232d      	movs	r3, #45	; 0x2d
 8007736:	4276      	negs	r6, r6
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800773c:	485e      	ldr	r0, [pc, #376]	; (80078b8 <_printf_i+0x244>)
 800773e:	230a      	movs	r3, #10
 8007740:	e019      	b.n	8007776 <_printf_i+0x102>
 8007742:	680e      	ldr	r6, [r1, #0]
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800774a:	bf18      	it	ne
 800774c:	b236      	sxthne	r6, r6
 800774e:	e7ef      	b.n	8007730 <_printf_i+0xbc>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	6029      	str	r1, [r5, #0]
 8007758:	0601      	lsls	r1, r0, #24
 800775a:	d501      	bpl.n	8007760 <_printf_i+0xec>
 800775c:	681e      	ldr	r6, [r3, #0]
 800775e:	e002      	b.n	8007766 <_printf_i+0xf2>
 8007760:	0646      	lsls	r6, r0, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0xe8>
 8007764:	881e      	ldrh	r6, [r3, #0]
 8007766:	4854      	ldr	r0, [pc, #336]	; (80078b8 <_printf_i+0x244>)
 8007768:	2f6f      	cmp	r7, #111	; 0x6f
 800776a:	bf0c      	ite	eq
 800776c:	2308      	moveq	r3, #8
 800776e:	230a      	movne	r3, #10
 8007770:	2100      	movs	r1, #0
 8007772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007776:	6865      	ldr	r5, [r4, #4]
 8007778:	60a5      	str	r5, [r4, #8]
 800777a:	2d00      	cmp	r5, #0
 800777c:	bfa2      	ittt	ge
 800777e:	6821      	ldrge	r1, [r4, #0]
 8007780:	f021 0104 	bicge.w	r1, r1, #4
 8007784:	6021      	strge	r1, [r4, #0]
 8007786:	b90e      	cbnz	r6, 800778c <_printf_i+0x118>
 8007788:	2d00      	cmp	r5, #0
 800778a:	d04d      	beq.n	8007828 <_printf_i+0x1b4>
 800778c:	4615      	mov	r5, r2
 800778e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007792:	fb03 6711 	mls	r7, r3, r1, r6
 8007796:	5dc7      	ldrb	r7, [r0, r7]
 8007798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800779c:	4637      	mov	r7, r6
 800779e:	42bb      	cmp	r3, r7
 80077a0:	460e      	mov	r6, r1
 80077a2:	d9f4      	bls.n	800778e <_printf_i+0x11a>
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d10b      	bne.n	80077c0 <_printf_i+0x14c>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	07de      	lsls	r6, r3, #31
 80077ac:	d508      	bpl.n	80077c0 <_printf_i+0x14c>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	4299      	cmp	r1, r3
 80077b4:	bfde      	ittt	le
 80077b6:	2330      	movle	r3, #48	; 0x30
 80077b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077c0:	1b52      	subs	r2, r2, r5
 80077c2:	6122      	str	r2, [r4, #16]
 80077c4:	f8cd a000 	str.w	sl, [sp]
 80077c8:	464b      	mov	r3, r9
 80077ca:	aa03      	add	r2, sp, #12
 80077cc:	4621      	mov	r1, r4
 80077ce:	4640      	mov	r0, r8
 80077d0:	f7ff fee2 	bl	8007598 <_printf_common>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d14c      	bne.n	8007872 <_printf_i+0x1fe>
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077dc:	b004      	add	sp, #16
 80077de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e2:	4835      	ldr	r0, [pc, #212]	; (80078b8 <_printf_i+0x244>)
 80077e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077e8:	6829      	ldr	r1, [r5, #0]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80077f0:	6029      	str	r1, [r5, #0]
 80077f2:	061d      	lsls	r5, r3, #24
 80077f4:	d514      	bpl.n	8007820 <_printf_i+0x1ac>
 80077f6:	07df      	lsls	r7, r3, #31
 80077f8:	bf44      	itt	mi
 80077fa:	f043 0320 	orrmi.w	r3, r3, #32
 80077fe:	6023      	strmi	r3, [r4, #0]
 8007800:	b91e      	cbnz	r6, 800780a <_printf_i+0x196>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	f023 0320 	bic.w	r3, r3, #32
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	2310      	movs	r3, #16
 800780c:	e7b0      	b.n	8007770 <_printf_i+0xfc>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f043 0320 	orr.w	r3, r3, #32
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	2378      	movs	r3, #120	; 0x78
 8007818:	4828      	ldr	r0, [pc, #160]	; (80078bc <_printf_i+0x248>)
 800781a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800781e:	e7e3      	b.n	80077e8 <_printf_i+0x174>
 8007820:	0659      	lsls	r1, r3, #25
 8007822:	bf48      	it	mi
 8007824:	b2b6      	uxthmi	r6, r6
 8007826:	e7e6      	b.n	80077f6 <_printf_i+0x182>
 8007828:	4615      	mov	r5, r2
 800782a:	e7bb      	b.n	80077a4 <_printf_i+0x130>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6826      	ldr	r6, [r4, #0]
 8007830:	6961      	ldr	r1, [r4, #20]
 8007832:	1d18      	adds	r0, r3, #4
 8007834:	6028      	str	r0, [r5, #0]
 8007836:	0635      	lsls	r5, r6, #24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	d501      	bpl.n	8007840 <_printf_i+0x1cc>
 800783c:	6019      	str	r1, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0x1d2>
 8007840:	0670      	lsls	r0, r6, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0x1c8>
 8007844:	8019      	strh	r1, [r3, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	4615      	mov	r5, r2
 800784c:	e7ba      	b.n	80077c4 <_printf_i+0x150>
 800784e:	682b      	ldr	r3, [r5, #0]
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	602a      	str	r2, [r5, #0]
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	6862      	ldr	r2, [r4, #4]
 8007858:	2100      	movs	r1, #0
 800785a:	4628      	mov	r0, r5
 800785c:	f7f8 fcc0 	bl	80001e0 <memchr>
 8007860:	b108      	cbz	r0, 8007866 <_printf_i+0x1f2>
 8007862:	1b40      	subs	r0, r0, r5
 8007864:	6060      	str	r0, [r4, #4]
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	2300      	movs	r3, #0
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007870:	e7a8      	b.n	80077c4 <_printf_i+0x150>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	462a      	mov	r2, r5
 8007876:	4649      	mov	r1, r9
 8007878:	4640      	mov	r0, r8
 800787a:	47d0      	blx	sl
 800787c:	3001      	adds	r0, #1
 800787e:	d0ab      	beq.n	80077d8 <_printf_i+0x164>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	079b      	lsls	r3, r3, #30
 8007884:	d413      	bmi.n	80078ae <_printf_i+0x23a>
 8007886:	68e0      	ldr	r0, [r4, #12]
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	4298      	cmp	r0, r3
 800788c:	bfb8      	it	lt
 800788e:	4618      	movlt	r0, r3
 8007890:	e7a4      	b.n	80077dc <_printf_i+0x168>
 8007892:	2301      	movs	r3, #1
 8007894:	4632      	mov	r2, r6
 8007896:	4649      	mov	r1, r9
 8007898:	4640      	mov	r0, r8
 800789a:	47d0      	blx	sl
 800789c:	3001      	adds	r0, #1
 800789e:	d09b      	beq.n	80077d8 <_printf_i+0x164>
 80078a0:	3501      	adds	r5, #1
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	9903      	ldr	r1, [sp, #12]
 80078a6:	1a5b      	subs	r3, r3, r1
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dcf2      	bgt.n	8007892 <_printf_i+0x21e>
 80078ac:	e7eb      	b.n	8007886 <_printf_i+0x212>
 80078ae:	2500      	movs	r5, #0
 80078b0:	f104 0619 	add.w	r6, r4, #25
 80078b4:	e7f5      	b.n	80078a2 <_printf_i+0x22e>
 80078b6:	bf00      	nop
 80078b8:	08008066 	.word	0x08008066
 80078bc:	08008077 	.word	0x08008077

080078c0 <memcpy>:
 80078c0:	440a      	add	r2, r1
 80078c2:	4291      	cmp	r1, r2
 80078c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	4770      	bx	lr
 80078cc:	b510      	push	{r4, lr}
 80078ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d6:	4291      	cmp	r1, r2
 80078d8:	d1f9      	bne.n	80078ce <memcpy+0xe>
 80078da:	bd10      	pop	{r4, pc}

080078dc <memmove>:
 80078dc:	4288      	cmp	r0, r1
 80078de:	b510      	push	{r4, lr}
 80078e0:	eb01 0402 	add.w	r4, r1, r2
 80078e4:	d902      	bls.n	80078ec <memmove+0x10>
 80078e6:	4284      	cmp	r4, r0
 80078e8:	4623      	mov	r3, r4
 80078ea:	d807      	bhi.n	80078fc <memmove+0x20>
 80078ec:	1e43      	subs	r3, r0, #1
 80078ee:	42a1      	cmp	r1, r4
 80078f0:	d008      	beq.n	8007904 <memmove+0x28>
 80078f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078fa:	e7f8      	b.n	80078ee <memmove+0x12>
 80078fc:	4402      	add	r2, r0
 80078fe:	4601      	mov	r1, r0
 8007900:	428a      	cmp	r2, r1
 8007902:	d100      	bne.n	8007906 <memmove+0x2a>
 8007904:	bd10      	pop	{r4, pc}
 8007906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800790e:	e7f7      	b.n	8007900 <memmove+0x24>

08007910 <_free_r>:
 8007910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007912:	2900      	cmp	r1, #0
 8007914:	d044      	beq.n	80079a0 <_free_r+0x90>
 8007916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f1a1 0404 	sub.w	r4, r1, #4
 8007922:	bfb8      	it	lt
 8007924:	18e4      	addlt	r4, r4, r3
 8007926:	f000 f913 	bl	8007b50 <__malloc_lock>
 800792a:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <_free_r+0x94>)
 800792c:	9801      	ldr	r0, [sp, #4]
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	b933      	cbnz	r3, 8007940 <_free_r+0x30>
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	6014      	str	r4, [r2, #0]
 8007936:	b003      	add	sp, #12
 8007938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800793c:	f000 b90e 	b.w	8007b5c <__malloc_unlock>
 8007940:	42a3      	cmp	r3, r4
 8007942:	d908      	bls.n	8007956 <_free_r+0x46>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	1961      	adds	r1, r4, r5
 8007948:	428b      	cmp	r3, r1
 800794a:	bf01      	itttt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	1949      	addeq	r1, r1, r5
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	e7ed      	b.n	8007932 <_free_r+0x22>
 8007956:	461a      	mov	r2, r3
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	b10b      	cbz	r3, 8007960 <_free_r+0x50>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d9fa      	bls.n	8007956 <_free_r+0x46>
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	1855      	adds	r5, r2, r1
 8007964:	42a5      	cmp	r5, r4
 8007966:	d10b      	bne.n	8007980 <_free_r+0x70>
 8007968:	6824      	ldr	r4, [r4, #0]
 800796a:	4421      	add	r1, r4
 800796c:	1854      	adds	r4, r2, r1
 800796e:	42a3      	cmp	r3, r4
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	d1e0      	bne.n	8007936 <_free_r+0x26>
 8007974:	681c      	ldr	r4, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	4421      	add	r1, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	e7da      	b.n	8007936 <_free_r+0x26>
 8007980:	d902      	bls.n	8007988 <_free_r+0x78>
 8007982:	230c      	movs	r3, #12
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	e7d6      	b.n	8007936 <_free_r+0x26>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1961      	adds	r1, r4, r5
 800798c:	428b      	cmp	r3, r1
 800798e:	bf04      	itt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	bf04      	itt	eq
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6054      	str	r4, [r2, #4]
 800799e:	e7ca      	b.n	8007936 <_free_r+0x26>
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	200004ac 	.word	0x200004ac

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0e      	ldr	r6, [pc, #56]	; (80079e4 <sbrk_aligned+0x3c>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f000 f8bc 	bl	8007b30 <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 f8b7 	bl	8007b30 <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d00a      	beq.n	80079dc <sbrk_aligned+0x34>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d007      	beq.n	80079e0 <sbrk_aligned+0x38>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f8ac 	bl	8007b30 <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d101      	bne.n	80079e0 <sbrk_aligned+0x38>
 80079dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079e0:	4620      	mov	r0, r4
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	200004b0 	.word	0x200004b0

080079e8 <_malloc_r>:
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	1ccd      	adds	r5, r1, #3
 80079ee:	f025 0503 	bic.w	r5, r5, #3
 80079f2:	3508      	adds	r5, #8
 80079f4:	2d0c      	cmp	r5, #12
 80079f6:	bf38      	it	cc
 80079f8:	250c      	movcc	r5, #12
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	4607      	mov	r7, r0
 80079fe:	db01      	blt.n	8007a04 <_malloc_r+0x1c>
 8007a00:	42a9      	cmp	r1, r5
 8007a02:	d905      	bls.n	8007a10 <_malloc_r+0x28>
 8007a04:	230c      	movs	r3, #12
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	2600      	movs	r6, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	4e2e      	ldr	r6, [pc, #184]	; (8007acc <_malloc_r+0xe4>)
 8007a12:	f000 f89d 	bl	8007b50 <__malloc_lock>
 8007a16:	6833      	ldr	r3, [r6, #0]
 8007a18:	461c      	mov	r4, r3
 8007a1a:	bb34      	cbnz	r4, 8007a6a <_malloc_r+0x82>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff ffc2 	bl	80079a8 <sbrk_aligned>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	4604      	mov	r4, r0
 8007a28:	d14d      	bne.n	8007ac6 <_malloc_r+0xde>
 8007a2a:	6834      	ldr	r4, [r6, #0]
 8007a2c:	4626      	mov	r6, r4
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d140      	bne.n	8007ab4 <_malloc_r+0xcc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	4631      	mov	r1, r6
 8007a36:	4638      	mov	r0, r7
 8007a38:	eb04 0803 	add.w	r8, r4, r3
 8007a3c:	f000 f878 	bl	8007b30 <_sbrk_r>
 8007a40:	4580      	cmp	r8, r0
 8007a42:	d13a      	bne.n	8007aba <_malloc_r+0xd2>
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	3503      	adds	r5, #3
 8007a48:	1a6d      	subs	r5, r5, r1
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	4629      	mov	r1, r5
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff ffa5 	bl	80079a8 <sbrk_aligned>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d02b      	beq.n	8007aba <_malloc_r+0xd2>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	442b      	add	r3, r5
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	e00e      	b.n	8007a88 <_malloc_r+0xa0>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	1b52      	subs	r2, r2, r5
 8007a6e:	d41e      	bmi.n	8007aae <_malloc_r+0xc6>
 8007a70:	2a0b      	cmp	r2, #11
 8007a72:	d916      	bls.n	8007aa2 <_malloc_r+0xba>
 8007a74:	1961      	adds	r1, r4, r5
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	6025      	str	r5, [r4, #0]
 8007a7a:	bf18      	it	ne
 8007a7c:	6059      	strne	r1, [r3, #4]
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	bf08      	it	eq
 8007a82:	6031      	streq	r1, [r6, #0]
 8007a84:	5162      	str	r2, [r4, r5]
 8007a86:	604b      	str	r3, [r1, #4]
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f104 060b 	add.w	r6, r4, #11
 8007a8e:	f000 f865 	bl	8007b5c <__malloc_unlock>
 8007a92:	f026 0607 	bic.w	r6, r6, #7
 8007a96:	1d23      	adds	r3, r4, #4
 8007a98:	1af2      	subs	r2, r6, r3
 8007a9a:	d0b6      	beq.n	8007a0a <_malloc_r+0x22>
 8007a9c:	1b9b      	subs	r3, r3, r6
 8007a9e:	50a3      	str	r3, [r4, r2]
 8007aa0:	e7b3      	b.n	8007a0a <_malloc_r+0x22>
 8007aa2:	6862      	ldr	r2, [r4, #4]
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	bf0c      	ite	eq
 8007aa8:	6032      	streq	r2, [r6, #0]
 8007aaa:	605a      	strne	r2, [r3, #4]
 8007aac:	e7ec      	b.n	8007a88 <_malloc_r+0xa0>
 8007aae:	4623      	mov	r3, r4
 8007ab0:	6864      	ldr	r4, [r4, #4]
 8007ab2:	e7b2      	b.n	8007a1a <_malloc_r+0x32>
 8007ab4:	4634      	mov	r4, r6
 8007ab6:	6876      	ldr	r6, [r6, #4]
 8007ab8:	e7b9      	b.n	8007a2e <_malloc_r+0x46>
 8007aba:	230c      	movs	r3, #12
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f000 f84c 	bl	8007b5c <__malloc_unlock>
 8007ac4:	e7a1      	b.n	8007a0a <_malloc_r+0x22>
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	e7de      	b.n	8007a88 <_malloc_r+0xa0>
 8007aca:	bf00      	nop
 8007acc:	200004ac 	.word	0x200004ac

08007ad0 <_realloc_r>:
 8007ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	460e      	mov	r6, r1
 8007ada:	b921      	cbnz	r1, 8007ae6 <_realloc_r+0x16>
 8007adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	f7ff bf81 	b.w	80079e8 <_malloc_r>
 8007ae6:	b92a      	cbnz	r2, 8007af4 <_realloc_r+0x24>
 8007ae8:	f7ff ff12 	bl	8007910 <_free_r>
 8007aec:	4625      	mov	r5, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af4:	f000 f838 	bl	8007b68 <_malloc_usable_size_r>
 8007af8:	4284      	cmp	r4, r0
 8007afa:	4607      	mov	r7, r0
 8007afc:	d802      	bhi.n	8007b04 <_realloc_r+0x34>
 8007afe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b02:	d812      	bhi.n	8007b2a <_realloc_r+0x5a>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7ff ff6e 	bl	80079e8 <_malloc_r>
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d0ed      	beq.n	8007aee <_realloc_r+0x1e>
 8007b12:	42bc      	cmp	r4, r7
 8007b14:	4622      	mov	r2, r4
 8007b16:	4631      	mov	r1, r6
 8007b18:	bf28      	it	cs
 8007b1a:	463a      	movcs	r2, r7
 8007b1c:	f7ff fed0 	bl	80078c0 <memcpy>
 8007b20:	4631      	mov	r1, r6
 8007b22:	4640      	mov	r0, r8
 8007b24:	f7ff fef4 	bl	8007910 <_free_r>
 8007b28:	e7e1      	b.n	8007aee <_realloc_r+0x1e>
 8007b2a:	4635      	mov	r5, r6
 8007b2c:	e7df      	b.n	8007aee <_realloc_r+0x1e>
	...

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fa f86a 	bl	8001c14 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	200004b4 	.word	0x200004b4

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_lock+0x8>)
 8007b52:	f000 b811 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	200004b8 	.word	0x200004b8

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f000 b80c 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	200004b8 	.word	0x200004b8

08007b68 <_malloc_usable_size_r>:
 8007b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b6c:	1f18      	subs	r0, r3, #4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bfbc      	itt	lt
 8007b72:	580b      	ldrlt	r3, [r1, r0]
 8007b74:	18c0      	addlt	r0, r0, r3
 8007b76:	4770      	bx	lr

08007b78 <__retarget_lock_acquire_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_release_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
